import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { QuickSightServiceException as __BaseException } from "./QuickSightServiceException";
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  Message?: string | undefined;
  RequestId?: string | undefined;
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export interface AccountCustomization {
  DefaultTheme?: string | undefined;
  DefaultEmailCustomizationTemplate?: string | undefined;
}
export declare const Edition: {
  readonly ENTERPRISE: "ENTERPRISE";
  readonly ENTERPRISE_AND_Q: "ENTERPRISE_AND_Q";
  readonly STANDARD: "STANDARD";
};
export type Edition = (typeof Edition)[keyof typeof Edition];
export interface AccountInfo {
  AccountName?: string | undefined;
  Edition?: Edition | undefined;
  NotificationEmail?: string | undefined;
  AuthenticationType?: string | undefined;
  AccountSubscriptionStatus?: string | undefined;
  IAMIdentityCenterInstanceArn?: string | undefined;
}
export interface AccountSettings {
  AccountName?: string | undefined;
  Edition?: Edition | undefined;
  DefaultNamespace?: string | undefined;
  NotificationEmail?: string | undefined;
  PublicSharingEnabled?: boolean | undefined;
  TerminationProtectionEnabled?: boolean | undefined;
}
export interface ActiveIAMPolicyAssignment {
  AssignmentName?: string | undefined;
  PolicyArn?: string | undefined;
}
export declare const DashboardBehavior: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type DashboardBehavior =
  (typeof DashboardBehavior)[keyof typeof DashboardBehavior];
export interface AdHocFilteringOption {
  AvailabilityStatus?: DashboardBehavior | undefined;
}
export declare const AggType: {
  readonly AVERAGE: "AVERAGE";
  readonly COLUMN: "COLUMN";
  readonly COUNT: "COUNT";
  readonly CUSTOM: "CUSTOM";
  readonly DISTINCT_COUNT: "DISTINCT_COUNT";
  readonly MAX: "MAX";
  readonly MEDIAN: "MEDIAN";
  readonly MIN: "MIN";
  readonly PERCENTILE: "PERCENTILE";
  readonly PTD_AVERAGE: "PTD_AVERAGE";
  readonly PTD_COUNT: "PTD_COUNT";
  readonly PTD_DISTINCT_COUNT: "PTD_DISTINCT_COUNT";
  readonly PTD_MAX: "PTD_MAX";
  readonly PTD_MIN: "PTD_MIN";
  readonly PTD_SUM: "PTD_SUM";
  readonly STDEV: "STDEV";
  readonly STDEVP: "STDEVP";
  readonly SUM: "SUM";
  readonly VAR: "VAR";
  readonly VARP: "VARP";
};
export type AggType = (typeof AggType)[keyof typeof AggType];
export declare const TopicTimeGranularity: {
  readonly DAY: "DAY";
  readonly HOUR: "HOUR";
  readonly MINUTE: "MINUTE";
  readonly MONTH: "MONTH";
  readonly QUARTER: "QUARTER";
  readonly SECOND: "SECOND";
  readonly WEEK: "WEEK";
  readonly YEAR: "YEAR";
};
export type TopicTimeGranularity =
  (typeof TopicTimeGranularity)[keyof typeof TopicTimeGranularity];
export interface AggFunction {
  Aggregation?: AggType | undefined;
  AggregationFunctionParameters?: Record<string, string> | undefined;
  Period?: TopicTimeGranularity | undefined;
  PeriodField?: string | undefined;
}
export declare const SimpleAttributeAggregationFunction: {
  readonly UNIQUE_VALUE: "UNIQUE_VALUE";
};
export type SimpleAttributeAggregationFunction =
  (typeof SimpleAttributeAggregationFunction)[keyof typeof SimpleAttributeAggregationFunction];
export interface AttributeAggregationFunction {
  SimpleAttributeAggregation?: SimpleAttributeAggregationFunction | undefined;
  ValueForMultipleValues?: string | undefined;
}
export declare const CategoricalAggregationFunction: {
  readonly COUNT: "COUNT";
  readonly DISTINCT_COUNT: "DISTINCT_COUNT";
};
export type CategoricalAggregationFunction =
  (typeof CategoricalAggregationFunction)[keyof typeof CategoricalAggregationFunction];
export declare const DateAggregationFunction: {
  readonly COUNT: "COUNT";
  readonly DISTINCT_COUNT: "DISTINCT_COUNT";
  readonly MAX: "MAX";
  readonly MIN: "MIN";
};
export type DateAggregationFunction =
  (typeof DateAggregationFunction)[keyof typeof DateAggregationFunction];
export interface PercentileAggregation {
  PercentileValue?: number | undefined;
}
export declare const SimpleNumericalAggregationFunction: {
  readonly AVERAGE: "AVERAGE";
  readonly COUNT: "COUNT";
  readonly DISTINCT_COUNT: "DISTINCT_COUNT";
  readonly MAX: "MAX";
  readonly MEDIAN: "MEDIAN";
  readonly MIN: "MIN";
  readonly STDEV: "STDEV";
  readonly STDEVP: "STDEVP";
  readonly SUM: "SUM";
  readonly VAR: "VAR";
  readonly VARP: "VARP";
};
export type SimpleNumericalAggregationFunction =
  (typeof SimpleNumericalAggregationFunction)[keyof typeof SimpleNumericalAggregationFunction];
export interface NumericalAggregationFunction {
  SimpleNumericalAggregation?: SimpleNumericalAggregationFunction | undefined;
  PercentileAggregation?: PercentileAggregation | undefined;
}
export interface AggregationFunction {
  NumericalAggregationFunction?: NumericalAggregationFunction | undefined;
  CategoricalAggregationFunction?: CategoricalAggregationFunction | undefined;
  DateAggregationFunction?: DateAggregationFunction | undefined;
  AttributeAggregationFunction?: AttributeAggregationFunction | undefined;
}
export declare const TimeGranularity: {
  readonly DAY: "DAY";
  readonly HOUR: "HOUR";
  readonly MILLISECOND: "MILLISECOND";
  readonly MINUTE: "MINUTE";
  readonly MONTH: "MONTH";
  readonly QUARTER: "QUARTER";
  readonly SECOND: "SECOND";
  readonly WEEK: "WEEK";
  readonly YEAR: "YEAR";
};
export type TimeGranularity =
  (typeof TimeGranularity)[keyof typeof TimeGranularity];
export interface AggregationPartitionBy {
  FieldName?: string | undefined;
  TimeGranularity?: TimeGranularity | undefined;
}
export interface ColumnIdentifier {
  DataSetIdentifier: string | undefined;
  ColumnName: string | undefined;
}
export declare const SortDirection: {
  readonly ASC: "ASC";
  readonly DESC: "DESC";
};
export type SortDirection = (typeof SortDirection)[keyof typeof SortDirection];
export interface AggregationSortConfiguration {
  Column: ColumnIdentifier | undefined;
  SortDirection: SortDirection | undefined;
  AggregationFunction?: AggregationFunction | undefined;
}
export interface AllSheetsFilterScopeConfiguration {}
export interface AmazonElasticsearchParameters {
  Domain: string | undefined;
}
export interface AmazonOpenSearchParameters {
  Domain: string | undefined;
}
export interface DataQnAConfigurations {
  Enabled: boolean | undefined;
}
export interface DataStoriesConfigurations {
  Enabled: boolean | undefined;
}
export interface ExecutiveSummaryConfigurations {
  Enabled: boolean | undefined;
}
export interface GenerativeAuthoringConfigurations {
  Enabled: boolean | undefined;
}
export interface AmazonQInQuickSightConsoleConfigurations {
  DataQnA?: DataQnAConfigurations | undefined;
  GenerativeAuthoring?: GenerativeAuthoringConfigurations | undefined;
  ExecutiveSummary?: ExecutiveSummaryConfigurations | undefined;
  DataStories?: DataStoriesConfigurations | undefined;
}
export interface AmazonQInQuickSightDashboardConfigurations {
  ExecutiveSummary?: ExecutiveSummaryConfigurations | undefined;
}
export declare const AnalysisErrorType: {
  readonly ACCESS_DENIED: "ACCESS_DENIED";
  readonly COLUMN_GEOGRAPHIC_ROLE_MISMATCH: "COLUMN_GEOGRAPHIC_ROLE_MISMATCH";
  readonly COLUMN_REPLACEMENT_MISSING: "COLUMN_REPLACEMENT_MISSING";
  readonly COLUMN_TYPE_MISMATCH: "COLUMN_TYPE_MISMATCH";
  readonly DATA_SET_NOT_FOUND: "DATA_SET_NOT_FOUND";
  readonly INTERNAL_FAILURE: "INTERNAL_FAILURE";
  readonly PARAMETER_NOT_FOUND: "PARAMETER_NOT_FOUND";
  readonly PARAMETER_TYPE_INVALID: "PARAMETER_TYPE_INVALID";
  readonly PARAMETER_VALUE_INCOMPATIBLE: "PARAMETER_VALUE_INCOMPATIBLE";
  readonly SOURCE_NOT_FOUND: "SOURCE_NOT_FOUND";
};
export type AnalysisErrorType =
  (typeof AnalysisErrorType)[keyof typeof AnalysisErrorType];
export interface Entity {
  Path?: string | undefined;
}
export interface AnalysisError {
  Type?: AnalysisErrorType | undefined;
  Message?: string | undefined;
  ViolatedEntities?: Entity[] | undefined;
}
export interface LocalNavigationConfiguration {
  TargetSheetId: string | undefined;
}
export interface CustomActionNavigationOperation {
  LocalNavigationConfiguration?: LocalNavigationConfiguration | undefined;
}
export interface CustomParameterValues {
  StringValues?: string[] | undefined;
  IntegerValues?: number[] | undefined;
  DecimalValues?: number[] | undefined;
  DateTimeValues?: Date[] | undefined;
}
export interface CustomValuesConfiguration {
  IncludeNullValue?: boolean | undefined;
  CustomValues: CustomParameterValues | undefined;
}
export declare const SelectAllValueOptions: {
  readonly ALL_VALUES: "ALL_VALUES";
};
export type SelectAllValueOptions =
  (typeof SelectAllValueOptions)[keyof typeof SelectAllValueOptions];
export interface DestinationParameterValueConfiguration {
  CustomValuesConfiguration?: CustomValuesConfiguration | undefined;
  SelectAllValueOptions?: SelectAllValueOptions | undefined;
  SourceParameterName?: string | undefined;
  SourceField?: string | undefined;
  SourceColumn?: ColumnIdentifier | undefined;
}
export interface SetParameterValueConfiguration {
  DestinationParameterName: string | undefined;
  Value: DestinationParameterValueConfiguration | undefined;
}
export interface CustomActionSetParametersOperation {
  ParameterValueConfigurations: SetParameterValueConfiguration[] | undefined;
}
export declare const URLTargetConfiguration: {
  readonly NEW_TAB: "NEW_TAB";
  readonly NEW_WINDOW: "NEW_WINDOW";
  readonly SAME_TAB: "SAME_TAB";
};
export type URLTargetConfiguration =
  (typeof URLTargetConfiguration)[keyof typeof URLTargetConfiguration];
export interface CustomActionURLOperation {
  URLTemplate: string | undefined;
  URLTarget: URLTargetConfiguration | undefined;
}
export interface ImageCustomActionOperation {
  NavigationOperation?: CustomActionNavigationOperation | undefined;
  URLOperation?: CustomActionURLOperation | undefined;
  SetParametersOperation?: CustomActionSetParametersOperation | undefined;
}
export declare const WidgetStatus: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type WidgetStatus = (typeof WidgetStatus)[keyof typeof WidgetStatus];
export declare const ImageCustomActionTrigger: {
  readonly CLICK: "CLICK";
  readonly MENU: "MENU";
};
export type ImageCustomActionTrigger =
  (typeof ImageCustomActionTrigger)[keyof typeof ImageCustomActionTrigger];
export interface ImageCustomAction {
  CustomActionId: string | undefined;
  Name: string | undefined;
  Status?: WidgetStatus | undefined;
  Trigger: ImageCustomActionTrigger | undefined;
  ActionOperations: ImageCustomActionOperation[] | undefined;
}
export interface ImageMenuOption {
  AvailabilityStatus?: DashboardBehavior | undefined;
}
export interface ImageInteractionOptions {
  ImageMenuOption?: ImageMenuOption | undefined;
}
export declare const SheetImageScalingType: {
  readonly SCALE_NONE: "SCALE_NONE";
  readonly SCALE_TO_CONTAINER: "SCALE_TO_CONTAINER";
  readonly SCALE_TO_HEIGHT: "SCALE_TO_HEIGHT";
  readonly SCALE_TO_WIDTH: "SCALE_TO_WIDTH";
};
export type SheetImageScalingType =
  (typeof SheetImageScalingType)[keyof typeof SheetImageScalingType];
export interface SheetImageScalingConfiguration {
  ScalingType?: SheetImageScalingType | undefined;
}
export interface SheetImageStaticFileSource {
  StaticFileId: string | undefined;
}
export interface SheetImageSource {
  SheetImageStaticFileSource?: SheetImageStaticFileSource | undefined;
}
export interface SheetImageTooltipText {
  PlainText?: string | undefined;
}
export declare const Visibility: {
  readonly HIDDEN: "HIDDEN";
  readonly VISIBLE: "VISIBLE";
};
export type Visibility = (typeof Visibility)[keyof typeof Visibility];
export interface SheetImageTooltipConfiguration {
  TooltipText?: SheetImageTooltipText | undefined;
  Visibility?: Visibility | undefined;
}
export interface SheetImage {
  SheetImageId: string | undefined;
  Source: SheetImageSource | undefined;
  Scaling?: SheetImageScalingConfiguration | undefined;
  Tooltip?: SheetImageTooltipConfiguration | undefined;
  ImageContentAltText?: string | undefined;
  Interactions?: ImageInteractionOptions | undefined;
  Actions?: ImageCustomAction[] | undefined;
}
export interface Sheet {
  SheetId?: string | undefined;
  Name?: string | undefined;
  Images?: SheetImage[] | undefined;
}
export declare const ResourceStatus: {
  readonly CREATION_FAILED: "CREATION_FAILED";
  readonly CREATION_IN_PROGRESS: "CREATION_IN_PROGRESS";
  readonly CREATION_SUCCESSFUL: "CREATION_SUCCESSFUL";
  readonly DELETED: "DELETED";
  readonly UPDATE_FAILED: "UPDATE_FAILED";
  readonly UPDATE_IN_PROGRESS: "UPDATE_IN_PROGRESS";
  readonly UPDATE_SUCCESSFUL: "UPDATE_SUCCESSFUL";
};
export type ResourceStatus =
  (typeof ResourceStatus)[keyof typeof ResourceStatus];
export interface Analysis {
  AnalysisId?: string | undefined;
  Arn?: string | undefined;
  Name?: string | undefined;
  Status?: ResourceStatus | undefined;
  Errors?: AnalysisError[] | undefined;
  DataSetArns?: string[] | undefined;
  ThemeArn?: string | undefined;
  CreatedTime?: Date | undefined;
  LastUpdatedTime?: Date | undefined;
  Sheets?: Sheet[] | undefined;
}
export interface FreeFormLayoutScreenCanvasSizeOptions {
  OptimizedViewPortWidth: string | undefined;
}
export interface FreeFormLayoutCanvasSizeOptions {
  ScreenCanvasSizeOptions?: FreeFormLayoutScreenCanvasSizeOptions | undefined;
}
export interface DefaultFreeFormLayoutConfiguration {
  CanvasSizeOptions: FreeFormLayoutCanvasSizeOptions | undefined;
}
export declare const ResizeOption: {
  readonly FIXED: "FIXED";
  readonly RESPONSIVE: "RESPONSIVE";
};
export type ResizeOption = (typeof ResizeOption)[keyof typeof ResizeOption];
export interface GridLayoutScreenCanvasSizeOptions {
  ResizeOption: ResizeOption | undefined;
  OptimizedViewPortWidth?: string | undefined;
}
export interface GridLayoutCanvasSizeOptions {
  ScreenCanvasSizeOptions?: GridLayoutScreenCanvasSizeOptions | undefined;
}
export interface DefaultGridLayoutConfiguration {
  CanvasSizeOptions: GridLayoutCanvasSizeOptions | undefined;
}
export interface DefaultInteractiveLayoutConfiguration {
  Grid?: DefaultGridLayoutConfiguration | undefined;
  FreeForm?: DefaultFreeFormLayoutConfiguration | undefined;
}
export interface Spacing {
  Top?: string | undefined;
  Bottom?: string | undefined;
  Left?: string | undefined;
  Right?: string | undefined;
}
export declare const PaperOrientation: {
  readonly LANDSCAPE: "LANDSCAPE";
  readonly PORTRAIT: "PORTRAIT";
};
export type PaperOrientation =
  (typeof PaperOrientation)[keyof typeof PaperOrientation];
export declare const PaperSize: {
  readonly A0: "A0";
  readonly A1: "A1";
  readonly A2: "A2";
  readonly A3: "A3";
  readonly A4: "A4";
  readonly A5: "A5";
  readonly JIS_B4: "JIS_B4";
  readonly JIS_B5: "JIS_B5";
  readonly US_LEGAL: "US_LEGAL";
  readonly US_LETTER: "US_LETTER";
  readonly US_TABLOID_LEDGER: "US_TABLOID_LEDGER";
};
export type PaperSize = (typeof PaperSize)[keyof typeof PaperSize];
export interface SectionBasedLayoutPaperCanvasSizeOptions {
  PaperSize?: PaperSize | undefined;
  PaperOrientation?: PaperOrientation | undefined;
  PaperMargin?: Spacing | undefined;
}
export interface SectionBasedLayoutCanvasSizeOptions {
  PaperCanvasSizeOptions?: SectionBasedLayoutPaperCanvasSizeOptions | undefined;
}
export interface DefaultSectionBasedLayoutConfiguration {
  CanvasSizeOptions: SectionBasedLayoutCanvasSizeOptions | undefined;
}
export interface DefaultPaginatedLayoutConfiguration {
  SectionBased?: DefaultSectionBasedLayoutConfiguration | undefined;
}
export declare const SheetContentType: {
  readonly INTERACTIVE: "INTERACTIVE";
  readonly PAGINATED: "PAGINATED";
};
export type SheetContentType =
  (typeof SheetContentType)[keyof typeof SheetContentType];
export interface DefaultNewSheetConfiguration {
  InteractiveLayoutConfiguration?:
    | DefaultInteractiveLayoutConfiguration
    | undefined;
  PaginatedLayoutConfiguration?:
    | DefaultPaginatedLayoutConfiguration
    | undefined;
  SheetContentType?: SheetContentType | undefined;
}
export interface AnalysisDefaults {
  DefaultNewSheetConfiguration: DefaultNewSheetConfiguration | undefined;
}
export interface CalculatedField {
  DataSetIdentifier: string | undefined;
  Name: string | undefined;
  Expression: string | undefined;
}
export declare const SpecialValue: {
  readonly EMPTY: "EMPTY";
  readonly NULL: "NULL";
  readonly OTHER: "OTHER";
};
export type SpecialValue = (typeof SpecialValue)[keyof typeof SpecialValue];
export interface CustomColor {
  FieldValue?: string | undefined;
  Color: string | undefined;
  SpecialValue?: SpecialValue | undefined;
}
export interface ColorsConfiguration {
  CustomColors?: CustomColor[] | undefined;
}
export interface NullValueFormatConfiguration {
  NullString: string | undefined;
}
export interface DecimalPlacesConfiguration {
  DecimalPlaces: number | undefined;
}
export declare const NegativeValueDisplayMode: {
  readonly NEGATIVE: "NEGATIVE";
  readonly POSITIVE: "POSITIVE";
};
export type NegativeValueDisplayMode =
  (typeof NegativeValueDisplayMode)[keyof typeof NegativeValueDisplayMode];
export interface NegativeValueConfiguration {
  DisplayMode: NegativeValueDisplayMode | undefined;
}
export declare const NumberScale: {
  readonly AUTO: "AUTO";
  readonly BILLIONS: "BILLIONS";
  readonly CRORES: "CRORES";
  readonly LAKHS: "LAKHS";
  readonly MILLIONS: "MILLIONS";
  readonly NONE: "NONE";
  readonly THOUSANDS: "THOUSANDS";
  readonly TRILLIONS: "TRILLIONS";
};
export type NumberScale = (typeof NumberScale)[keyof typeof NumberScale];
export declare const NumericSeparatorSymbol: {
  readonly COMMA: "COMMA";
  readonly DOT: "DOT";
  readonly SPACE: "SPACE";
};
export type NumericSeparatorSymbol =
  (typeof NumericSeparatorSymbol)[keyof typeof NumericSeparatorSymbol];
export declare const DigitGroupingStyle: {
  readonly DEFAULT: "DEFAULT";
  readonly LAKHS: "LAKHS";
};
export type DigitGroupingStyle =
  (typeof DigitGroupingStyle)[keyof typeof DigitGroupingStyle];
export interface ThousandSeparatorOptions {
  Symbol?: NumericSeparatorSymbol | undefined;
  Visibility?: Visibility | undefined;
  GroupingStyle?: DigitGroupingStyle | undefined;
}
export interface NumericSeparatorConfiguration {
  DecimalSeparator?: NumericSeparatorSymbol | undefined;
  ThousandsSeparator?: ThousandSeparatorOptions | undefined;
}
export interface CurrencyDisplayFormatConfiguration {
  Prefix?: string | undefined;
  Suffix?: string | undefined;
  SeparatorConfiguration?: NumericSeparatorConfiguration | undefined;
  Symbol?: string | undefined;
  DecimalPlacesConfiguration?: DecimalPlacesConfiguration | undefined;
  NumberScale?: NumberScale | undefined;
  NegativeValueConfiguration?: NegativeValueConfiguration | undefined;
  NullValueFormatConfiguration?: NullValueFormatConfiguration | undefined;
}
export interface NumberDisplayFormatConfiguration {
  Prefix?: string | undefined;
  Suffix?: string | undefined;
  SeparatorConfiguration?: NumericSeparatorConfiguration | undefined;
  DecimalPlacesConfiguration?: DecimalPlacesConfiguration | undefined;
  NumberScale?: NumberScale | undefined;
  NegativeValueConfiguration?: NegativeValueConfiguration | undefined;
  NullValueFormatConfiguration?: NullValueFormatConfiguration | undefined;
}
export interface PercentageDisplayFormatConfiguration {
  Prefix?: string | undefined;
  Suffix?: string | undefined;
  SeparatorConfiguration?: NumericSeparatorConfiguration | undefined;
  DecimalPlacesConfiguration?: DecimalPlacesConfiguration | undefined;
  NegativeValueConfiguration?: NegativeValueConfiguration | undefined;
  NullValueFormatConfiguration?: NullValueFormatConfiguration | undefined;
}
export interface NumericFormatConfiguration {
  NumberDisplayFormatConfiguration?:
    | NumberDisplayFormatConfiguration
    | undefined;
  CurrencyDisplayFormatConfiguration?:
    | CurrencyDisplayFormatConfiguration
    | undefined;
  PercentageDisplayFormatConfiguration?:
    | PercentageDisplayFormatConfiguration
    | undefined;
}
export interface DateTimeFormatConfiguration {
  DateTimeFormat?: string | undefined;
  NullValueFormatConfiguration?: NullValueFormatConfiguration | undefined;
  NumericFormatConfiguration?: NumericFormatConfiguration | undefined;
}
export interface NumberFormatConfiguration {
  FormatConfiguration?: NumericFormatConfiguration | undefined;
}
export interface StringFormatConfiguration {
  NullValueFormatConfiguration?: NullValueFormatConfiguration | undefined;
  NumericFormatConfiguration?: NumericFormatConfiguration | undefined;
}
export interface FormatConfiguration {
  StringFormatConfiguration?: StringFormatConfiguration | undefined;
  NumberFormatConfiguration?: NumberFormatConfiguration | undefined;
  DateTimeFormatConfiguration?: DateTimeFormatConfiguration | undefined;
}
export declare const ColumnRole: {
  readonly DIMENSION: "DIMENSION";
  readonly MEASURE: "MEASURE";
};
export type ColumnRole = (typeof ColumnRole)[keyof typeof ColumnRole];
export interface ColumnConfiguration {
  Column: ColumnIdentifier | undefined;
  FormatConfiguration?: FormatConfiguration | undefined;
  Role?: ColumnRole | undefined;
  ColorsConfiguration?: ColorsConfiguration | undefined;
}
export interface DataSetIdentifierDeclaration {
  Identifier: string | undefined;
  DataSetArn: string | undefined;
}
export declare const CrossDatasetTypes: {
  readonly ALL_DATASETS: "ALL_DATASETS";
  readonly SINGLE_DATASET: "SINGLE_DATASET";
};
export type CrossDatasetTypes =
  (typeof CrossDatasetTypes)[keyof typeof CrossDatasetTypes];
export declare const CategoryFilterMatchOperator: {
  readonly CONTAINS: "CONTAINS";
  readonly DOES_NOT_CONTAIN: "DOES_NOT_CONTAIN";
  readonly DOES_NOT_EQUAL: "DOES_NOT_EQUAL";
  readonly ENDS_WITH: "ENDS_WITH";
  readonly EQUALS: "EQUALS";
  readonly STARTS_WITH: "STARTS_WITH";
};
export type CategoryFilterMatchOperator =
  (typeof CategoryFilterMatchOperator)[keyof typeof CategoryFilterMatchOperator];
export declare const FilterNullOption: {
  readonly ALL_VALUES: "ALL_VALUES";
  readonly NON_NULLS_ONLY: "NON_NULLS_ONLY";
  readonly NULLS_ONLY: "NULLS_ONLY";
};
export type FilterNullOption =
  (typeof FilterNullOption)[keyof typeof FilterNullOption];
export declare const CategoryFilterSelectAllOptions: {
  readonly FILTER_ALL_VALUES: "FILTER_ALL_VALUES";
};
export type CategoryFilterSelectAllOptions =
  (typeof CategoryFilterSelectAllOptions)[keyof typeof CategoryFilterSelectAllOptions];
export interface CustomFilterConfiguration {
  MatchOperator: CategoryFilterMatchOperator | undefined;
  CategoryValue?: string | undefined;
  SelectAllOptions?: CategoryFilterSelectAllOptions | undefined;
  ParameterName?: string | undefined;
  NullOption: FilterNullOption | undefined;
}
export interface CustomFilterListConfiguration {
  MatchOperator: CategoryFilterMatchOperator | undefined;
  CategoryValues?: string[] | undefined;
  SelectAllOptions?: CategoryFilterSelectAllOptions | undefined;
  NullOption: FilterNullOption | undefined;
}
export interface FilterListConfiguration {
  MatchOperator: CategoryFilterMatchOperator | undefined;
  CategoryValues?: string[] | undefined;
  SelectAllOptions?: CategoryFilterSelectAllOptions | undefined;
  NullOption?: FilterNullOption | undefined;
}
export interface CategoryFilterConfiguration {
  FilterListConfiguration?: FilterListConfiguration | undefined;
  CustomFilterListConfiguration?: CustomFilterListConfiguration | undefined;
  CustomFilterConfiguration?: CustomFilterConfiguration | undefined;
}
export declare const CommitMode: {
  readonly AUTO: "AUTO";
  readonly MANUAL: "MANUAL";
};
export type CommitMode = (typeof CommitMode)[keyof typeof CommitMode];
export interface SheetControlInfoIconLabelOptions {
  Visibility?: Visibility | undefined;
  InfoIconText?: string | undefined;
}
export declare const FontDecoration: {
  readonly NONE: "NONE";
  readonly UNDERLINE: "UNDERLINE";
};
export type FontDecoration =
  (typeof FontDecoration)[keyof typeof FontDecoration];
export declare const RelativeFontSize: {
  readonly EXTRA_LARGE: "EXTRA_LARGE";
  readonly EXTRA_SMALL: "EXTRA_SMALL";
  readonly LARGE: "LARGE";
  readonly MEDIUM: "MEDIUM";
  readonly SMALL: "SMALL";
};
export type RelativeFontSize =
  (typeof RelativeFontSize)[keyof typeof RelativeFontSize];
export interface FontSize {
  Relative?: RelativeFontSize | undefined;
  Absolute?: string | undefined;
}
export declare const FontStyle: {
  readonly ITALIC: "ITALIC";
  readonly NORMAL: "NORMAL";
};
export type FontStyle = (typeof FontStyle)[keyof typeof FontStyle];
export declare const FontWeightName: {
  readonly BOLD: "BOLD";
  readonly NORMAL: "NORMAL";
};
export type FontWeightName =
  (typeof FontWeightName)[keyof typeof FontWeightName];
export interface FontWeight {
  Name?: FontWeightName | undefined;
}
export interface FontConfiguration {
  FontSize?: FontSize | undefined;
  FontDecoration?: FontDecoration | undefined;
  FontColor?: string | undefined;
  FontWeight?: FontWeight | undefined;
  FontStyle?: FontStyle | undefined;
  FontFamily?: string | undefined;
}
export interface LabelOptions {
  Visibility?: Visibility | undefined;
  FontConfiguration?: FontConfiguration | undefined;
  CustomLabel?: string | undefined;
}
export interface DateTimePickerControlDisplayOptions {
  TitleOptions?: LabelOptions | undefined;
  DateTimeFormat?: string | undefined;
  InfoIconLabelOptions?: SheetControlInfoIconLabelOptions | undefined;
  HelperTextVisibility?: Visibility | undefined;
  DateIconVisibility?: Visibility | undefined;
}
export declare const SheetControlDateTimePickerType: {
  readonly DATE_RANGE: "DATE_RANGE";
  readonly SINGLE_VALUED: "SINGLE_VALUED";
};
export type SheetControlDateTimePickerType =
  (typeof SheetControlDateTimePickerType)[keyof typeof SheetControlDateTimePickerType];
export interface DefaultDateTimePickerControlOptions {
  Type?: SheetControlDateTimePickerType | undefined;
  DisplayOptions?: DateTimePickerControlDisplayOptions | undefined;
  CommitMode?: CommitMode | undefined;
}
export interface ListControlSelectAllOptions {
  Visibility?: Visibility | undefined;
}
export interface DropDownControlDisplayOptions {
  SelectAllOptions?: ListControlSelectAllOptions | undefined;
  TitleOptions?: LabelOptions | undefined;
  InfoIconLabelOptions?: SheetControlInfoIconLabelOptions | undefined;
}
export interface FilterSelectableValues {
  Values?: string[] | undefined;
}
export declare const SheetControlListType: {
  readonly MULTI_SELECT: "MULTI_SELECT";
  readonly SINGLE_SELECT: "SINGLE_SELECT";
};
export type SheetControlListType =
  (typeof SheetControlListType)[keyof typeof SheetControlListType];
export interface DefaultFilterDropDownControlOptions {
  DisplayOptions?: DropDownControlDisplayOptions | undefined;
  Type?: SheetControlListType | undefined;
  SelectableValues?: FilterSelectableValues | undefined;
  CommitMode?: CommitMode | undefined;
}
export interface ListControlSearchOptions {
  Visibility?: Visibility | undefined;
}
export interface ListControlDisplayOptions {
  SearchOptions?: ListControlSearchOptions | undefined;
  SelectAllOptions?: ListControlSelectAllOptions | undefined;
  TitleOptions?: LabelOptions | undefined;
  InfoIconLabelOptions?: SheetControlInfoIconLabelOptions | undefined;
}
export interface DefaultFilterListControlOptions {
  DisplayOptions?: ListControlDisplayOptions | undefined;
  Type?: SheetControlListType | undefined;
  SelectableValues?: FilterSelectableValues | undefined;
}
export interface RelativeDateTimeControlDisplayOptions {
  TitleOptions?: LabelOptions | undefined;
  DateTimeFormat?: string | undefined;
  InfoIconLabelOptions?: SheetControlInfoIconLabelOptions | undefined;
}
export interface DefaultRelativeDateTimeControlOptions {
  DisplayOptions?: RelativeDateTimeControlDisplayOptions | undefined;
  CommitMode?: CommitMode | undefined;
}
export interface SliderControlDisplayOptions {
  TitleOptions?: LabelOptions | undefined;
  InfoIconLabelOptions?: SheetControlInfoIconLabelOptions | undefined;
}
export declare const SheetControlSliderType: {
  readonly RANGE: "RANGE";
  readonly SINGLE_POINT: "SINGLE_POINT";
};
export type SheetControlSliderType =
  (typeof SheetControlSliderType)[keyof typeof SheetControlSliderType];
export interface DefaultSliderControlOptions {
  DisplayOptions?: SliderControlDisplayOptions | undefined;
  Type?: SheetControlSliderType | undefined;
  MaximumValue: number | undefined;
  MinimumValue: number | undefined;
  StepSize: number | undefined;
}
export interface TextControlPlaceholderOptions {
  Visibility?: Visibility | undefined;
}
export interface TextAreaControlDisplayOptions {
  TitleOptions?: LabelOptions | undefined;
  PlaceholderOptions?: TextControlPlaceholderOptions | undefined;
  InfoIconLabelOptions?: SheetControlInfoIconLabelOptions | undefined;
}
export interface DefaultTextAreaControlOptions {
  Delimiter?: string | undefined;
  DisplayOptions?: TextAreaControlDisplayOptions | undefined;
}
export interface TextFieldControlDisplayOptions {
  TitleOptions?: LabelOptions | undefined;
  PlaceholderOptions?: TextControlPlaceholderOptions | undefined;
  InfoIconLabelOptions?: SheetControlInfoIconLabelOptions | undefined;
}
export interface DefaultTextFieldControlOptions {
  DisplayOptions?: TextFieldControlDisplayOptions | undefined;
}
export interface DefaultFilterControlOptions {
  DefaultDateTimePickerOptions?:
    | DefaultDateTimePickerControlOptions
    | undefined;
  DefaultListOptions?: DefaultFilterListControlOptions | undefined;
  DefaultDropdownOptions?: DefaultFilterDropDownControlOptions | undefined;
  DefaultTextFieldOptions?: DefaultTextFieldControlOptions | undefined;
  DefaultTextAreaOptions?: DefaultTextAreaControlOptions | undefined;
  DefaultSliderOptions?: DefaultSliderControlOptions | undefined;
  DefaultRelativeDateTimeOptions?:
    | DefaultRelativeDateTimeControlOptions
    | undefined;
}
export interface DefaultFilterControlConfiguration {
  Title: string | undefined;
  ControlOptions: DefaultFilterControlOptions | undefined;
}
export interface CategoryFilter {
  FilterId: string | undefined;
  Column: ColumnIdentifier | undefined;
  Configuration: CategoryFilterConfiguration | undefined;
  DefaultFilterControlConfiguration?:
    | DefaultFilterControlConfiguration
    | undefined;
}
export interface CategoryInnerFilter {
  Column: ColumnIdentifier | undefined;
  Configuration: CategoryFilterConfiguration | undefined;
  DefaultFilterControlConfiguration?:
    | DefaultFilterControlConfiguration
    | undefined;
}
export interface InnerFilter {
  CategoryInnerFilter?: CategoryInnerFilter | undefined;
}
export interface NestedFilter {
  FilterId: string | undefined;
  Column: ColumnIdentifier | undefined;
  IncludeInnerSet: boolean | undefined;
  InnerFilter: InnerFilter | undefined;
}
export declare const NumericEqualityMatchOperator: {
  readonly DOES_NOT_EQUAL: "DOES_NOT_EQUAL";
  readonly EQUALS: "EQUALS";
};
export type NumericEqualityMatchOperator =
  (typeof NumericEqualityMatchOperator)[keyof typeof NumericEqualityMatchOperator];
export declare const NumericFilterSelectAllOptions: {
  readonly FILTER_ALL_VALUES: "FILTER_ALL_VALUES";
};
export type NumericFilterSelectAllOptions =
  (typeof NumericFilterSelectAllOptions)[keyof typeof NumericFilterSelectAllOptions];
export interface NumericEqualityFilter {
  FilterId: string | undefined;
  Column: ColumnIdentifier | undefined;
  Value?: number | undefined;
  SelectAllOptions?: NumericFilterSelectAllOptions | undefined;
  MatchOperator: NumericEqualityMatchOperator | undefined;
  AggregationFunction?: AggregationFunction | undefined;
  ParameterName?: string | undefined;
  NullOption: FilterNullOption | undefined;
  DefaultFilterControlConfiguration?:
    | DefaultFilterControlConfiguration
    | undefined;
}
export interface NumericRangeFilterValue {
  StaticValue?: number | undefined;
  Parameter?: string | undefined;
}
export interface NumericRangeFilter {
  FilterId: string | undefined;
  Column: ColumnIdentifier | undefined;
  IncludeMinimum?: boolean | undefined;
  IncludeMaximum?: boolean | undefined;
  RangeMinimum?: NumericRangeFilterValue | undefined;
  RangeMaximum?: NumericRangeFilterValue | undefined;
  SelectAllOptions?: NumericFilterSelectAllOptions | undefined;
  AggregationFunction?: AggregationFunction | undefined;
  NullOption: FilterNullOption | undefined;
  DefaultFilterControlConfiguration?:
    | DefaultFilterControlConfiguration
    | undefined;
}
export declare const AnchorOption: {
  readonly NOW: "NOW";
};
export type AnchorOption = (typeof AnchorOption)[keyof typeof AnchorOption];
export interface AnchorDateConfiguration {
  AnchorOption?: AnchorOption | undefined;
  ParameterName?: string | undefined;
}
export interface ExcludePeriodConfiguration {
  Amount: number | undefined;
  Granularity: TimeGranularity | undefined;
  Status?: WidgetStatus | undefined;
}
export declare const RelativeDateType: {
  readonly LAST: "LAST";
  readonly NEXT: "NEXT";
  readonly NOW: "NOW";
  readonly PREVIOUS: "PREVIOUS";
  readonly THIS: "THIS";
};
export type RelativeDateType =
  (typeof RelativeDateType)[keyof typeof RelativeDateType];
export interface RelativeDatesFilter {
  FilterId: string | undefined;
  Column: ColumnIdentifier | undefined;
  AnchorDateConfiguration: AnchorDateConfiguration | undefined;
  MinimumGranularity?: TimeGranularity | undefined;
  TimeGranularity: TimeGranularity | undefined;
  RelativeDateType: RelativeDateType | undefined;
  RelativeDateValue?: number | undefined;
  ParameterName?: string | undefined;
  NullOption: FilterNullOption | undefined;
  ExcludePeriodConfiguration?: ExcludePeriodConfiguration | undefined;
  DefaultFilterControlConfiguration?:
    | DefaultFilterControlConfiguration
    | undefined;
}
export interface RollingDateConfiguration {
  DataSetIdentifier?: string | undefined;
  Expression: string | undefined;
}
export interface TimeEqualityFilter {
  FilterId: string | undefined;
  Column: ColumnIdentifier | undefined;
  Value?: Date | undefined;
  ParameterName?: string | undefined;
  TimeGranularity?: TimeGranularity | undefined;
  RollingDate?: RollingDateConfiguration | undefined;
  DefaultFilterControlConfiguration?:
    | DefaultFilterControlConfiguration
    | undefined;
}
export interface TimeRangeFilterValue {
  StaticValue?: Date | undefined;
  RollingDate?: RollingDateConfiguration | undefined;
  Parameter?: string | undefined;
}
export interface TimeRangeFilter {
  FilterId: string | undefined;
  Column: ColumnIdentifier | undefined;
  IncludeMinimum?: boolean | undefined;
  IncludeMaximum?: boolean | undefined;
  RangeMinimumValue?: TimeRangeFilterValue | undefined;
  RangeMaximumValue?: TimeRangeFilterValue | undefined;
  NullOption: FilterNullOption | undefined;
  ExcludePeriodConfiguration?: ExcludePeriodConfiguration | undefined;
  TimeGranularity?: TimeGranularity | undefined;
  DefaultFilterControlConfiguration?:
    | DefaultFilterControlConfiguration
    | undefined;
}
export interface TopBottomFilter {
  FilterId: string | undefined;
  Column: ColumnIdentifier | undefined;
  Limit?: number | undefined;
  AggregationSortConfigurations: AggregationSortConfiguration[] | undefined;
  TimeGranularity?: TimeGranularity | undefined;
  ParameterName?: string | undefined;
  DefaultFilterControlConfiguration?:
    | DefaultFilterControlConfiguration
    | undefined;
}
export interface Filter {
  CategoryFilter?: CategoryFilter | undefined;
  NumericRangeFilter?: NumericRangeFilter | undefined;
  NumericEqualityFilter?: NumericEqualityFilter | undefined;
  TimeEqualityFilter?: TimeEqualityFilter | undefined;
  TimeRangeFilter?: TimeRangeFilter | undefined;
  RelativeDatesFilter?: RelativeDatesFilter | undefined;
  TopBottomFilter?: TopBottomFilter | undefined;
  NestedFilter?: NestedFilter | undefined;
}
export declare const FilterVisualScope: {
  readonly ALL_VISUALS: "ALL_VISUALS";
  readonly SELECTED_VISUALS: "SELECTED_VISUALS";
};
export type FilterVisualScope =
  (typeof FilterVisualScope)[keyof typeof FilterVisualScope];
export interface SheetVisualScopingConfiguration {
  SheetId: string | undefined;
  Scope: FilterVisualScope | undefined;
  VisualIds?: string[] | undefined;
}
export interface SelectedSheetsFilterScopeConfiguration {
  SheetVisualScopingConfigurations?:
    | SheetVisualScopingConfiguration[]
    | undefined;
}
export interface FilterScopeConfiguration {
  SelectedSheets?: SelectedSheetsFilterScopeConfiguration | undefined;
  AllSheets?: AllSheetsFilterScopeConfiguration | undefined;
}
export interface FilterGroup {
  FilterGroupId: string | undefined;
  Filters: Filter[] | undefined;
  ScopeConfiguration: FilterScopeConfiguration | undefined;
  Status?: WidgetStatus | undefined;
  CrossDataset: CrossDatasetTypes | undefined;
}
export declare const VisualHighlightTrigger: {
  readonly DATA_POINT_CLICK: "DATA_POINT_CLICK";
  readonly DATA_POINT_HOVER: "DATA_POINT_HOVER";
  readonly NONE: "NONE";
};
export type VisualHighlightTrigger =
  (typeof VisualHighlightTrigger)[keyof typeof VisualHighlightTrigger];
export interface VisualHighlightOperation {
  Trigger: VisualHighlightTrigger | undefined;
}
export interface VisualCustomActionDefaults {
  highlightOperation?: VisualHighlightOperation | undefined;
}
export declare const QBusinessInsightsStatus: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type QBusinessInsightsStatus =
  (typeof QBusinessInsightsStatus)[keyof typeof QBusinessInsightsStatus];
export declare const DayOfTheWeek: {
  readonly FRIDAY: "FRIDAY";
  readonly MONDAY: "MONDAY";
  readonly SATURDAY: "SATURDAY";
  readonly SUNDAY: "SUNDAY";
  readonly THURSDAY: "THURSDAY";
  readonly TUESDAY: "TUESDAY";
  readonly WEDNESDAY: "WEDNESDAY";
};
export type DayOfTheWeek = (typeof DayOfTheWeek)[keyof typeof DayOfTheWeek];
export interface AssetOptions {
  Timezone?: string | undefined;
  WeekStart?: DayOfTheWeek | undefined;
  QBusinessInsightsStatus?: QBusinessInsightsStatus | undefined;
  ExcludedDataSetArns?: string[] | undefined;
  CustomActionDefaults?: VisualCustomActionDefaults | undefined;
}
export interface DynamicDefaultValue {
  UserNameColumn?: ColumnIdentifier | undefined;
  GroupNameColumn?: ColumnIdentifier | undefined;
  DefaultValueColumn: ColumnIdentifier | undefined;
}
export interface DateTimeDefaultValues {
  DynamicValue?: DynamicDefaultValue | undefined;
  StaticValues?: Date[] | undefined;
  RollingDate?: RollingDateConfiguration | undefined;
}
export interface MappedDataSetParameter {
  DataSetIdentifier: string | undefined;
  DataSetParameterName: string | undefined;
}
export declare const ValueWhenUnsetOption: {
  readonly NULL: "NULL";
  readonly RECOMMENDED_VALUE: "RECOMMENDED_VALUE";
};
export type ValueWhenUnsetOption =
  (typeof ValueWhenUnsetOption)[keyof typeof ValueWhenUnsetOption];
export interface DateTimeValueWhenUnsetConfiguration {
  ValueWhenUnsetOption?: ValueWhenUnsetOption | undefined;
  CustomValue?: Date | undefined;
}
export interface DateTimeParameterDeclaration {
  Name: string | undefined;
  DefaultValues?: DateTimeDefaultValues | undefined;
  TimeGranularity?: TimeGranularity | undefined;
  ValueWhenUnset?: DateTimeValueWhenUnsetConfiguration | undefined;
  MappedDataSetParameters?: MappedDataSetParameter[] | undefined;
}
export interface DecimalDefaultValues {
  DynamicValue?: DynamicDefaultValue | undefined;
  StaticValues?: number[] | undefined;
}
export declare const ParameterValueType: {
  readonly MULTI_VALUED: "MULTI_VALUED";
  readonly SINGLE_VALUED: "SINGLE_VALUED";
};
export type ParameterValueType =
  (typeof ParameterValueType)[keyof typeof ParameterValueType];
export interface DecimalValueWhenUnsetConfiguration {
  ValueWhenUnsetOption?: ValueWhenUnsetOption | undefined;
  CustomValue?: number | undefined;
}
export interface DecimalParameterDeclaration {
  ParameterValueType: ParameterValueType | undefined;
  Name: string | undefined;
  DefaultValues?: DecimalDefaultValues | undefined;
  ValueWhenUnset?: DecimalValueWhenUnsetConfiguration | undefined;
  MappedDataSetParameters?: MappedDataSetParameter[] | undefined;
}
export interface IntegerDefaultValues {
  DynamicValue?: DynamicDefaultValue | undefined;
  StaticValues?: number[] | undefined;
}
export interface IntegerValueWhenUnsetConfiguration {
  ValueWhenUnsetOption?: ValueWhenUnsetOption | undefined;
  CustomValue?: number | undefined;
}
export interface IntegerParameterDeclaration {
  ParameterValueType: ParameterValueType | undefined;
  Name: string | undefined;
  DefaultValues?: IntegerDefaultValues | undefined;
  ValueWhenUnset?: IntegerValueWhenUnsetConfiguration | undefined;
  MappedDataSetParameters?: MappedDataSetParameter[] | undefined;
}
export interface StringDefaultValues {
  DynamicValue?: DynamicDefaultValue | undefined;
  StaticValues?: string[] | undefined;
}
export interface StringValueWhenUnsetConfiguration {
  ValueWhenUnsetOption?: ValueWhenUnsetOption | undefined;
  CustomValue?: string | undefined;
}
export interface StringParameterDeclaration {
  ParameterValueType: ParameterValueType | undefined;
  Name: string | undefined;
  DefaultValues?: StringDefaultValues | undefined;
  ValueWhenUnset?: StringValueWhenUnsetConfiguration | undefined;
  MappedDataSetParameters?: MappedDataSetParameter[] | undefined;
}
export interface ParameterDeclaration {
  StringParameterDeclaration?: StringParameterDeclaration | undefined;
  DecimalParameterDeclaration?: DecimalParameterDeclaration | undefined;
  IntegerParameterDeclaration?: IntegerParameterDeclaration | undefined;
  DateTimeParameterDeclaration?: DateTimeParameterDeclaration | undefined;
}
export declare const QueryExecutionMode: {
  readonly AUTO: "AUTO";
  readonly MANUAL: "MANUAL";
};
export type QueryExecutionMode =
  (typeof QueryExecutionMode)[keyof typeof QueryExecutionMode];
export interface QueryExecutionOptions {
  QueryExecutionMode?: QueryExecutionMode | undefined;
}
export interface CascadingControlSource {
  SourceSheetControlId?: string | undefined;
  ColumnToMatch?: ColumnIdentifier | undefined;
}
export interface CascadingControlConfiguration {
  SourceControls?: CascadingControlSource[] | undefined;
}
export interface FilterCrossSheetControl {
  FilterControlId: string | undefined;
  SourceFilterId: string | undefined;
  CascadingControlConfiguration?: CascadingControlConfiguration | undefined;
}
export interface FilterDateTimePickerControl {
  FilterControlId: string | undefined;
  Title: string | undefined;
  SourceFilterId: string | undefined;
  DisplayOptions?: DateTimePickerControlDisplayOptions | undefined;
  Type?: SheetControlDateTimePickerType | undefined;
  CommitMode?: CommitMode | undefined;
}
export interface FilterDropDownControl {
  FilterControlId: string | undefined;
  Title: string | undefined;
  SourceFilterId: string | undefined;
  DisplayOptions?: DropDownControlDisplayOptions | undefined;
  Type?: SheetControlListType | undefined;
  SelectableValues?: FilterSelectableValues | undefined;
  CascadingControlConfiguration?: CascadingControlConfiguration | undefined;
  CommitMode?: CommitMode | undefined;
}
export interface FilterListControl {
  FilterControlId: string | undefined;
  Title: string | undefined;
  SourceFilterId: string | undefined;
  DisplayOptions?: ListControlDisplayOptions | undefined;
  Type?: SheetControlListType | undefined;
  SelectableValues?: FilterSelectableValues | undefined;
  CascadingControlConfiguration?: CascadingControlConfiguration | undefined;
}
export interface FilterRelativeDateTimeControl {
  FilterControlId: string | undefined;
  Title: string | undefined;
  SourceFilterId: string | undefined;
  DisplayOptions?: RelativeDateTimeControlDisplayOptions | undefined;
  CommitMode?: CommitMode | undefined;
}
export interface FilterSliderControl {
  FilterControlId: string | undefined;
  Title: string | undefined;
  SourceFilterId: string | undefined;
  DisplayOptions?: SliderControlDisplayOptions | undefined;
  Type?: SheetControlSliderType | undefined;
  MaximumValue: number | undefined;
  MinimumValue: number | undefined;
  StepSize: number | undefined;
}
export interface FilterTextAreaControl {
  FilterControlId: string | undefined;
  Title: string | undefined;
  SourceFilterId: string | undefined;
  Delimiter?: string | undefined;
  DisplayOptions?: TextAreaControlDisplayOptions | undefined;
}
export interface FilterTextFieldControl {
  FilterControlId: string | undefined;
  Title: string | undefined;
  SourceFilterId: string | undefined;
  DisplayOptions?: TextFieldControlDisplayOptions | undefined;
}
export interface FilterControl {
  DateTimePicker?: FilterDateTimePickerControl | undefined;
  List?: FilterListControl | undefined;
  Dropdown?: FilterDropDownControl | undefined;
  TextField?: FilterTextFieldControl | undefined;
  TextArea?: FilterTextAreaControl | undefined;
  Slider?: FilterSliderControl | undefined;
  RelativeDateTime?: FilterRelativeDateTimeControl | undefined;
  CrossSheet?: FilterCrossSheetControl | undefined;
}
export interface FreeFormLayoutElementBackgroundStyle {
  Visibility?: Visibility | undefined;
  Color?: string | undefined;
}
export interface FreeFormLayoutElementBorderStyle {
  Visibility?: Visibility | undefined;
  Color?: string | undefined;
}
export declare const LayoutElementType: {
  readonly FILTER_CONTROL: "FILTER_CONTROL";
  readonly IMAGE: "IMAGE";
  readonly PARAMETER_CONTROL: "PARAMETER_CONTROL";
  readonly TEXT_BOX: "TEXT_BOX";
  readonly VISUAL: "VISUAL";
};
export type LayoutElementType =
  (typeof LayoutElementType)[keyof typeof LayoutElementType];
export interface LoadingAnimation {
  Visibility?: Visibility | undefined;
}
export interface SheetElementConfigurationOverrides {
  Visibility?: Visibility | undefined;
}
export interface SheetElementRenderingRule {
  Expression: string | undefined;
  ConfigurationOverrides: SheetElementConfigurationOverrides | undefined;
}
export interface FreeFormLayoutElement {
  ElementId: string | undefined;
  ElementType: LayoutElementType | undefined;
  XAxisLocation: string | undefined;
  YAxisLocation: string | undefined;
  Width: string | undefined;
  Height: string | undefined;
  Visibility?: Visibility | undefined;
  RenderingRules?: SheetElementRenderingRule[] | undefined;
  BorderStyle?: FreeFormLayoutElementBorderStyle | undefined;
  SelectedBorderStyle?: FreeFormLayoutElementBorderStyle | undefined;
  BackgroundStyle?: FreeFormLayoutElementBackgroundStyle | undefined;
  LoadingAnimation?: LoadingAnimation | undefined;
}
export interface FreeFormLayoutConfiguration {
  Elements: FreeFormLayoutElement[] | undefined;
  CanvasSizeOptions?: FreeFormLayoutCanvasSizeOptions | undefined;
}
export interface GridLayoutElement {
  ElementId: string | undefined;
  ElementType: LayoutElementType | undefined;
  ColumnIndex?: number | undefined;
  ColumnSpan: number | undefined;
  RowIndex?: number | undefined;
  RowSpan: number | undefined;
}
export interface GridLayoutConfiguration {
  Elements: GridLayoutElement[] | undefined;
  CanvasSizeOptions?: GridLayoutCanvasSizeOptions | undefined;
}
export interface FreeFormSectionLayoutConfiguration {
  Elements: FreeFormLayoutElement[] | undefined;
}
export interface SectionLayoutConfiguration {
  FreeFormLayout: FreeFormSectionLayoutConfiguration | undefined;
}
export interface BodySectionContent {
  Layout?: SectionLayoutConfiguration | undefined;
}
export declare const SectionPageBreakStatus: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type SectionPageBreakStatus =
  (typeof SectionPageBreakStatus)[keyof typeof SectionPageBreakStatus];
export interface SectionAfterPageBreak {
  Status?: SectionPageBreakStatus | undefined;
}
export interface SectionPageBreakConfiguration {
  After?: SectionAfterPageBreak | undefined;
}
export interface ColumnSort {
  SortBy: ColumnIdentifier | undefined;
  Direction: SortDirection | undefined;
  AggregationFunction?: AggregationFunction | undefined;
}
export interface BodySectionDynamicCategoryDimensionConfiguration {
  Column: ColumnIdentifier | undefined;
  Limit?: number | undefined;
  SortByMetrics?: ColumnSort[] | undefined;
}
export interface BodySectionDynamicNumericDimensionConfiguration {
  Column: ColumnIdentifier | undefined;
  Limit?: number | undefined;
  SortByMetrics?: ColumnSort[] | undefined;
}
export interface BodySectionRepeatDimensionConfiguration {
  DynamicCategoryDimensionConfiguration?:
    | BodySectionDynamicCategoryDimensionConfiguration
    | undefined;
  DynamicNumericDimensionConfiguration?:
    | BodySectionDynamicNumericDimensionConfiguration
    | undefined;
}
export interface BodySectionRepeatPageBreakConfiguration {
  After?: SectionAfterPageBreak | undefined;
}
export interface BodySectionRepeatConfiguration {
  DimensionConfigurations?:
    | BodySectionRepeatDimensionConfiguration[]
    | undefined;
  PageBreakConfiguration?: BodySectionRepeatPageBreakConfiguration | undefined;
  NonRepeatingVisuals?: string[] | undefined;
}
export interface SectionStyle {
  Height?: string | undefined;
  Padding?: Spacing | undefined;
}
export interface BodySectionConfiguration {
  SectionId: string | undefined;
  Content: BodySectionContent | undefined;
  Style?: SectionStyle | undefined;
  PageBreakConfiguration?: SectionPageBreakConfiguration | undefined;
  RepeatConfiguration?: BodySectionRepeatConfiguration | undefined;
}
export interface HeaderFooterSectionConfiguration {
  SectionId: string | undefined;
  Layout: SectionLayoutConfiguration | undefined;
  Style?: SectionStyle | undefined;
}
export interface SectionBasedLayoutConfiguration {
  HeaderSections: HeaderFooterSectionConfiguration[] | undefined;
  BodySections: BodySectionConfiguration[] | undefined;
  FooterSections: HeaderFooterSectionConfiguration[] | undefined;
  CanvasSizeOptions: SectionBasedLayoutCanvasSizeOptions | undefined;
}
export interface LayoutConfiguration {
  GridLayout?: GridLayoutConfiguration | undefined;
  FreeFormLayout?: FreeFormLayoutConfiguration | undefined;
  SectionBasedLayout?: SectionBasedLayoutConfiguration | undefined;
}
export interface Layout {
  Configuration: LayoutConfiguration | undefined;
}
export interface ParameterDateTimePickerControl {
  ParameterControlId: string | undefined;
  Title: string | undefined;
  SourceParameterName: string | undefined;
  DisplayOptions?: DateTimePickerControlDisplayOptions | undefined;
}
export interface ParameterSelectableValues {
  Values?: string[] | undefined;
  LinkToDataSetColumn?: ColumnIdentifier | undefined;
}
export interface ParameterDropDownControl {
  ParameterControlId: string | undefined;
  Title: string | undefined;
  SourceParameterName: string | undefined;
  DisplayOptions?: DropDownControlDisplayOptions | undefined;
  Type?: SheetControlListType | undefined;
  SelectableValues?: ParameterSelectableValues | undefined;
  CascadingControlConfiguration?: CascadingControlConfiguration | undefined;
  CommitMode?: CommitMode | undefined;
}
export interface ParameterListControl {
  ParameterControlId: string | undefined;
  Title: string | undefined;
  SourceParameterName: string | undefined;
  DisplayOptions?: ListControlDisplayOptions | undefined;
  Type?: SheetControlListType | undefined;
  SelectableValues?: ParameterSelectableValues | undefined;
  CascadingControlConfiguration?: CascadingControlConfiguration | undefined;
}
export interface ParameterSliderControl {
  ParameterControlId: string | undefined;
  Title: string | undefined;
  SourceParameterName: string | undefined;
  DisplayOptions?: SliderControlDisplayOptions | undefined;
  MaximumValue: number | undefined;
  MinimumValue: number | undefined;
  StepSize: number | undefined;
}
export interface ParameterTextAreaControl {
  ParameterControlId: string | undefined;
  Title: string | undefined;
  SourceParameterName: string | undefined;
  Delimiter?: string | undefined;
  DisplayOptions?: TextAreaControlDisplayOptions | undefined;
}
export interface ParameterTextFieldControl {
  ParameterControlId: string | undefined;
  Title: string | undefined;
  SourceParameterName: string | undefined;
  DisplayOptions?: TextFieldControlDisplayOptions | undefined;
}
export interface ParameterControl {
  DateTimePicker?: ParameterDateTimePickerControl | undefined;
  List?: ParameterListControl | undefined;
  Dropdown?: ParameterDropDownControl | undefined;
  TextField?: ParameterTextFieldControl | undefined;
  TextArea?: ParameterTextAreaControl | undefined;
  Slider?: ParameterSliderControl | undefined;
}
export interface SheetControlLayoutConfiguration {
  GridLayout?: GridLayoutConfiguration | undefined;
}
export interface SheetControlLayout {
  Configuration: SheetControlLayoutConfiguration | undefined;
}
export interface SheetTextBox {
  SheetTextBoxId: string | undefined;
  Content?: string | undefined;
}
export declare const SelectedFieldOptions: {
  readonly ALL_FIELDS: "ALL_FIELDS";
};
export type SelectedFieldOptions =
  (typeof SelectedFieldOptions)[keyof typeof SelectedFieldOptions];
export interface FilterOperationSelectedFieldsConfiguration {
  SelectedFields?: string[] | undefined;
  SelectedFieldOptions?: SelectedFieldOptions | undefined;
  SelectedColumns?: ColumnIdentifier[] | undefined;
}
export declare const TargetVisualOptions: {
  readonly ALL_VISUALS: "ALL_VISUALS";
};
export type TargetVisualOptions =
  (typeof TargetVisualOptions)[keyof typeof TargetVisualOptions];
export interface SameSheetTargetVisualConfiguration {
  TargetVisuals?: string[] | undefined;
  TargetVisualOptions?: TargetVisualOptions | undefined;
}
export interface FilterOperationTargetVisualsConfiguration {
  SameSheetTargetVisualConfiguration?:
    | SameSheetTargetVisualConfiguration
    | undefined;
}
export interface CustomActionFilterOperation {
  SelectedFieldsConfiguration:
    | FilterOperationSelectedFieldsConfiguration
    | undefined;
  TargetVisualsConfiguration:
    | FilterOperationTargetVisualsConfiguration
    | undefined;
}
export interface VisualCustomActionOperation {
  FilterOperation?: CustomActionFilterOperation | undefined;
  NavigationOperation?: CustomActionNavigationOperation | undefined;
  URLOperation?: CustomActionURLOperation | undefined;
  SetParametersOperation?: CustomActionSetParametersOperation | undefined;
}
export declare const VisualCustomActionTrigger: {
  readonly DATA_POINT_CLICK: "DATA_POINT_CLICK";
  readonly DATA_POINT_MENU: "DATA_POINT_MENU";
};
export type VisualCustomActionTrigger =
  (typeof VisualCustomActionTrigger)[keyof typeof VisualCustomActionTrigger];
export interface VisualCustomAction {
  CustomActionId: string | undefined;
  Name: string | undefined;
  Status?: WidgetStatus | undefined;
  Trigger: VisualCustomActionTrigger | undefined;
  ActionOperations: VisualCustomActionOperation[] | undefined;
}
export declare const BarsArrangement: {
  readonly CLUSTERED: "CLUSTERED";
  readonly STACKED: "STACKED";
  readonly STACKED_PERCENT: "STACKED_PERCENT";
};
export type BarsArrangement =
  (typeof BarsArrangement)[keyof typeof BarsArrangement];
export interface DateAxisOptions {
  MissingDateVisibility?: Visibility | undefined;
}
export interface AxisDisplayDataDrivenRange {}
export interface AxisDisplayMinMaxRange {
  Minimum?: number | undefined;
  Maximum?: number | undefined;
}
export interface AxisDisplayRange {
  MinMax?: AxisDisplayMinMaxRange | undefined;
  DataDriven?: AxisDisplayDataDrivenRange | undefined;
}
export interface AxisLinearScale {
  StepCount?: number | undefined;
  StepSize?: number | undefined;
}
export interface AxisLogarithmicScale {
  Base?: number | undefined;
}
export interface AxisScale {
  Linear?: AxisLinearScale | undefined;
  Logarithmic?: AxisLogarithmicScale | undefined;
}
export interface NumericAxisOptions {
  Scale?: AxisScale | undefined;
  Range?: AxisDisplayRange | undefined;
}
export interface AxisDataOptions {
  NumericAxisOptions?: NumericAxisOptions | undefined;
  DateAxisOptions?: DateAxisOptions | undefined;
}
export interface PercentVisibleRange {
  From?: number | undefined;
  To?: number | undefined;
}
export interface VisibleRangeOptions {
  PercentRange?: PercentVisibleRange | undefined;
}
export interface ScrollBarOptions {
  Visibility?: Visibility | undefined;
  VisibleRange?: VisibleRangeOptions | undefined;
}
export interface AxisTickLabelOptions {
  LabelOptions?: LabelOptions | undefined;
  RotationAngle?: number | undefined;
}
export interface AxisDisplayOptions {
  TickLabelOptions?: AxisTickLabelOptions | undefined;
  AxisLineVisibility?: Visibility | undefined;
  GridLineVisibility?: Visibility | undefined;
  DataOptions?: AxisDataOptions | undefined;
  ScrollbarOptions?: ScrollBarOptions | undefined;
  AxisOffset?: string | undefined;
}
export interface AxisLabelReferenceOptions {
  FieldId: string | undefined;
  Column: ColumnIdentifier | undefined;
}
export interface AxisLabelOptions {
  FontConfiguration?: FontConfiguration | undefined;
  CustomLabel?: string | undefined;
  ApplyTo?: AxisLabelReferenceOptions | undefined;
}
export interface ChartAxisLabelOptions {
  Visibility?: Visibility | undefined;
  SortIconVisibility?: Visibility | undefined;
  AxisLabelOptions?: AxisLabelOptions[] | undefined;
}
export interface ContributionAnalysisDefault {
  MeasureFieldId: string | undefined;
  ContributorDimensions: ColumnIdentifier[] | undefined;
}
export interface DataPathLabelType {
  FieldId?: string | undefined;
  FieldValue?: string | undefined;
  Visibility?: Visibility | undefined;
}
export interface FieldLabelType {
  FieldId?: string | undefined;
  Visibility?: Visibility | undefined;
}
export interface MaximumLabelType {
  Visibility?: Visibility | undefined;
}
export interface MinimumLabelType {
  Visibility?: Visibility | undefined;
}
export interface RangeEndsLabelType {
  Visibility?: Visibility | undefined;
}
export interface DataLabelType {
  FieldLabelType?: FieldLabelType | undefined;
  DataPathLabelType?: DataPathLabelType | undefined;
  RangeEndsLabelType?: RangeEndsLabelType | undefined;
  MinimumLabelType?: MinimumLabelType | undefined;
  MaximumLabelType?: MaximumLabelType | undefined;
}
export declare const DataLabelContent: {
  readonly PERCENT: "PERCENT";
  readonly VALUE: "VALUE";
  readonly VALUE_AND_PERCENT: "VALUE_AND_PERCENT";
};
export type DataLabelContent =
  (typeof DataLabelContent)[keyof typeof DataLabelContent];
export declare const DataLabelOverlap: {
  readonly DISABLE_OVERLAP: "DISABLE_OVERLAP";
  readonly ENABLE_OVERLAP: "ENABLE_OVERLAP";
};
export type DataLabelOverlap =
  (typeof DataLabelOverlap)[keyof typeof DataLabelOverlap];
export declare const DataLabelPosition: {
  readonly BOTTOM: "BOTTOM";
  readonly INSIDE: "INSIDE";
  readonly LEFT: "LEFT";
  readonly OUTSIDE: "OUTSIDE";
  readonly RIGHT: "RIGHT";
  readonly TOP: "TOP";
};
export type DataLabelPosition =
  (typeof DataLabelPosition)[keyof typeof DataLabelPosition];
export interface DataLabelOptions {
  Visibility?: Visibility | undefined;
  CategoryLabelVisibility?: Visibility | undefined;
  MeasureLabelVisibility?: Visibility | undefined;
  DataLabelTypes?: DataLabelType[] | undefined;
  Position?: DataLabelPosition | undefined;
  LabelContent?: DataLabelContent | undefined;
  LabelFontConfiguration?: FontConfiguration | undefined;
  LabelColor?: string | undefined;
  Overlap?: DataLabelOverlap | undefined;
  TotalsVisibility?: Visibility | undefined;
}
export interface CategoricalDimensionField {
  FieldId: string | undefined;
  Column: ColumnIdentifier | undefined;
  HierarchyId?: string | undefined;
  FormatConfiguration?: StringFormatConfiguration | undefined;
}
export interface DateDimensionField {
  FieldId: string | undefined;
  Column: ColumnIdentifier | undefined;
  DateGranularity?: TimeGranularity | undefined;
  HierarchyId?: string | undefined;
  FormatConfiguration?: DateTimeFormatConfiguration | undefined;
}
export interface NumericalDimensionField {
  FieldId: string | undefined;
  Column: ColumnIdentifier | undefined;
  HierarchyId?: string | undefined;
  FormatConfiguration?: NumberFormatConfiguration | undefined;
}
export interface DimensionField {
  NumericalDimensionField?: NumericalDimensionField | undefined;
  CategoricalDimensionField?: CategoricalDimensionField | undefined;
  DateDimensionField?: DateDimensionField | undefined;
}
export interface CalculatedMeasureField {
  FieldId: string | undefined;
  Expression: string | undefined;
}
export interface CategoricalMeasureField {
  FieldId: string | undefined;
  Column: ColumnIdentifier | undefined;
  AggregationFunction?: CategoricalAggregationFunction | undefined;
  FormatConfiguration?: StringFormatConfiguration | undefined;
}
export interface DateMeasureField {
  FieldId: string | undefined;
  Column: ColumnIdentifier | undefined;
  AggregationFunction?: DateAggregationFunction | undefined;
  FormatConfiguration?: DateTimeFormatConfiguration | undefined;
}
export interface NumericalMeasureField {
  FieldId: string | undefined;
  Column: ColumnIdentifier | undefined;
  AggregationFunction?: NumericalAggregationFunction | undefined;
  FormatConfiguration?: NumberFormatConfiguration | undefined;
}
export interface MeasureField {
  NumericalMeasureField?: NumericalMeasureField | undefined;
  CategoricalMeasureField?: CategoricalMeasureField | undefined;
  DateMeasureField?: DateMeasureField | undefined;
  CalculatedMeasureField?: CalculatedMeasureField | undefined;
}
export interface BarChartAggregatedFieldWells {
  Category?: DimensionField[] | undefined;
  Values?: MeasureField[] | undefined;
  Colors?: DimensionField[] | undefined;
  SmallMultiples?: DimensionField[] | undefined;
}
export interface BarChartFieldWells {
  BarChartAggregatedFieldWells?: BarChartAggregatedFieldWells | undefined;
}
export interface ContextMenuOption {
  AvailabilityStatus?: DashboardBehavior | undefined;
}
export interface VisualMenuOption {
  AvailabilityStatus?: DashboardBehavior | undefined;
}
export interface VisualInteractionOptions {
  VisualMenuOption?: VisualMenuOption | undefined;
  ContextMenuOption?: ContextMenuOption | undefined;
}
export declare const LegendPosition: {
  readonly AUTO: "AUTO";
  readonly BOTTOM: "BOTTOM";
  readonly RIGHT: "RIGHT";
  readonly TOP: "TOP";
};
export type LegendPosition =
  (typeof LegendPosition)[keyof typeof LegendPosition];
export interface LegendOptions {
  Visibility?: Visibility | undefined;
  Title?: LabelOptions | undefined;
  Position?: LegendPosition | undefined;
  Width?: string | undefined;
  Height?: string | undefined;
  ValueFontConfiguration?: FontConfiguration | undefined;
}
export declare const CustomParameterValuesFilterSensitiveLog: (
  obj: CustomParameterValues
) => any;
export declare const CustomValuesConfigurationFilterSensitiveLog: (
  obj: CustomValuesConfiguration
) => any;
export declare const DestinationParameterValueConfigurationFilterSensitiveLog: (
  obj: DestinationParameterValueConfiguration
) => any;
export declare const SetParameterValueConfigurationFilterSensitiveLog: (
  obj: SetParameterValueConfiguration
) => any;
export declare const CustomActionSetParametersOperationFilterSensitiveLog: (
  obj: CustomActionSetParametersOperation
) => any;
export declare const ImageCustomActionOperationFilterSensitiveLog: (
  obj: ImageCustomActionOperation
) => any;
export declare const ImageCustomActionFilterSensitiveLog: (
  obj: ImageCustomAction
) => any;
export declare const SheetImageFilterSensitiveLog: (obj: SheetImage) => any;
export declare const SheetFilterSensitiveLog: (obj: Sheet) => any;
export declare const AnalysisFilterSensitiveLog: (obj: Analysis) => any;
export declare const CalculatedFieldFilterSensitiveLog: (
  obj: CalculatedField
) => any;
export declare const CustomColorFilterSensitiveLog: (obj: CustomColor) => any;
export declare const ColorsConfigurationFilterSensitiveLog: (
  obj: ColorsConfiguration
) => any;
export declare const NullValueFormatConfigurationFilterSensitiveLog: (
  obj: NullValueFormatConfiguration
) => any;
export declare const CurrencyDisplayFormatConfigurationFilterSensitiveLog: (
  obj: CurrencyDisplayFormatConfiguration
) => any;
export declare const NumberDisplayFormatConfigurationFilterSensitiveLog: (
  obj: NumberDisplayFormatConfiguration
) => any;
export declare const PercentageDisplayFormatConfigurationFilterSensitiveLog: (
  obj: PercentageDisplayFormatConfiguration
) => any;
export declare const NumericFormatConfigurationFilterSensitiveLog: (
  obj: NumericFormatConfiguration
) => any;
export declare const DateTimeFormatConfigurationFilterSensitiveLog: (
  obj: DateTimeFormatConfiguration
) => any;
export declare const NumberFormatConfigurationFilterSensitiveLog: (
  obj: NumberFormatConfiguration
) => any;
export declare const StringFormatConfigurationFilterSensitiveLog: (
  obj: StringFormatConfiguration
) => any;
export declare const FormatConfigurationFilterSensitiveLog: (
  obj: FormatConfiguration
) => any;
export declare const ColumnConfigurationFilterSensitiveLog: (
  obj: ColumnConfiguration
) => any;
export declare const RollingDateConfigurationFilterSensitiveLog: (
  obj: RollingDateConfiguration
) => any;
export declare const TimeEqualityFilterFilterSensitiveLog: (
  obj: TimeEqualityFilter
) => any;
export declare const TimeRangeFilterValueFilterSensitiveLog: (
  obj: TimeRangeFilterValue
) => any;
export declare const TimeRangeFilterFilterSensitiveLog: (
  obj: TimeRangeFilter
) => any;
export declare const FilterFilterSensitiveLog: (obj: Filter) => any;
export declare const FilterGroupFilterSensitiveLog: (obj: FilterGroup) => any;
export declare const DateTimeDefaultValuesFilterSensitiveLog: (
  obj: DateTimeDefaultValues
) => any;
export declare const DateTimeValueWhenUnsetConfigurationFilterSensitiveLog: (
  obj: DateTimeValueWhenUnsetConfiguration
) => any;
export declare const DateTimeParameterDeclarationFilterSensitiveLog: (
  obj: DateTimeParameterDeclaration
) => any;
export declare const DecimalDefaultValuesFilterSensitiveLog: (
  obj: DecimalDefaultValues
) => any;
export declare const DecimalValueWhenUnsetConfigurationFilterSensitiveLog: (
  obj: DecimalValueWhenUnsetConfiguration
) => any;
export declare const DecimalParameterDeclarationFilterSensitiveLog: (
  obj: DecimalParameterDeclaration
) => any;
export declare const IntegerDefaultValuesFilterSensitiveLog: (
  obj: IntegerDefaultValues
) => any;
export declare const IntegerValueWhenUnsetConfigurationFilterSensitiveLog: (
  obj: IntegerValueWhenUnsetConfiguration
) => any;
export declare const IntegerParameterDeclarationFilterSensitiveLog: (
  obj: IntegerParameterDeclaration
) => any;
export declare const StringDefaultValuesFilterSensitiveLog: (
  obj: StringDefaultValues
) => any;
export declare const StringValueWhenUnsetConfigurationFilterSensitiveLog: (
  obj: StringValueWhenUnsetConfiguration
) => any;
export declare const StringParameterDeclarationFilterSensitiveLog: (
  obj: StringParameterDeclaration
) => any;
export declare const ParameterDeclarationFilterSensitiveLog: (
  obj: ParameterDeclaration
) => any;
export declare const SheetElementRenderingRuleFilterSensitiveLog: (
  obj: SheetElementRenderingRule
) => any;
export declare const FreeFormLayoutElementFilterSensitiveLog: (
  obj: FreeFormLayoutElement
) => any;
export declare const FreeFormLayoutConfigurationFilterSensitiveLog: (
  obj: FreeFormLayoutConfiguration
) => any;
export declare const FreeFormSectionLayoutConfigurationFilterSensitiveLog: (
  obj: FreeFormSectionLayoutConfiguration
) => any;
export declare const SectionLayoutConfigurationFilterSensitiveLog: (
  obj: SectionLayoutConfiguration
) => any;
export declare const BodySectionContentFilterSensitiveLog: (
  obj: BodySectionContent
) => any;
export declare const BodySectionConfigurationFilterSensitiveLog: (
  obj: BodySectionConfiguration
) => any;
export declare const HeaderFooterSectionConfigurationFilterSensitiveLog: (
  obj: HeaderFooterSectionConfiguration
) => any;
export declare const SectionBasedLayoutConfigurationFilterSensitiveLog: (
  obj: SectionBasedLayoutConfiguration
) => any;
export declare const LayoutConfigurationFilterSensitiveLog: (
  obj: LayoutConfiguration
) => any;
export declare const LayoutFilterSensitiveLog: (obj: Layout) => any;
export declare const VisualCustomActionOperationFilterSensitiveLog: (
  obj: VisualCustomActionOperation
) => any;
export declare const VisualCustomActionFilterSensitiveLog: (
  obj: VisualCustomAction
) => any;
export declare const DataPathLabelTypeFilterSensitiveLog: (
  obj: DataPathLabelType
) => any;
export declare const DataLabelTypeFilterSensitiveLog: (
  obj: DataLabelType
) => any;
export declare const DataLabelOptionsFilterSensitiveLog: (
  obj: DataLabelOptions
) => any;
export declare const CategoricalDimensionFieldFilterSensitiveLog: (
  obj: CategoricalDimensionField
) => any;
export declare const DateDimensionFieldFilterSensitiveLog: (
  obj: DateDimensionField
) => any;
export declare const NumericalDimensionFieldFilterSensitiveLog: (
  obj: NumericalDimensionField
) => any;
export declare const DimensionFieldFilterSensitiveLog: (
  obj: DimensionField
) => any;
export declare const CalculatedMeasureFieldFilterSensitiveLog: (
  obj: CalculatedMeasureField
) => any;
export declare const CategoricalMeasureFieldFilterSensitiveLog: (
  obj: CategoricalMeasureField
) => any;
export declare const DateMeasureFieldFilterSensitiveLog: (
  obj: DateMeasureField
) => any;
export declare const NumericalMeasureFieldFilterSensitiveLog: (
  obj: NumericalMeasureField
) => any;
export declare const MeasureFieldFilterSensitiveLog: (obj: MeasureField) => any;
export declare const BarChartAggregatedFieldWellsFilterSensitiveLog: (
  obj: BarChartAggregatedFieldWells
) => any;
export declare const BarChartFieldWellsFilterSensitiveLog: (
  obj: BarChartFieldWells
) => any;
