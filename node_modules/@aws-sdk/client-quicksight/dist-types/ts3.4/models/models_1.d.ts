import {
  AggregationFunction,
  AxisDisplayOptions,
  BarChartFieldWells,
  BarsArrangement,
  ChartAxisLabelOptions,
  ColumnIdentifier,
  ColumnSort,
  ContributionAnalysisDefault,
  CustomActionFilterOperation,
  CustomActionNavigationOperation,
  CustomActionSetParametersOperation,
  CustomActionURLOperation,
  DataLabelOptions,
  DataLabelPosition,
  DimensionField,
  FontConfiguration,
  FormatConfiguration,
  LegendOptions,
  MeasureField,
  NumberDisplayFormatConfiguration,
  NumericalAggregationFunction,
  NumericFormatConfiguration,
  PercentageDisplayFormatConfiguration,
  SortDirection,
  TimeGranularity,
  Visibility,
  VisualCustomAction,
  VisualInteractionOptions,
  WidgetStatus,
} from "./models_0";
export declare const BarChartOrientation: {
  readonly HORIZONTAL: "HORIZONTAL";
  readonly VERTICAL: "VERTICAL";
};
export type BarChartOrientation =
  (typeof BarChartOrientation)[keyof typeof BarChartOrientation];
export declare const AxisBinding: {
  readonly PRIMARY_YAXIS: "PRIMARY_YAXIS";
  readonly SECONDARY_YAXIS: "SECONDARY_YAXIS";
};
export type AxisBinding = (typeof AxisBinding)[keyof typeof AxisBinding];
export interface ReferenceLineDynamicDataConfiguration {
  Column: ColumnIdentifier | undefined;
  MeasureAggregationFunction?: AggregationFunction | undefined;
  Calculation: NumericalAggregationFunction | undefined;
}
export declare const ReferenceLineSeriesType: {
  readonly BAR: "BAR";
  readonly LINE: "LINE";
};
export type ReferenceLineSeriesType =
  (typeof ReferenceLineSeriesType)[keyof typeof ReferenceLineSeriesType];
export interface ReferenceLineStaticDataConfiguration {
  Value: number | undefined;
}
export interface ReferenceLineDataConfiguration {
  StaticConfiguration?: ReferenceLineStaticDataConfiguration | undefined;
  DynamicConfiguration?: ReferenceLineDynamicDataConfiguration | undefined;
  AxisBinding?: AxisBinding | undefined;
  SeriesType?: ReferenceLineSeriesType | undefined;
}
export interface ReferenceLineCustomLabelConfiguration {
  CustomLabel: string | undefined;
}
export declare const ReferenceLineLabelHorizontalPosition: {
  readonly CENTER: "CENTER";
  readonly LEFT: "LEFT";
  readonly RIGHT: "RIGHT";
};
export type ReferenceLineLabelHorizontalPosition =
  (typeof ReferenceLineLabelHorizontalPosition)[keyof typeof ReferenceLineLabelHorizontalPosition];
export declare const ReferenceLineValueLabelRelativePosition: {
  readonly AFTER_CUSTOM_LABEL: "AFTER_CUSTOM_LABEL";
  readonly BEFORE_CUSTOM_LABEL: "BEFORE_CUSTOM_LABEL";
};
export type ReferenceLineValueLabelRelativePosition =
  (typeof ReferenceLineValueLabelRelativePosition)[keyof typeof ReferenceLineValueLabelRelativePosition];
export interface ReferenceLineValueLabelConfiguration {
  RelativePosition?: ReferenceLineValueLabelRelativePosition | undefined;
  FormatConfiguration?: NumericFormatConfiguration | undefined;
}
export declare const ReferenceLineLabelVerticalPosition: {
  readonly ABOVE: "ABOVE";
  readonly BELOW: "BELOW";
};
export type ReferenceLineLabelVerticalPosition =
  (typeof ReferenceLineLabelVerticalPosition)[keyof typeof ReferenceLineLabelVerticalPosition];
export interface ReferenceLineLabelConfiguration {
  ValueLabelConfiguration?: ReferenceLineValueLabelConfiguration | undefined;
  CustomLabelConfiguration?: ReferenceLineCustomLabelConfiguration | undefined;
  FontConfiguration?: FontConfiguration | undefined;
  FontColor?: string | undefined;
  HorizontalPosition?: ReferenceLineLabelHorizontalPosition | undefined;
  VerticalPosition?: ReferenceLineLabelVerticalPosition | undefined;
}
export declare const ReferenceLinePatternType: {
  readonly DASHED: "DASHED";
  readonly DOTTED: "DOTTED";
  readonly SOLID: "SOLID";
};
export type ReferenceLinePatternType =
  (typeof ReferenceLinePatternType)[keyof typeof ReferenceLinePatternType];
export interface ReferenceLineStyleConfiguration {
  Pattern?: ReferenceLinePatternType | undefined;
  Color?: string | undefined;
}
export interface ReferenceLine {
  Status?: WidgetStatus | undefined;
  DataConfiguration: ReferenceLineDataConfiguration | undefined;
  StyleConfiguration?: ReferenceLineStyleConfiguration | undefined;
  LabelConfiguration?: ReferenceLineLabelConfiguration | undefined;
}
export declare const PanelBorderStyle: {
  readonly DASHED: "DASHED";
  readonly DOTTED: "DOTTED";
  readonly SOLID: "SOLID";
};
export type PanelBorderStyle =
  (typeof PanelBorderStyle)[keyof typeof PanelBorderStyle];
export declare const HorizontalTextAlignment: {
  readonly AUTO: "AUTO";
  readonly CENTER: "CENTER";
  readonly LEFT: "LEFT";
  readonly RIGHT: "RIGHT";
};
export type HorizontalTextAlignment =
  (typeof HorizontalTextAlignment)[keyof typeof HorizontalTextAlignment];
export interface PanelTitleOptions {
  Visibility?: Visibility | undefined;
  FontConfiguration?: FontConfiguration | undefined;
  HorizontalTextAlignment?: HorizontalTextAlignment | undefined;
}
export interface PanelConfiguration {
  Title?: PanelTitleOptions | undefined;
  BorderVisibility?: Visibility | undefined;
  BorderThickness?: string | undefined;
  BorderStyle?: PanelBorderStyle | undefined;
  BorderColor?: string | undefined;
  GutterVisibility?: Visibility | undefined;
  GutterSpacing?: string | undefined;
  BackgroundVisibility?: Visibility | undefined;
  BackgroundColor?: string | undefined;
}
export declare const SmallMultiplesAxisPlacement: {
  readonly INSIDE: "INSIDE";
  readonly OUTSIDE: "OUTSIDE";
};
export type SmallMultiplesAxisPlacement =
  (typeof SmallMultiplesAxisPlacement)[keyof typeof SmallMultiplesAxisPlacement];
export declare const SmallMultiplesAxisScale: {
  readonly INDEPENDENT: "INDEPENDENT";
  readonly SHARED: "SHARED";
};
export type SmallMultiplesAxisScale =
  (typeof SmallMultiplesAxisScale)[keyof typeof SmallMultiplesAxisScale];
export interface SmallMultiplesAxisProperties {
  Scale?: SmallMultiplesAxisScale | undefined;
  Placement?: SmallMultiplesAxisPlacement | undefined;
}
export interface SmallMultiplesOptions {
  MaxVisibleRows?: number | undefined;
  MaxVisibleColumns?: number | undefined;
  PanelConfiguration?: PanelConfiguration | undefined;
  XAxis?: SmallMultiplesAxisProperties | undefined;
  YAxis?: SmallMultiplesAxisProperties | undefined;
}
export declare const OtherCategories: {
  readonly EXCLUDE: "EXCLUDE";
  readonly INCLUDE: "INCLUDE";
};
export type OtherCategories =
  (typeof OtherCategories)[keyof typeof OtherCategories];
export interface ItemsLimitConfiguration {
  ItemsLimit?: number | undefined;
  OtherCategories?: OtherCategories | undefined;
}
export interface FieldSort {
  FieldId: string | undefined;
  Direction: SortDirection | undefined;
}
export interface FieldSortOptions {
  FieldSort?: FieldSort | undefined;
  ColumnSort?: ColumnSort | undefined;
}
export interface BarChartSortConfiguration {
  CategorySort?: FieldSortOptions[] | undefined;
  CategoryItemsLimit?: ItemsLimitConfiguration | undefined;
  ColorSort?: FieldSortOptions[] | undefined;
  ColorItemsLimit?: ItemsLimitConfiguration | undefined;
  SmallMultiplesSort?: FieldSortOptions[] | undefined;
  SmallMultiplesLimitConfiguration?: ItemsLimitConfiguration | undefined;
}
export declare const TooltipTarget: {
  readonly BAR: "BAR";
  readonly BOTH: "BOTH";
  readonly LINE: "LINE";
};
export type TooltipTarget = (typeof TooltipTarget)[keyof typeof TooltipTarget];
export interface ColumnTooltipItem {
  Column: ColumnIdentifier | undefined;
  Label?: string | undefined;
  Visibility?: Visibility | undefined;
  Aggregation?: AggregationFunction | undefined;
  TooltipTarget?: TooltipTarget | undefined;
}
export interface FieldTooltipItem {
  FieldId: string | undefined;
  Label?: string | undefined;
  Visibility?: Visibility | undefined;
  TooltipTarget?: TooltipTarget | undefined;
}
export interface TooltipItem {
  FieldTooltipItem?: FieldTooltipItem | undefined;
  ColumnTooltipItem?: ColumnTooltipItem | undefined;
}
export declare const TooltipTitleType: {
  readonly NONE: "NONE";
  readonly PRIMARY_VALUE: "PRIMARY_VALUE";
};
export type TooltipTitleType =
  (typeof TooltipTitleType)[keyof typeof TooltipTitleType];
export interface FieldBasedTooltip {
  AggregationVisibility?: Visibility | undefined;
  TooltipTitleType?: TooltipTitleType | undefined;
  TooltipFields?: TooltipItem[] | undefined;
}
export declare const SelectedTooltipType: {
  readonly BASIC: "BASIC";
  readonly DETAILED: "DETAILED";
};
export type SelectedTooltipType =
  (typeof SelectedTooltipType)[keyof typeof SelectedTooltipType];
export interface TooltipOptions {
  TooltipVisibility?: Visibility | undefined;
  SelectedTooltipType?: SelectedTooltipType | undefined;
  FieldBasedTooltip?: FieldBasedTooltip | undefined;
}
export declare const PivotTableDataPathType: {
  readonly COUNT_METRIC_COLUMN: "COUNT_METRIC_COLUMN";
  readonly EMPTY_COLUMN_HEADER: "EMPTY_COLUMN_HEADER";
  readonly HIERARCHY_ROWS_LAYOUT_COLUMN: "HIERARCHY_ROWS_LAYOUT_COLUMN";
  readonly MULTIPLE_ROW_METRICS_COLUMN: "MULTIPLE_ROW_METRICS_COLUMN";
};
export type PivotTableDataPathType =
  (typeof PivotTableDataPathType)[keyof typeof PivotTableDataPathType];
export interface DataPathType {
  PivotTableDataPathType?: PivotTableDataPathType | undefined;
}
export interface DataPathValue {
  FieldId?: string | undefined;
  FieldValue?: string | undefined;
  DataPathType?: DataPathType | undefined;
}
export interface DataPathColor {
  Element: DataPathValue | undefined;
  Color: string | undefined;
  TimeGranularity?: TimeGranularity | undefined;
}
export interface VisualPalette {
  ChartColor?: string | undefined;
  ColorMap?: DataPathColor[] | undefined;
}
export interface BarChartConfiguration {
  FieldWells?: BarChartFieldWells | undefined;
  SortConfiguration?: BarChartSortConfiguration | undefined;
  Orientation?: BarChartOrientation | undefined;
  BarsArrangement?: BarsArrangement | undefined;
  VisualPalette?: VisualPalette | undefined;
  SmallMultiplesOptions?: SmallMultiplesOptions | undefined;
  CategoryAxis?: AxisDisplayOptions | undefined;
  CategoryLabelOptions?: ChartAxisLabelOptions | undefined;
  ValueAxis?: AxisDisplayOptions | undefined;
  ValueLabelOptions?: ChartAxisLabelOptions | undefined;
  ColorLabelOptions?: ChartAxisLabelOptions | undefined;
  Legend?: LegendOptions | undefined;
  DataLabels?: DataLabelOptions | undefined;
  Tooltip?: TooltipOptions | undefined;
  ReferenceLines?: ReferenceLine[] | undefined;
  ContributionAnalysisDefaults?: ContributionAnalysisDefault[] | undefined;
  Interactions?: VisualInteractionOptions | undefined;
}
export interface CategoryDrillDownFilter {
  Column: ColumnIdentifier | undefined;
  CategoryValues: string[] | undefined;
}
export interface NumericEqualityDrillDownFilter {
  Column: ColumnIdentifier | undefined;
  Value: number | undefined;
}
export interface TimeRangeDrillDownFilter {
  Column: ColumnIdentifier | undefined;
  RangeMinimum: Date | undefined;
  RangeMaximum: Date | undefined;
  TimeGranularity: TimeGranularity | undefined;
}
export interface DrillDownFilter {
  NumericEqualityFilter?: NumericEqualityDrillDownFilter | undefined;
  CategoryFilter?: CategoryDrillDownFilter | undefined;
  TimeRangeFilter?: TimeRangeDrillDownFilter | undefined;
}
export interface DateTimeHierarchy {
  HierarchyId: string | undefined;
  DrillDownFilters?: DrillDownFilter[] | undefined;
}
export interface ExplicitHierarchy {
  HierarchyId: string | undefined;
  Columns: ColumnIdentifier[] | undefined;
  DrillDownFilters?: DrillDownFilter[] | undefined;
}
export interface PredefinedHierarchy {
  HierarchyId: string | undefined;
  Columns: ColumnIdentifier[] | undefined;
  DrillDownFilters?: DrillDownFilter[] | undefined;
}
export interface ColumnHierarchy {
  ExplicitHierarchy?: ExplicitHierarchy | undefined;
  DateTimeHierarchy?: DateTimeHierarchy | undefined;
  PredefinedHierarchy?: PredefinedHierarchy | undefined;
}
export interface LongFormatText {
  PlainText?: string | undefined;
  RichText?: string | undefined;
}
export interface VisualSubtitleLabelOptions {
  Visibility?: Visibility | undefined;
  FormatText?: LongFormatText | undefined;
}
export interface ShortFormatText {
  PlainText?: string | undefined;
  RichText?: string | undefined;
}
export interface VisualTitleLabelOptions {
  Visibility?: Visibility | undefined;
  FormatText?: ShortFormatText | undefined;
}
export interface BarChartVisual {
  VisualId: string | undefined;
  Title?: VisualTitleLabelOptions | undefined;
  Subtitle?: VisualSubtitleLabelOptions | undefined;
  ChartConfiguration?: BarChartConfiguration | undefined;
  Actions?: VisualCustomAction[] | undefined;
  ColumnHierarchies?: ColumnHierarchy[] | undefined;
  VisualContentAltText?: string | undefined;
}
export declare const BoxPlotFillStyle: {
  readonly SOLID: "SOLID";
  readonly TRANSPARENT: "TRANSPARENT";
};
export type BoxPlotFillStyle =
  (typeof BoxPlotFillStyle)[keyof typeof BoxPlotFillStyle];
export interface BoxPlotStyleOptions {
  FillStyle?: BoxPlotFillStyle | undefined;
}
export interface BoxPlotOptions {
  StyleOptions?: BoxPlotStyleOptions | undefined;
  OutlierVisibility?: Visibility | undefined;
  AllDataPointsVisibility?: Visibility | undefined;
}
export interface BoxPlotAggregatedFieldWells {
  GroupBy?: DimensionField[] | undefined;
  Values?: MeasureField[] | undefined;
}
export interface BoxPlotFieldWells {
  BoxPlotAggregatedFieldWells?: BoxPlotAggregatedFieldWells | undefined;
}
export interface PaginationConfiguration {
  PageSize: number | undefined;
  PageNumber: number | undefined;
}
export interface BoxPlotSortConfiguration {
  CategorySort?: FieldSortOptions[] | undefined;
  PaginationConfiguration?: PaginationConfiguration | undefined;
}
export interface BoxPlotChartConfiguration {
  FieldWells?: BoxPlotFieldWells | undefined;
  SortConfiguration?: BoxPlotSortConfiguration | undefined;
  BoxPlotOptions?: BoxPlotOptions | undefined;
  CategoryAxis?: AxisDisplayOptions | undefined;
  CategoryLabelOptions?: ChartAxisLabelOptions | undefined;
  PrimaryYAxisDisplayOptions?: AxisDisplayOptions | undefined;
  PrimaryYAxisLabelOptions?: ChartAxisLabelOptions | undefined;
  Legend?: LegendOptions | undefined;
  Tooltip?: TooltipOptions | undefined;
  ReferenceLines?: ReferenceLine[] | undefined;
  VisualPalette?: VisualPalette | undefined;
  Interactions?: VisualInteractionOptions | undefined;
}
export interface BoxPlotVisual {
  VisualId: string | undefined;
  Title?: VisualTitleLabelOptions | undefined;
  Subtitle?: VisualSubtitleLabelOptions | undefined;
  ChartConfiguration?: BoxPlotChartConfiguration | undefined;
  Actions?: VisualCustomAction[] | undefined;
  ColumnHierarchies?: ColumnHierarchy[] | undefined;
  VisualContentAltText?: string | undefined;
}
export interface ComboChartAggregatedFieldWells {
  Category?: DimensionField[] | undefined;
  BarValues?: MeasureField[] | undefined;
  Colors?: DimensionField[] | undefined;
  LineValues?: MeasureField[] | undefined;
}
export interface ComboChartFieldWells {
  ComboChartAggregatedFieldWells?: ComboChartAggregatedFieldWells | undefined;
}
export declare const SingleYAxisOption: {
  readonly PRIMARY_Y_AXIS: "PRIMARY_Y_AXIS";
};
export type SingleYAxisOption =
  (typeof SingleYAxisOption)[keyof typeof SingleYAxisOption];
export interface YAxisOptions {
  YAxis: SingleYAxisOption | undefined;
}
export interface SingleAxisOptions {
  YAxisOptions?: YAxisOptions | undefined;
}
export interface ComboChartSortConfiguration {
  CategorySort?: FieldSortOptions[] | undefined;
  CategoryItemsLimit?: ItemsLimitConfiguration | undefined;
  ColorSort?: FieldSortOptions[] | undefined;
  ColorItemsLimit?: ItemsLimitConfiguration | undefined;
}
export interface ComboChartConfiguration {
  FieldWells?: ComboChartFieldWells | undefined;
  SortConfiguration?: ComboChartSortConfiguration | undefined;
  BarsArrangement?: BarsArrangement | undefined;
  CategoryAxis?: AxisDisplayOptions | undefined;
  CategoryLabelOptions?: ChartAxisLabelOptions | undefined;
  PrimaryYAxisDisplayOptions?: AxisDisplayOptions | undefined;
  PrimaryYAxisLabelOptions?: ChartAxisLabelOptions | undefined;
  SecondaryYAxisDisplayOptions?: AxisDisplayOptions | undefined;
  SecondaryYAxisLabelOptions?: ChartAxisLabelOptions | undefined;
  SingleAxisOptions?: SingleAxisOptions | undefined;
  ColorLabelOptions?: ChartAxisLabelOptions | undefined;
  Legend?: LegendOptions | undefined;
  BarDataLabels?: DataLabelOptions | undefined;
  LineDataLabels?: DataLabelOptions | undefined;
  Tooltip?: TooltipOptions | undefined;
  ReferenceLines?: ReferenceLine[] | undefined;
  VisualPalette?: VisualPalette | undefined;
  Interactions?: VisualInteractionOptions | undefined;
}
export interface ComboChartVisual {
  VisualId: string | undefined;
  Title?: VisualTitleLabelOptions | undefined;
  Subtitle?: VisualSubtitleLabelOptions | undefined;
  ChartConfiguration?: ComboChartConfiguration | undefined;
  Actions?: VisualCustomAction[] | undefined;
  ColumnHierarchies?: ColumnHierarchy[] | undefined;
  VisualContentAltText?: string | undefined;
}
export declare const CustomContentType: {
  readonly IMAGE: "IMAGE";
  readonly OTHER_EMBEDDED_CONTENT: "OTHER_EMBEDDED_CONTENT";
};
export type CustomContentType =
  (typeof CustomContentType)[keyof typeof CustomContentType];
export declare const CustomContentImageScalingConfiguration: {
  readonly DO_NOT_SCALE: "DO_NOT_SCALE";
  readonly FIT_TO_HEIGHT: "FIT_TO_HEIGHT";
  readonly FIT_TO_WIDTH: "FIT_TO_WIDTH";
  readonly SCALE_TO_VISUAL: "SCALE_TO_VISUAL";
};
export type CustomContentImageScalingConfiguration =
  (typeof CustomContentImageScalingConfiguration)[keyof typeof CustomContentImageScalingConfiguration];
export interface CustomContentConfiguration {
  ContentUrl?: string | undefined;
  ContentType?: CustomContentType | undefined;
  ImageScaling?: CustomContentImageScalingConfiguration | undefined;
  Interactions?: VisualInteractionOptions | undefined;
}
export interface CustomContentVisual {
  VisualId: string | undefined;
  Title?: VisualTitleLabelOptions | undefined;
  Subtitle?: VisualSubtitleLabelOptions | undefined;
  ChartConfiguration?: CustomContentConfiguration | undefined;
  Actions?: VisualCustomAction[] | undefined;
  DataSetIdentifier: string | undefined;
  VisualContentAltText?: string | undefined;
}
export interface EmptyVisual {
  VisualId: string | undefined;
  DataSetIdentifier: string | undefined;
  Actions?: VisualCustomAction[] | undefined;
}
export interface FilledMapAggregatedFieldWells {
  Geospatial?: DimensionField[] | undefined;
  Values?: MeasureField[] | undefined;
}
export interface FilledMapFieldWells {
  FilledMapAggregatedFieldWells?: FilledMapAggregatedFieldWells | undefined;
}
export declare const BaseMapStyleType: {
  readonly DARK_GRAY: "DARK_GRAY";
  readonly IMAGERY: "IMAGERY";
  readonly LIGHT_GRAY: "LIGHT_GRAY";
  readonly STREET: "STREET";
};
export type BaseMapStyleType =
  (typeof BaseMapStyleType)[keyof typeof BaseMapStyleType];
export interface GeospatialMapStyleOptions {
  BaseMapStyle?: BaseMapStyleType | undefined;
}
export interface FilledMapSortConfiguration {
  CategorySort?: FieldSortOptions[] | undefined;
}
export interface GeospatialCoordinateBounds {
  North: number | undefined;
  South: number | undefined;
  West: number | undefined;
  East: number | undefined;
}
export declare const MapZoomMode: {
  readonly AUTO: "AUTO";
  readonly MANUAL: "MANUAL";
};
export type MapZoomMode = (typeof MapZoomMode)[keyof typeof MapZoomMode];
export interface GeospatialWindowOptions {
  Bounds?: GeospatialCoordinateBounds | undefined;
  MapZoomMode?: MapZoomMode | undefined;
}
export interface FilledMapConfiguration {
  FieldWells?: FilledMapFieldWells | undefined;
  SortConfiguration?: FilledMapSortConfiguration | undefined;
  Legend?: LegendOptions | undefined;
  Tooltip?: TooltipOptions | undefined;
  WindowOptions?: GeospatialWindowOptions | undefined;
  MapStyleOptions?: GeospatialMapStyleOptions | undefined;
  Interactions?: VisualInteractionOptions | undefined;
}
export interface GradientStop {
  GradientOffset: number | undefined;
  DataValue?: number | undefined;
  Color?: string | undefined;
}
export interface GradientColor {
  Stops?: GradientStop[] | undefined;
}
export interface ConditionalFormattingGradientColor {
  Expression: string | undefined;
  Color: GradientColor | undefined;
}
export interface ConditionalFormattingSolidColor {
  Expression: string | undefined;
  Color?: string | undefined;
}
export interface ConditionalFormattingColor {
  Solid?: ConditionalFormattingSolidColor | undefined;
  Gradient?: ConditionalFormattingGradientColor | undefined;
}
export interface ShapeConditionalFormat {
  BackgroundColor: ConditionalFormattingColor | undefined;
}
export interface FilledMapShapeConditionalFormatting {
  FieldId: string | undefined;
  Format?: ShapeConditionalFormat | undefined;
}
export interface FilledMapConditionalFormattingOption {
  Shape: FilledMapShapeConditionalFormatting | undefined;
}
export interface FilledMapConditionalFormatting {
  ConditionalFormattingOptions:
    | FilledMapConditionalFormattingOption[]
    | undefined;
}
export interface FilledMapVisual {
  VisualId: string | undefined;
  Title?: VisualTitleLabelOptions | undefined;
  Subtitle?: VisualSubtitleLabelOptions | undefined;
  ChartConfiguration?: FilledMapConfiguration | undefined;
  ConditionalFormatting?: FilledMapConditionalFormatting | undefined;
  ColumnHierarchies?: ColumnHierarchy[] | undefined;
  Actions?: VisualCustomAction[] | undefined;
  VisualContentAltText?: string | undefined;
}
export declare const FunnelChartMeasureDataLabelStyle: {
  readonly PERCENTAGE_BY_FIRST_STAGE: "PERCENTAGE_BY_FIRST_STAGE";
  readonly PERCENTAGE_BY_PREVIOUS_STAGE: "PERCENTAGE_BY_PREVIOUS_STAGE";
  readonly VALUE_AND_PERCENTAGE_BY_FIRST_STAGE: "VALUE_AND_PERCENTAGE_BY_FIRST_STAGE";
  readonly VALUE_AND_PERCENTAGE_BY_PREVIOUS_STAGE: "VALUE_AND_PERCENTAGE_BY_PREVIOUS_STAGE";
  readonly VALUE_ONLY: "VALUE_ONLY";
};
export type FunnelChartMeasureDataLabelStyle =
  (typeof FunnelChartMeasureDataLabelStyle)[keyof typeof FunnelChartMeasureDataLabelStyle];
export interface FunnelChartDataLabelOptions {
  Visibility?: Visibility | undefined;
  CategoryLabelVisibility?: Visibility | undefined;
  MeasureLabelVisibility?: Visibility | undefined;
  Position?: DataLabelPosition | undefined;
  LabelFontConfiguration?: FontConfiguration | undefined;
  LabelColor?: string | undefined;
  MeasureDataLabelStyle?: FunnelChartMeasureDataLabelStyle | undefined;
}
export interface FunnelChartAggregatedFieldWells {
  Category?: DimensionField[] | undefined;
  Values?: MeasureField[] | undefined;
}
export interface FunnelChartFieldWells {
  FunnelChartAggregatedFieldWells?: FunnelChartAggregatedFieldWells | undefined;
}
export interface FunnelChartSortConfiguration {
  CategorySort?: FieldSortOptions[] | undefined;
  CategoryItemsLimit?: ItemsLimitConfiguration | undefined;
}
export interface FunnelChartConfiguration {
  FieldWells?: FunnelChartFieldWells | undefined;
  SortConfiguration?: FunnelChartSortConfiguration | undefined;
  CategoryLabelOptions?: ChartAxisLabelOptions | undefined;
  ValueLabelOptions?: ChartAxisLabelOptions | undefined;
  Tooltip?: TooltipOptions | undefined;
  DataLabelOptions?: FunnelChartDataLabelOptions | undefined;
  VisualPalette?: VisualPalette | undefined;
  Interactions?: VisualInteractionOptions | undefined;
}
export interface FunnelChartVisual {
  VisualId: string | undefined;
  Title?: VisualTitleLabelOptions | undefined;
  Subtitle?: VisualSubtitleLabelOptions | undefined;
  ChartConfiguration?: FunnelChartConfiguration | undefined;
  Actions?: VisualCustomAction[] | undefined;
  ColumnHierarchies?: ColumnHierarchy[] | undefined;
  VisualContentAltText?: string | undefined;
}
export interface GaugeChartColorConfiguration {
  ForegroundColor?: string | undefined;
  BackgroundColor?: string | undefined;
}
export interface GaugeChartFieldWells {
  Values?: MeasureField[] | undefined;
  TargetValues?: MeasureField[] | undefined;
}
export declare const ArcThicknessOptions: {
  readonly LARGE: "LARGE";
  readonly MEDIUM: "MEDIUM";
  readonly SMALL: "SMALL";
};
export type ArcThicknessOptions =
  (typeof ArcThicknessOptions)[keyof typeof ArcThicknessOptions];
export interface ArcConfiguration {
  ArcAngle?: number | undefined;
  ArcThickness?: ArcThicknessOptions | undefined;
}
export interface ArcAxisDisplayRange {
  Min?: number | undefined;
  Max?: number | undefined;
}
export interface ArcAxisConfiguration {
  Range?: ArcAxisDisplayRange | undefined;
  ReserveRange?: number | undefined;
}
export interface ComparisonFormatConfiguration {
  NumberDisplayFormatConfiguration?:
    | NumberDisplayFormatConfiguration
    | undefined;
  PercentageDisplayFormatConfiguration?:
    | PercentageDisplayFormatConfiguration
    | undefined;
}
export declare const ComparisonMethod: {
  readonly DIFFERENCE: "DIFFERENCE";
  readonly PERCENT: "PERCENT";
  readonly PERCENT_DIFFERENCE: "PERCENT_DIFFERENCE";
};
export type ComparisonMethod =
  (typeof ComparisonMethod)[keyof typeof ComparisonMethod];
export interface ComparisonConfiguration {
  ComparisonMethod?: ComparisonMethod | undefined;
  ComparisonFormat?: ComparisonFormatConfiguration | undefined;
}
export declare const PrimaryValueDisplayType: {
  readonly ACTUAL: "ACTUAL";
  readonly COMPARISON: "COMPARISON";
  readonly HIDDEN: "HIDDEN";
};
export type PrimaryValueDisplayType =
  (typeof PrimaryValueDisplayType)[keyof typeof PrimaryValueDisplayType];
export interface GaugeChartOptions {
  PrimaryValueDisplayType?: PrimaryValueDisplayType | undefined;
  Comparison?: ComparisonConfiguration | undefined;
  ArcAxis?: ArcAxisConfiguration | undefined;
  Arc?: ArcConfiguration | undefined;
  PrimaryValueFontConfiguration?: FontConfiguration | undefined;
}
export interface GaugeChartConfiguration {
  FieldWells?: GaugeChartFieldWells | undefined;
  GaugeChartOptions?: GaugeChartOptions | undefined;
  DataLabels?: DataLabelOptions | undefined;
  TooltipOptions?: TooltipOptions | undefined;
  VisualPalette?: VisualPalette | undefined;
  ColorConfiguration?: GaugeChartColorConfiguration | undefined;
  Interactions?: VisualInteractionOptions | undefined;
}
export interface GaugeChartArcConditionalFormatting {
  ForegroundColor?: ConditionalFormattingColor | undefined;
}
export declare const ConditionalFormattingIconDisplayOption: {
  readonly ICON_ONLY: "ICON_ONLY";
};
export type ConditionalFormattingIconDisplayOption =
  (typeof ConditionalFormattingIconDisplayOption)[keyof typeof ConditionalFormattingIconDisplayOption];
export interface ConditionalFormattingIconDisplayConfiguration {
  IconDisplayOption?: ConditionalFormattingIconDisplayOption | undefined;
}
export declare const Icon: {
  readonly ARROW_DOWN: "ARROW_DOWN";
  readonly ARROW_DOWN_LEFT: "ARROW_DOWN_LEFT";
  readonly ARROW_DOWN_RIGHT: "ARROW_DOWN_RIGHT";
  readonly ARROW_LEFT: "ARROW_LEFT";
  readonly ARROW_RIGHT: "ARROW_RIGHT";
  readonly ARROW_UP: "ARROW_UP";
  readonly ARROW_UP_LEFT: "ARROW_UP_LEFT";
  readonly ARROW_UP_RIGHT: "ARROW_UP_RIGHT";
  readonly CARET_DOWN: "CARET_DOWN";
  readonly CARET_UP: "CARET_UP";
  readonly CHECKMARK: "CHECKMARK";
  readonly CIRCLE: "CIRCLE";
  readonly FACE_DOWN: "FACE_DOWN";
  readonly FACE_FLAT: "FACE_FLAT";
  readonly FACE_UP: "FACE_UP";
  readonly FLAG: "FLAG";
  readonly MINUS: "MINUS";
  readonly ONE_BAR: "ONE_BAR";
  readonly PLUS: "PLUS";
  readonly SQUARE: "SQUARE";
  readonly THREE_BAR: "THREE_BAR";
  readonly THUMBS_DOWN: "THUMBS_DOWN";
  readonly THUMBS_UP: "THUMBS_UP";
  readonly TRIANGLE: "TRIANGLE";
  readonly TWO_BAR: "TWO_BAR";
  readonly X: "X";
};
export type Icon = (typeof Icon)[keyof typeof Icon];
export interface ConditionalFormattingCustomIconOptions {
  Icon?: Icon | undefined;
  UnicodeIcon?: string | undefined;
}
export interface ConditionalFormattingCustomIconCondition {
  Expression: string | undefined;
  IconOptions: ConditionalFormattingCustomIconOptions | undefined;
  Color?: string | undefined;
  DisplayConfiguration?:
    | ConditionalFormattingIconDisplayConfiguration
    | undefined;
}
export declare const ConditionalFormattingIconSetType: {
  readonly BARS: "BARS";
  readonly CARET_UP_MINUS_DOWN: "CARET_UP_MINUS_DOWN";
  readonly CHECK_X: "CHECK_X";
  readonly FLAGS: "FLAGS";
  readonly FOUR_COLOR_ARROW: "FOUR_COLOR_ARROW";
  readonly FOUR_GRAY_ARROW: "FOUR_GRAY_ARROW";
  readonly PLUS_MINUS: "PLUS_MINUS";
  readonly THREE_CIRCLE: "THREE_CIRCLE";
  readonly THREE_COLOR_ARROW: "THREE_COLOR_ARROW";
  readonly THREE_GRAY_ARROW: "THREE_GRAY_ARROW";
  readonly THREE_SHAPE: "THREE_SHAPE";
};
export type ConditionalFormattingIconSetType =
  (typeof ConditionalFormattingIconSetType)[keyof typeof ConditionalFormattingIconSetType];
export interface ConditionalFormattingIconSet {
  Expression: string | undefined;
  IconSetType?: ConditionalFormattingIconSetType | undefined;
}
export interface ConditionalFormattingIcon {
  IconSet?: ConditionalFormattingIconSet | undefined;
  CustomCondition?: ConditionalFormattingCustomIconCondition | undefined;
}
export interface GaugeChartPrimaryValueConditionalFormatting {
  TextColor?: ConditionalFormattingColor | undefined;
  Icon?: ConditionalFormattingIcon | undefined;
}
export interface GaugeChartConditionalFormattingOption {
  PrimaryValue?: GaugeChartPrimaryValueConditionalFormatting | undefined;
  Arc?: GaugeChartArcConditionalFormatting | undefined;
}
export interface GaugeChartConditionalFormatting {
  ConditionalFormattingOptions?:
    | GaugeChartConditionalFormattingOption[]
    | undefined;
}
export interface GaugeChartVisual {
  VisualId: string | undefined;
  Title?: VisualTitleLabelOptions | undefined;
  Subtitle?: VisualSubtitleLabelOptions | undefined;
  ChartConfiguration?: GaugeChartConfiguration | undefined;
  ConditionalFormatting?: GaugeChartConditionalFormatting | undefined;
  Actions?: VisualCustomAction[] | undefined;
  VisualContentAltText?: string | undefined;
}
export interface GeospatialMapAggregatedFieldWells {
  Geospatial?: DimensionField[] | undefined;
  Values?: MeasureField[] | undefined;
  Colors?: DimensionField[] | undefined;
}
export interface GeospatialMapFieldWells {
  GeospatialMapAggregatedFieldWells?:
    | GeospatialMapAggregatedFieldWells
    | undefined;
}
export interface SimpleClusterMarker {
  Color?: string | undefined;
}
export interface ClusterMarker {
  SimpleClusterMarker?: SimpleClusterMarker | undefined;
}
export interface ClusterMarkerConfiguration {
  ClusterMarker?: ClusterMarker | undefined;
}
export interface GeospatialHeatmapDataColor {
  Color: string | undefined;
}
export interface GeospatialHeatmapColorScale {
  Colors?: GeospatialHeatmapDataColor[] | undefined;
}
export interface GeospatialHeatmapConfiguration {
  HeatmapColor?: GeospatialHeatmapColorScale | undefined;
}
export declare const GeospatialSelectedPointStyle: {
  readonly CLUSTER: "CLUSTER";
  readonly HEATMAP: "HEATMAP";
  readonly POINT: "POINT";
};
export type GeospatialSelectedPointStyle =
  (typeof GeospatialSelectedPointStyle)[keyof typeof GeospatialSelectedPointStyle];
export interface GeospatialPointStyleOptions {
  SelectedPointStyle?: GeospatialSelectedPointStyle | undefined;
  ClusterMarkerConfiguration?: ClusterMarkerConfiguration | undefined;
  HeatmapConfiguration?: GeospatialHeatmapConfiguration | undefined;
}
export interface GeospatialMapConfiguration {
  FieldWells?: GeospatialMapFieldWells | undefined;
  Legend?: LegendOptions | undefined;
  Tooltip?: TooltipOptions | undefined;
  WindowOptions?: GeospatialWindowOptions | undefined;
  MapStyleOptions?: GeospatialMapStyleOptions | undefined;
  PointStyleOptions?: GeospatialPointStyleOptions | undefined;
  VisualPalette?: VisualPalette | undefined;
  Interactions?: VisualInteractionOptions | undefined;
}
export interface GeospatialMapVisual {
  VisualId: string | undefined;
  Title?: VisualTitleLabelOptions | undefined;
  Subtitle?: VisualSubtitleLabelOptions | undefined;
  ChartConfiguration?: GeospatialMapConfiguration | undefined;
  ColumnHierarchies?: ColumnHierarchy[] | undefined;
  Actions?: VisualCustomAction[] | undefined;
  VisualContentAltText?: string | undefined;
}
export declare const ColorFillType: {
  readonly DISCRETE: "DISCRETE";
  readonly GRADIENT: "GRADIENT";
};
export type ColorFillType = (typeof ColorFillType)[keyof typeof ColorFillType];
export interface DataColor {
  Color?: string | undefined;
  DataValue?: number | undefined;
}
export interface ColorScale {
  Colors: DataColor[] | undefined;
  ColorFillType: ColorFillType | undefined;
  NullValueColor?: DataColor | undefined;
}
export interface HeatMapAggregatedFieldWells {
  Rows?: DimensionField[] | undefined;
  Columns?: DimensionField[] | undefined;
  Values?: MeasureField[] | undefined;
}
export interface HeatMapFieldWells {
  HeatMapAggregatedFieldWells?: HeatMapAggregatedFieldWells | undefined;
}
export interface HeatMapSortConfiguration {
  HeatMapRowSort?: FieldSortOptions[] | undefined;
  HeatMapColumnSort?: FieldSortOptions[] | undefined;
  HeatMapRowItemsLimitConfiguration?: ItemsLimitConfiguration | undefined;
  HeatMapColumnItemsLimitConfiguration?: ItemsLimitConfiguration | undefined;
}
export interface HeatMapConfiguration {
  FieldWells?: HeatMapFieldWells | undefined;
  SortConfiguration?: HeatMapSortConfiguration | undefined;
  RowLabelOptions?: ChartAxisLabelOptions | undefined;
  ColumnLabelOptions?: ChartAxisLabelOptions | undefined;
  ColorScale?: ColorScale | undefined;
  Legend?: LegendOptions | undefined;
  DataLabels?: DataLabelOptions | undefined;
  Tooltip?: TooltipOptions | undefined;
  Interactions?: VisualInteractionOptions | undefined;
}
export interface HeatMapVisual {
  VisualId: string | undefined;
  Title?: VisualTitleLabelOptions | undefined;
  Subtitle?: VisualSubtitleLabelOptions | undefined;
  ChartConfiguration?: HeatMapConfiguration | undefined;
  ColumnHierarchies?: ColumnHierarchy[] | undefined;
  Actions?: VisualCustomAction[] | undefined;
  VisualContentAltText?: string | undefined;
}
export interface BinCountOptions {
  Value?: number | undefined;
}
export interface BinWidthOptions {
  Value?: number | undefined;
  BinCountLimit?: number | undefined;
}
export declare const HistogramBinType: {
  readonly BIN_COUNT: "BIN_COUNT";
  readonly BIN_WIDTH: "BIN_WIDTH";
};
export type HistogramBinType =
  (typeof HistogramBinType)[keyof typeof HistogramBinType];
export interface HistogramBinOptions {
  SelectedBinType?: HistogramBinType | undefined;
  BinCount?: BinCountOptions | undefined;
  BinWidth?: BinWidthOptions | undefined;
  StartValue?: number | undefined;
}
export interface HistogramAggregatedFieldWells {
  Values?: MeasureField[] | undefined;
}
export interface HistogramFieldWells {
  HistogramAggregatedFieldWells?: HistogramAggregatedFieldWells | undefined;
}
export interface HistogramConfiguration {
  FieldWells?: HistogramFieldWells | undefined;
  XAxisDisplayOptions?: AxisDisplayOptions | undefined;
  XAxisLabelOptions?: ChartAxisLabelOptions | undefined;
  YAxisDisplayOptions?: AxisDisplayOptions | undefined;
  BinOptions?: HistogramBinOptions | undefined;
  DataLabels?: DataLabelOptions | undefined;
  Tooltip?: TooltipOptions | undefined;
  VisualPalette?: VisualPalette | undefined;
  Interactions?: VisualInteractionOptions | undefined;
}
export interface HistogramVisual {
  VisualId: string | undefined;
  Title?: VisualTitleLabelOptions | undefined;
  Subtitle?: VisualSubtitleLabelOptions | undefined;
  ChartConfiguration?: HistogramConfiguration | undefined;
  Actions?: VisualCustomAction[] | undefined;
  VisualContentAltText?: string | undefined;
}
export declare const ForecastComputationSeasonality: {
  readonly AUTOMATIC: "AUTOMATIC";
  readonly CUSTOM: "CUSTOM";
};
export type ForecastComputationSeasonality =
  (typeof ForecastComputationSeasonality)[keyof typeof ForecastComputationSeasonality];
export interface ForecastComputation {
  ComputationId: string | undefined;
  Name?: string | undefined;
  Time?: DimensionField | undefined;
  Value?: MeasureField | undefined;
  PeriodsForward?: number | undefined;
  PeriodsBackward?: number | undefined;
  UpperBoundary?: number | undefined;
  LowerBoundary?: number | undefined;
  PredictionInterval?: number | undefined;
  Seasonality?: ForecastComputationSeasonality | undefined;
  CustomSeasonalityValue?: number | undefined;
}
export interface GrowthRateComputation {
  ComputationId: string | undefined;
  Name?: string | undefined;
  Time?: DimensionField | undefined;
  Value?: MeasureField | undefined;
  PeriodSize?: number | undefined;
}
export declare const MaximumMinimumComputationType: {
  readonly MAXIMUM: "MAXIMUM";
  readonly MINIMUM: "MINIMUM";
};
export type MaximumMinimumComputationType =
  (typeof MaximumMinimumComputationType)[keyof typeof MaximumMinimumComputationType];
export interface MaximumMinimumComputation {
  ComputationId: string | undefined;
  Name?: string | undefined;
  Time?: DimensionField | undefined;
  Value?: MeasureField | undefined;
  Type: MaximumMinimumComputationType | undefined;
}
export interface MetricComparisonComputation {
  ComputationId: string | undefined;
  Name?: string | undefined;
  Time?: DimensionField | undefined;
  FromValue?: MeasureField | undefined;
  TargetValue?: MeasureField | undefined;
}
export interface PeriodOverPeriodComputation {
  ComputationId: string | undefined;
  Name?: string | undefined;
  Time?: DimensionField | undefined;
  Value?: MeasureField | undefined;
}
export interface PeriodToDateComputation {
  ComputationId: string | undefined;
  Name?: string | undefined;
  Time?: DimensionField | undefined;
  Value?: MeasureField | undefined;
  PeriodTimeGranularity?: TimeGranularity | undefined;
}
export declare const TopBottomSortOrder: {
  readonly ABSOLUTE_DIFFERENCE: "ABSOLUTE_DIFFERENCE";
  readonly PERCENT_DIFFERENCE: "PERCENT_DIFFERENCE";
};
export type TopBottomSortOrder =
  (typeof TopBottomSortOrder)[keyof typeof TopBottomSortOrder];
export declare const TopBottomComputationType: {
  readonly BOTTOM: "BOTTOM";
  readonly TOP: "TOP";
};
export type TopBottomComputationType =
  (typeof TopBottomComputationType)[keyof typeof TopBottomComputationType];
export interface TopBottomMoversComputation {
  ComputationId: string | undefined;
  Name?: string | undefined;
  Time?: DimensionField | undefined;
  Category?: DimensionField | undefined;
  Value?: MeasureField | undefined;
  MoverSize?: number | undefined;
  SortOrder?: TopBottomSortOrder | undefined;
  Type: TopBottomComputationType | undefined;
}
export interface TopBottomRankedComputation {
  ComputationId: string | undefined;
  Name?: string | undefined;
  Category?: DimensionField | undefined;
  Value?: MeasureField | undefined;
  ResultSize?: number | undefined;
  Type: TopBottomComputationType | undefined;
}
export interface TotalAggregationComputation {
  ComputationId: string | undefined;
  Name?: string | undefined;
  Value?: MeasureField | undefined;
}
export interface UniqueValuesComputation {
  ComputationId: string | undefined;
  Name?: string | undefined;
  Category?: DimensionField | undefined;
}
export interface Computation {
  TopBottomRanked?: TopBottomRankedComputation | undefined;
  TopBottomMovers?: TopBottomMoversComputation | undefined;
  TotalAggregation?: TotalAggregationComputation | undefined;
  MaximumMinimum?: MaximumMinimumComputation | undefined;
  MetricComparison?: MetricComparisonComputation | undefined;
  PeriodOverPeriod?: PeriodOverPeriodComputation | undefined;
  PeriodToDate?: PeriodToDateComputation | undefined;
  GrowthRate?: GrowthRateComputation | undefined;
  UniqueValues?: UniqueValuesComputation | undefined;
  Forecast?: ForecastComputation | undefined;
}
export interface CustomNarrativeOptions {
  Narrative: string | undefined;
}
export interface InsightConfiguration {
  Computations?: Computation[] | undefined;
  CustomNarrative?: CustomNarrativeOptions | undefined;
  Interactions?: VisualInteractionOptions | undefined;
}
export interface InsightVisual {
  VisualId: string | undefined;
  Title?: VisualTitleLabelOptions | undefined;
  Subtitle?: VisualSubtitleLabelOptions | undefined;
  InsightConfiguration?: InsightConfiguration | undefined;
  Actions?: VisualCustomAction[] | undefined;
  DataSetIdentifier: string | undefined;
  VisualContentAltText?: string | undefined;
}
export interface KPIFieldWells {
  Values?: MeasureField[] | undefined;
  TargetValues?: MeasureField[] | undefined;
  TrendGroups?: DimensionField[] | undefined;
}
export interface ProgressBarOptions {
  Visibility?: Visibility | undefined;
}
export interface SecondaryValueOptions {
  Visibility?: Visibility | undefined;
}
export declare const KPISparklineType: {
  readonly AREA: "AREA";
  readonly LINE: "LINE";
};
export type KPISparklineType =
  (typeof KPISparklineType)[keyof typeof KPISparklineType];
export interface KPISparklineOptions {
  Visibility?: Visibility | undefined;
  Type: KPISparklineType | undefined;
  Color?: string | undefined;
  TooltipVisibility?: Visibility | undefined;
}
export interface TrendArrowOptions {
  Visibility?: Visibility | undefined;
}
export declare const KPIVisualStandardLayoutType: {
  readonly CLASSIC: "CLASSIC";
  readonly VERTICAL: "VERTICAL";
};
export type KPIVisualStandardLayoutType =
  (typeof KPIVisualStandardLayoutType)[keyof typeof KPIVisualStandardLayoutType];
export interface KPIVisualStandardLayout {
  Type: KPIVisualStandardLayoutType | undefined;
}
export interface KPIVisualLayoutOptions {
  StandardLayout?: KPIVisualStandardLayout | undefined;
}
export interface KPIOptions {
  ProgressBar?: ProgressBarOptions | undefined;
  TrendArrows?: TrendArrowOptions | undefined;
  SecondaryValue?: SecondaryValueOptions | undefined;
  Comparison?: ComparisonConfiguration | undefined;
  PrimaryValueDisplayType?: PrimaryValueDisplayType | undefined;
  PrimaryValueFontConfiguration?: FontConfiguration | undefined;
  SecondaryValueFontConfiguration?: FontConfiguration | undefined;
  Sparkline?: KPISparklineOptions | undefined;
  VisualLayoutOptions?: KPIVisualLayoutOptions | undefined;
}
export interface KPISortConfiguration {
  TrendGroupSort?: FieldSortOptions[] | undefined;
}
export interface KPIConfiguration {
  FieldWells?: KPIFieldWells | undefined;
  SortConfiguration?: KPISortConfiguration | undefined;
  KPIOptions?: KPIOptions | undefined;
  Interactions?: VisualInteractionOptions | undefined;
}
export interface KPIActualValueConditionalFormatting {
  TextColor?: ConditionalFormattingColor | undefined;
  Icon?: ConditionalFormattingIcon | undefined;
}
export interface KPIComparisonValueConditionalFormatting {
  TextColor?: ConditionalFormattingColor | undefined;
  Icon?: ConditionalFormattingIcon | undefined;
}
export interface KPIPrimaryValueConditionalFormatting {
  TextColor?: ConditionalFormattingColor | undefined;
  Icon?: ConditionalFormattingIcon | undefined;
}
export interface KPIProgressBarConditionalFormatting {
  ForegroundColor?: ConditionalFormattingColor | undefined;
}
export interface KPIConditionalFormattingOption {
  PrimaryValue?: KPIPrimaryValueConditionalFormatting | undefined;
  ProgressBar?: KPIProgressBarConditionalFormatting | undefined;
  ActualValue?: KPIActualValueConditionalFormatting | undefined;
  ComparisonValue?: KPIComparisonValueConditionalFormatting | undefined;
}
export interface KPIConditionalFormatting {
  ConditionalFormattingOptions?: KPIConditionalFormattingOption[] | undefined;
}
export interface KPIVisual {
  VisualId: string | undefined;
  Title?: VisualTitleLabelOptions | undefined;
  Subtitle?: VisualSubtitleLabelOptions | undefined;
  ChartConfiguration?: KPIConfiguration | undefined;
  ConditionalFormatting?: KPIConditionalFormatting | undefined;
  Actions?: VisualCustomAction[] | undefined;
  ColumnHierarchies?: ColumnHierarchy[] | undefined;
  VisualContentAltText?: string | undefined;
}
export interface LayerCustomActionOperation {
  FilterOperation?: CustomActionFilterOperation | undefined;
  NavigationOperation?: CustomActionNavigationOperation | undefined;
  URLOperation?: CustomActionURLOperation | undefined;
  SetParametersOperation?: CustomActionSetParametersOperation | undefined;
}
export declare const LayerCustomActionTrigger: {
  readonly DATA_POINT_CLICK: "DATA_POINT_CLICK";
  readonly DATA_POINT_MENU: "DATA_POINT_MENU";
};
export type LayerCustomActionTrigger =
  (typeof LayerCustomActionTrigger)[keyof typeof LayerCustomActionTrigger];
export interface LayerCustomAction {
  CustomActionId: string | undefined;
  Name: string | undefined;
  Status?: WidgetStatus | undefined;
  Trigger: LayerCustomActionTrigger | undefined;
  ActionOperations: LayerCustomActionOperation[] | undefined;
}
export interface GeospatialStaticFileSource {
  StaticFileId: string | undefined;
}
export interface GeospatialDataSourceItem {
  StaticFileDataSource?: GeospatialStaticFileSource | undefined;
}
export interface GeospatialLayerColorField {
  ColorDimensionsFields?: DimensionField[] | undefined;
  ColorValuesFields?: MeasureField[] | undefined;
}
export interface UnaggregatedField {
  FieldId: string | undefined;
  Column: ColumnIdentifier | undefined;
  FormatConfiguration?: FormatConfiguration | undefined;
}
export interface GeospatialLayerJoinDefinition {
  ShapeKeyField?: string | undefined;
  DatasetKeyField?: UnaggregatedField | undefined;
  ColorField?: GeospatialLayerColorField | undefined;
}
export interface GeospatialCategoricalDataColor {
  Color: string | undefined;
  DataValue: string | undefined;
}
export interface GeospatialNullSymbolStyle {
  FillColor?: string | undefined;
  StrokeColor?: string | undefined;
  StrokeWidth?: number | undefined;
}
export interface GeospatialNullDataSettings {
  SymbolStyle: GeospatialNullSymbolStyle | undefined;
}
export interface GeospatialCategoricalColor {
  CategoryDataColors: GeospatialCategoricalDataColor[] | undefined;
  NullDataVisibility?: Visibility | undefined;
  NullDataSettings?: GeospatialNullDataSettings | undefined;
  DefaultOpacity?: number | undefined;
}
export interface GeospatialGradientStepColor {
  Color: string | undefined;
  DataValue: number | undefined;
}
export interface GeospatialGradientColor {
  StepColors: GeospatialGradientStepColor[] | undefined;
  NullDataVisibility?: Visibility | undefined;
  NullDataSettings?: GeospatialNullDataSettings | undefined;
  DefaultOpacity?: number | undefined;
}
export declare const GeospatialColorState: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type GeospatialColorState =
  (typeof GeospatialColorState)[keyof typeof GeospatialColorState];
export interface GeospatialSolidColor {
  Color: string | undefined;
  State?: GeospatialColorState | undefined;
}
export interface GeospatialColor {
  Solid?: GeospatialSolidColor | undefined;
  Gradient?: GeospatialGradientColor | undefined;
  Categorical?: GeospatialCategoricalColor | undefined;
}
export interface GeospatialLineWidth {
  LineWidth?: number | undefined;
}
export interface GeospatialLineSymbolStyle {
  FillColor?: GeospatialColor | undefined;
  LineWidth?: GeospatialLineWidth | undefined;
}
export interface GeospatialLineStyle {
  LineSymbolStyle?: GeospatialLineSymbolStyle | undefined;
}
export interface GeospatialLineLayer {
  Style: GeospatialLineStyle | undefined;
}
export interface GeospatialCircleRadius {
  Radius?: number | undefined;
}
export interface GeospatialCircleSymbolStyle {
  FillColor?: GeospatialColor | undefined;
  StrokeColor?: GeospatialColor | undefined;
  StrokeWidth?: GeospatialLineWidth | undefined;
  CircleRadius?: GeospatialCircleRadius | undefined;
}
export interface GeospatialPointStyle {
  CircleSymbolStyle?: GeospatialCircleSymbolStyle | undefined;
}
export interface GeospatialPointLayer {
  Style: GeospatialPointStyle | undefined;
}
export interface GeospatialPolygonSymbolStyle {
  FillColor?: GeospatialColor | undefined;
  StrokeColor?: GeospatialColor | undefined;
  StrokeWidth?: GeospatialLineWidth | undefined;
}
export interface GeospatialPolygonStyle {
  PolygonSymbolStyle?: GeospatialPolygonSymbolStyle | undefined;
}
export interface GeospatialPolygonLayer {
  Style: GeospatialPolygonStyle | undefined;
}
export interface GeospatialLayerDefinition {
  PointLayer?: GeospatialPointLayer | undefined;
  LineLayer?: GeospatialLineLayer | undefined;
  PolygonLayer?: GeospatialPolygonLayer | undefined;
}
export declare const GeospatialLayerType: {
  readonly LINE: "LINE";
  readonly POINT: "POINT";
  readonly POLYGON: "POLYGON";
};
export type GeospatialLayerType =
  (typeof GeospatialLayerType)[keyof typeof GeospatialLayerType];
export interface GeospatialLayerItem {
  LayerId: string | undefined;
  LayerType?: GeospatialLayerType | undefined;
  DataSource?: GeospatialDataSourceItem | undefined;
  Label?: string | undefined;
  Visibility?: Visibility | undefined;
  LayerDefinition?: GeospatialLayerDefinition | undefined;
  Tooltip?: TooltipOptions | undefined;
  JoinDefinition?: GeospatialLayerJoinDefinition | undefined;
  Actions?: LayerCustomAction[] | undefined;
}
export declare const GeospatialMapNavigation: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type GeospatialMapNavigation =
  (typeof GeospatialMapNavigation)[keyof typeof GeospatialMapNavigation];
export interface GeospatialMapState {
  Bounds?: GeospatialCoordinateBounds | undefined;
  MapNavigation?: GeospatialMapNavigation | undefined;
}
export interface GeospatialMapStyle {
  BaseMapStyle?: BaseMapStyleType | undefined;
  BackgroundColor?: string | undefined;
  BaseMapVisibility?: Visibility | undefined;
}
export interface GeospatialLayerMapConfiguration {
  Legend?: LegendOptions | undefined;
  MapLayers?: GeospatialLayerItem[] | undefined;
  MapState?: GeospatialMapState | undefined;
  MapStyle?: GeospatialMapStyle | undefined;
  Interactions?: VisualInteractionOptions | undefined;
}
export interface LayerMapVisual {
  VisualId: string | undefined;
  Title?: VisualTitleLabelOptions | undefined;
  Subtitle?: VisualSubtitleLabelOptions | undefined;
  ChartConfiguration?: GeospatialLayerMapConfiguration | undefined;
  DataSetIdentifier: string | undefined;
  VisualContentAltText?: string | undefined;
}
export declare const LineInterpolation: {
  readonly LINEAR: "LINEAR";
  readonly SMOOTH: "SMOOTH";
  readonly STEPPED: "STEPPED";
};
export type LineInterpolation =
  (typeof LineInterpolation)[keyof typeof LineInterpolation];
export declare const LineChartLineStyle: {
  readonly DASHED: "DASHED";
  readonly DOTTED: "DOTTED";
  readonly SOLID: "SOLID";
};
export type LineChartLineStyle =
  (typeof LineChartLineStyle)[keyof typeof LineChartLineStyle];
export interface LineChartLineStyleSettings {
  LineVisibility?: Visibility | undefined;
  LineInterpolation?: LineInterpolation | undefined;
  LineStyle?: LineChartLineStyle | undefined;
  LineWidth?: string | undefined;
}
export declare const LineChartMarkerShape: {
  readonly CIRCLE: "CIRCLE";
  readonly DIAMOND: "DIAMOND";
  readonly ROUNDED_SQUARE: "ROUNDED_SQUARE";
  readonly SQUARE: "SQUARE";
  readonly TRIANGLE: "TRIANGLE";
};
export type LineChartMarkerShape =
  (typeof LineChartMarkerShape)[keyof typeof LineChartMarkerShape];
export interface LineChartMarkerStyleSettings {
  MarkerVisibility?: Visibility | undefined;
  MarkerShape?: LineChartMarkerShape | undefined;
  MarkerSize?: string | undefined;
  MarkerColor?: string | undefined;
}
export interface LineChartDefaultSeriesSettings {
  AxisBinding?: AxisBinding | undefined;
  LineStyleSettings?: LineChartLineStyleSettings | undefined;
  MarkerStyleSettings?: LineChartMarkerStyleSettings | undefined;
}
export interface LineChartAggregatedFieldWells {
  Category?: DimensionField[] | undefined;
  Values?: MeasureField[] | undefined;
  Colors?: DimensionField[] | undefined;
  SmallMultiples?: DimensionField[] | undefined;
}
export interface LineChartFieldWells {
  LineChartAggregatedFieldWells?: LineChartAggregatedFieldWells | undefined;
}
export interface TimeBasedForecastProperties {
  PeriodsForward?: number | undefined;
  PeriodsBackward?: number | undefined;
  UpperBoundary?: number | undefined;
  LowerBoundary?: number | undefined;
  PredictionInterval?: number | undefined;
  Seasonality?: number | undefined;
}
export interface WhatIfPointScenario {
  Date: Date | undefined;
  Value: number | undefined;
}
export interface WhatIfRangeScenario {
  StartDate: Date | undefined;
  EndDate: Date | undefined;
  Value: number | undefined;
}
export interface ForecastScenario {
  WhatIfPointScenario?: WhatIfPointScenario | undefined;
  WhatIfRangeScenario?: WhatIfRangeScenario | undefined;
}
export interface ForecastConfiguration {
  ForecastProperties?: TimeBasedForecastProperties | undefined;
  Scenario?: ForecastScenario | undefined;
}
export declare const MissingDataTreatmentOption: {
  readonly INTERPOLATE: "INTERPOLATE";
  readonly SHOW_AS_BLANK: "SHOW_AS_BLANK";
  readonly SHOW_AS_ZERO: "SHOW_AS_ZERO";
};
export type MissingDataTreatmentOption =
  (typeof MissingDataTreatmentOption)[keyof typeof MissingDataTreatmentOption];
export interface MissingDataConfiguration {
  TreatmentOption?: MissingDataTreatmentOption | undefined;
}
export interface LineSeriesAxisDisplayOptions {
  AxisOptions?: AxisDisplayOptions | undefined;
  MissingDataConfigurations?: MissingDataConfiguration[] | undefined;
}
export interface LineChartSeriesSettings {
  LineStyleSettings?: LineChartLineStyleSettings | undefined;
  MarkerStyleSettings?: LineChartMarkerStyleSettings | undefined;
}
export interface DataFieldSeriesItem {
  FieldId: string | undefined;
  FieldValue?: string | undefined;
  AxisBinding: AxisBinding | undefined;
  Settings?: LineChartSeriesSettings | undefined;
}
export interface FieldSeriesItem {
  FieldId: string | undefined;
  AxisBinding: AxisBinding | undefined;
  Settings?: LineChartSeriesSettings | undefined;
}
export interface SeriesItem {
  FieldSeriesItem?: FieldSeriesItem | undefined;
  DataFieldSeriesItem?: DataFieldSeriesItem | undefined;
}
export interface LineChartSortConfiguration {
  CategorySort?: FieldSortOptions[] | undefined;
  CategoryItemsLimitConfiguration?: ItemsLimitConfiguration | undefined;
  ColorItemsLimitConfiguration?: ItemsLimitConfiguration | undefined;
  SmallMultiplesSort?: FieldSortOptions[] | undefined;
  SmallMultiplesLimitConfiguration?: ItemsLimitConfiguration | undefined;
}
export declare const LineChartType: {
  readonly AREA: "AREA";
  readonly LINE: "LINE";
  readonly STACKED_AREA: "STACKED_AREA";
};
export type LineChartType = (typeof LineChartType)[keyof typeof LineChartType];
export interface LineChartConfiguration {
  FieldWells?: LineChartFieldWells | undefined;
  SortConfiguration?: LineChartSortConfiguration | undefined;
  ForecastConfigurations?: ForecastConfiguration[] | undefined;
  Type?: LineChartType | undefined;
  SmallMultiplesOptions?: SmallMultiplesOptions | undefined;
  XAxisDisplayOptions?: AxisDisplayOptions | undefined;
  XAxisLabelOptions?: ChartAxisLabelOptions | undefined;
  PrimaryYAxisDisplayOptions?: LineSeriesAxisDisplayOptions | undefined;
  PrimaryYAxisLabelOptions?: ChartAxisLabelOptions | undefined;
  SecondaryYAxisDisplayOptions?: LineSeriesAxisDisplayOptions | undefined;
  SecondaryYAxisLabelOptions?: ChartAxisLabelOptions | undefined;
  SingleAxisOptions?: SingleAxisOptions | undefined;
  DefaultSeriesSettings?: LineChartDefaultSeriesSettings | undefined;
  Series?: SeriesItem[] | undefined;
  Legend?: LegendOptions | undefined;
  DataLabels?: DataLabelOptions | undefined;
  ReferenceLines?: ReferenceLine[] | undefined;
  Tooltip?: TooltipOptions | undefined;
  ContributionAnalysisDefaults?: ContributionAnalysisDefault[] | undefined;
  VisualPalette?: VisualPalette | undefined;
  Interactions?: VisualInteractionOptions | undefined;
}
export interface LineChartVisual {
  VisualId: string | undefined;
  Title?: VisualTitleLabelOptions | undefined;
  Subtitle?: VisualSubtitleLabelOptions | undefined;
  ChartConfiguration?: LineChartConfiguration | undefined;
  Actions?: VisualCustomAction[] | undefined;
  ColumnHierarchies?: ColumnHierarchy[] | undefined;
  VisualContentAltText?: string | undefined;
}
export declare const ArcThickness: {
  readonly LARGE: "LARGE";
  readonly MEDIUM: "MEDIUM";
  readonly SMALL: "SMALL";
  readonly WHOLE: "WHOLE";
};
export type ArcThickness = (typeof ArcThickness)[keyof typeof ArcThickness];
export interface ArcOptions {
  ArcThickness?: ArcThickness | undefined;
}
export interface DonutCenterOptions {
  LabelVisibility?: Visibility | undefined;
}
export interface DonutOptions {
  ArcOptions?: ArcOptions | undefined;
  DonutCenterOptions?: DonutCenterOptions | undefined;
}
export interface PieChartAggregatedFieldWells {
  Category?: DimensionField[] | undefined;
  Values?: MeasureField[] | undefined;
  SmallMultiples?: DimensionField[] | undefined;
}
export interface PieChartFieldWells {
  PieChartAggregatedFieldWells?: PieChartAggregatedFieldWells | undefined;
}
export interface PieChartSortConfiguration {
  CategorySort?: FieldSortOptions[] | undefined;
  CategoryItemsLimit?: ItemsLimitConfiguration | undefined;
  SmallMultiplesSort?: FieldSortOptions[] | undefined;
  SmallMultiplesLimitConfiguration?: ItemsLimitConfiguration | undefined;
}
export interface PieChartConfiguration {
  FieldWells?: PieChartFieldWells | undefined;
  SortConfiguration?: PieChartSortConfiguration | undefined;
  DonutOptions?: DonutOptions | undefined;
  SmallMultiplesOptions?: SmallMultiplesOptions | undefined;
  CategoryLabelOptions?: ChartAxisLabelOptions | undefined;
  ValueLabelOptions?: ChartAxisLabelOptions | undefined;
  Legend?: LegendOptions | undefined;
  DataLabels?: DataLabelOptions | undefined;
  Tooltip?: TooltipOptions | undefined;
  VisualPalette?: VisualPalette | undefined;
  ContributionAnalysisDefaults?: ContributionAnalysisDefault[] | undefined;
  Interactions?: VisualInteractionOptions | undefined;
}
export interface PieChartVisual {
  VisualId: string | undefined;
  Title?: VisualTitleLabelOptions | undefined;
  Subtitle?: VisualSubtitleLabelOptions | undefined;
  ChartConfiguration?: PieChartConfiguration | undefined;
  Actions?: VisualCustomAction[] | undefined;
  ColumnHierarchies?: ColumnHierarchy[] | undefined;
  VisualContentAltText?: string | undefined;
}
export declare const PivotTableFieldCollapseState: {
  readonly COLLAPSED: "COLLAPSED";
  readonly EXPANDED: "EXPANDED";
};
export type PivotTableFieldCollapseState =
  (typeof PivotTableFieldCollapseState)[keyof typeof PivotTableFieldCollapseState];
export interface PivotTableFieldCollapseStateTarget {
  FieldId?: string | undefined;
  FieldDataPathValues?: DataPathValue[] | undefined;
}
export interface PivotTableFieldCollapseStateOption {
  Target: PivotTableFieldCollapseStateTarget | undefined;
  State?: PivotTableFieldCollapseState | undefined;
}
export interface PivotTableDataPathOption {
  DataPathList: DataPathValue[] | undefined;
  Width?: string | undefined;
}
export interface PivotTableFieldOption {
  FieldId: string | undefined;
  CustomLabel?: string | undefined;
  Visibility?: Visibility | undefined;
}
export interface PivotTableFieldOptions {
  SelectedFieldOptions?: PivotTableFieldOption[] | undefined;
  DataPathOptions?: PivotTableDataPathOption[] | undefined;
  CollapseStateOptions?: PivotTableFieldCollapseStateOption[] | undefined;
}
export interface PivotTableAggregatedFieldWells {
  Rows?: DimensionField[] | undefined;
  Columns?: DimensionField[] | undefined;
  Values?: MeasureField[] | undefined;
}
export interface PivotTableFieldWells {
  PivotTableAggregatedFieldWells?: PivotTableAggregatedFieldWells | undefined;
}
export interface PivotTablePaginatedReportOptions {
  VerticalOverflowVisibility?: Visibility | undefined;
  OverflowColumnHeaderVisibility?: Visibility | undefined;
}
export interface DataPathSort {
  Direction: SortDirection | undefined;
  SortPaths: DataPathValue[] | undefined;
}
export interface PivotTableSortBy {
  Field?: FieldSort | undefined;
  Column?: ColumnSort | undefined;
  DataPath?: DataPathSort | undefined;
}
export interface PivotFieldSortOptions {
  FieldId: string | undefined;
  SortBy: PivotTableSortBy | undefined;
}
export interface PivotTableSortConfiguration {
  FieldSortOptions?: PivotFieldSortOptions[] | undefined;
}
export declare const TableBorderStyle: {
  readonly NONE: "NONE";
  readonly SOLID: "SOLID";
};
export type TableBorderStyle =
  (typeof TableBorderStyle)[keyof typeof TableBorderStyle];
export interface TableBorderOptions {
  Color?: string | undefined;
  Thickness?: number | undefined;
  Style?: TableBorderStyle | undefined;
}
export interface TableSideBorderOptions {
  InnerVertical?: TableBorderOptions | undefined;
  InnerHorizontal?: TableBorderOptions | undefined;
  Left?: TableBorderOptions | undefined;
  Right?: TableBorderOptions | undefined;
  Top?: TableBorderOptions | undefined;
  Bottom?: TableBorderOptions | undefined;
}
export interface GlobalTableBorderOptions {
  UniformBorder?: TableBorderOptions | undefined;
  SideSpecificBorder?: TableSideBorderOptions | undefined;
}
export declare const TextWrap: {
  readonly NONE: "NONE";
  readonly WRAP: "WRAP";
};
export type TextWrap = (typeof TextWrap)[keyof typeof TextWrap];
export declare const VerticalTextAlignment: {
  readonly AUTO: "AUTO";
  readonly BOTTOM: "BOTTOM";
  readonly MIDDLE: "MIDDLE";
  readonly TOP: "TOP";
};
export type VerticalTextAlignment =
  (typeof VerticalTextAlignment)[keyof typeof VerticalTextAlignment];
export interface TableCellStyle {
  Visibility?: Visibility | undefined;
  FontConfiguration?: FontConfiguration | undefined;
  TextWrap?: TextWrap | undefined;
  HorizontalTextAlignment?: HorizontalTextAlignment | undefined;
  VerticalTextAlignment?: VerticalTextAlignment | undefined;
  BackgroundColor?: string | undefined;
  Height?: number | undefined;
  Border?: GlobalTableBorderOptions | undefined;
}
export declare const PivotTableMetricPlacement: {
  readonly COLUMN: "COLUMN";
  readonly ROW: "ROW";
};
export type PivotTableMetricPlacement =
  (typeof PivotTableMetricPlacement)[keyof typeof PivotTableMetricPlacement];
export interface RowAlternateColorOptions {
  Status?: WidgetStatus | undefined;
  RowAlternateColors?: string[] | undefined;
  UsePrimaryBackgroundColor?: WidgetStatus | undefined;
}
export interface PivotTableRowsLabelOptions {
  Visibility?: Visibility | undefined;
  CustomLabel?: string | undefined;
}
export declare const PivotTableRowsLayout: {
  readonly HIERARCHY: "HIERARCHY";
  readonly TABULAR: "TABULAR";
};
export type PivotTableRowsLayout =
  (typeof PivotTableRowsLayout)[keyof typeof PivotTableRowsLayout];
export interface PivotTableOptions {
  MetricPlacement?: PivotTableMetricPlacement | undefined;
  SingleMetricVisibility?: Visibility | undefined;
  ColumnNamesVisibility?: Visibility | undefined;
  ToggleButtonsVisibility?: Visibility | undefined;
  ColumnHeaderStyle?: TableCellStyle | undefined;
  RowHeaderStyle?: TableCellStyle | undefined;
  CellStyle?: TableCellStyle | undefined;
  RowFieldNamesStyle?: TableCellStyle | undefined;
  RowAlternateColorOptions?: RowAlternateColorOptions | undefined;
  CollapsedRowDimensionsVisibility?: Visibility | undefined;
  RowsLayout?: PivotTableRowsLayout | undefined;
  RowsLabelOptions?: PivotTableRowsLabelOptions | undefined;
  DefaultCellWidth?: string | undefined;
}
export declare const PivotTableSubtotalLevel: {
  readonly ALL: "ALL";
  readonly CUSTOM: "CUSTOM";
  readonly LAST: "LAST";
};
export type PivotTableSubtotalLevel =
  (typeof PivotTableSubtotalLevel)[keyof typeof PivotTableSubtotalLevel];
export interface PivotTableFieldSubtotalOptions {
  FieldId?: string | undefined;
}
export declare const StyledCellType: {
  readonly METRIC_HEADER: "METRIC_HEADER";
  readonly TOTAL: "TOTAL";
  readonly VALUE: "VALUE";
};
export type StyledCellType =
  (typeof StyledCellType)[keyof typeof StyledCellType];
export interface TableStyleTarget {
  CellType: StyledCellType | undefined;
}
export interface SubtotalOptions {
  TotalsVisibility?: Visibility | undefined;
  CustomLabel?: string | undefined;
  FieldLevel?: PivotTableSubtotalLevel | undefined;
  FieldLevelOptions?: PivotTableFieldSubtotalOptions[] | undefined;
  TotalCellStyle?: TableCellStyle | undefined;
  ValueCellStyle?: TableCellStyle | undefined;
  MetricHeaderCellStyle?: TableCellStyle | undefined;
  StyleTargets?: TableStyleTarget[] | undefined;
}
export declare const TableTotalsPlacement: {
  readonly AUTO: "AUTO";
  readonly END: "END";
  readonly START: "START";
};
export type TableTotalsPlacement =
  (typeof TableTotalsPlacement)[keyof typeof TableTotalsPlacement];
export declare const TableTotalsScrollStatus: {
  readonly PINNED: "PINNED";
  readonly SCROLLED: "SCROLLED";
};
export type TableTotalsScrollStatus =
  (typeof TableTotalsScrollStatus)[keyof typeof TableTotalsScrollStatus];
export declare const SimpleTotalAggregationFunction: {
  readonly AVERAGE: "AVERAGE";
  readonly DEFAULT: "DEFAULT";
  readonly MAX: "MAX";
  readonly MIN: "MIN";
  readonly NONE: "NONE";
  readonly SUM: "SUM";
};
export type SimpleTotalAggregationFunction =
  (typeof SimpleTotalAggregationFunction)[keyof typeof SimpleTotalAggregationFunction];
export interface TotalAggregationFunction {
  SimpleTotalAggregationFunction?: SimpleTotalAggregationFunction | undefined;
}
export interface TotalAggregationOption {
  FieldId: string | undefined;
  TotalAggregationFunction: TotalAggregationFunction | undefined;
}
export interface PivotTotalOptions {
  TotalsVisibility?: Visibility | undefined;
  Placement?: TableTotalsPlacement | undefined;
  ScrollStatus?: TableTotalsScrollStatus | undefined;
  CustomLabel?: string | undefined;
  TotalCellStyle?: TableCellStyle | undefined;
  ValueCellStyle?: TableCellStyle | undefined;
  MetricHeaderCellStyle?: TableCellStyle | undefined;
  TotalAggregationOptions?: TotalAggregationOption[] | undefined;
}
export interface PivotTableTotalOptions {
  RowSubtotalOptions?: SubtotalOptions | undefined;
  ColumnSubtotalOptions?: SubtotalOptions | undefined;
  RowTotalOptions?: PivotTotalOptions | undefined;
  ColumnTotalOptions?: PivotTotalOptions | undefined;
}
export interface PivotTableConfiguration {
  FieldWells?: PivotTableFieldWells | undefined;
  SortConfiguration?: PivotTableSortConfiguration | undefined;
  TableOptions?: PivotTableOptions | undefined;
  TotalOptions?: PivotTableTotalOptions | undefined;
  FieldOptions?: PivotTableFieldOptions | undefined;
  PaginatedReportOptions?: PivotTablePaginatedReportOptions | undefined;
  Interactions?: VisualInteractionOptions | undefined;
}
export declare const ReferenceLineStaticDataConfigurationFilterSensitiveLog: (
  obj: ReferenceLineStaticDataConfiguration
) => any;
export declare const ReferenceLineDataConfigurationFilterSensitiveLog: (
  obj: ReferenceLineDataConfiguration
) => any;
export declare const ReferenceLineValueLabelConfigurationFilterSensitiveLog: (
  obj: ReferenceLineValueLabelConfiguration
) => any;
export declare const ReferenceLineLabelConfigurationFilterSensitiveLog: (
  obj: ReferenceLineLabelConfiguration
) => any;
export declare const ReferenceLineFilterSensitiveLog: (
  obj: ReferenceLine
) => any;
export declare const DataPathValueFilterSensitiveLog: (
  obj: DataPathValue
) => any;
export declare const DataPathColorFilterSensitiveLog: (
  obj: DataPathColor
) => any;
export declare const VisualPaletteFilterSensitiveLog: (
  obj: VisualPalette
) => any;
export declare const BarChartConfigurationFilterSensitiveLog: (
  obj: BarChartConfiguration
) => any;
export declare const BarChartVisualFilterSensitiveLog: (
  obj: BarChartVisual
) => any;
export declare const BoxPlotAggregatedFieldWellsFilterSensitiveLog: (
  obj: BoxPlotAggregatedFieldWells
) => any;
export declare const BoxPlotFieldWellsFilterSensitiveLog: (
  obj: BoxPlotFieldWells
) => any;
export declare const BoxPlotChartConfigurationFilterSensitiveLog: (
  obj: BoxPlotChartConfiguration
) => any;
export declare const BoxPlotVisualFilterSensitiveLog: (
  obj: BoxPlotVisual
) => any;
export declare const ComboChartAggregatedFieldWellsFilterSensitiveLog: (
  obj: ComboChartAggregatedFieldWells
) => any;
export declare const ComboChartFieldWellsFilterSensitiveLog: (
  obj: ComboChartFieldWells
) => any;
export declare const ComboChartConfigurationFilterSensitiveLog: (
  obj: ComboChartConfiguration
) => any;
export declare const ComboChartVisualFilterSensitiveLog: (
  obj: ComboChartVisual
) => any;
export declare const CustomContentVisualFilterSensitiveLog: (
  obj: CustomContentVisual
) => any;
export declare const EmptyVisualFilterSensitiveLog: (obj: EmptyVisual) => any;
export declare const FilledMapAggregatedFieldWellsFilterSensitiveLog: (
  obj: FilledMapAggregatedFieldWells
) => any;
export declare const FilledMapFieldWellsFilterSensitiveLog: (
  obj: FilledMapFieldWells
) => any;
export declare const FilledMapConfigurationFilterSensitiveLog: (
  obj: FilledMapConfiguration
) => any;
export declare const ConditionalFormattingGradientColorFilterSensitiveLog: (
  obj: ConditionalFormattingGradientColor
) => any;
export declare const ConditionalFormattingSolidColorFilterSensitiveLog: (
  obj: ConditionalFormattingSolidColor
) => any;
export declare const ConditionalFormattingColorFilterSensitiveLog: (
  obj: ConditionalFormattingColor
) => any;
export declare const ShapeConditionalFormatFilterSensitiveLog: (
  obj: ShapeConditionalFormat
) => any;
export declare const FilledMapShapeConditionalFormattingFilterSensitiveLog: (
  obj: FilledMapShapeConditionalFormatting
) => any;
export declare const FilledMapConditionalFormattingOptionFilterSensitiveLog: (
  obj: FilledMapConditionalFormattingOption
) => any;
export declare const FilledMapConditionalFormattingFilterSensitiveLog: (
  obj: FilledMapConditionalFormatting
) => any;
export declare const FilledMapVisualFilterSensitiveLog: (
  obj: FilledMapVisual
) => any;
export declare const FunnelChartAggregatedFieldWellsFilterSensitiveLog: (
  obj: FunnelChartAggregatedFieldWells
) => any;
export declare const FunnelChartFieldWellsFilterSensitiveLog: (
  obj: FunnelChartFieldWells
) => any;
export declare const FunnelChartConfigurationFilterSensitiveLog: (
  obj: FunnelChartConfiguration
) => any;
export declare const FunnelChartVisualFilterSensitiveLog: (
  obj: FunnelChartVisual
) => any;
export declare const GaugeChartFieldWellsFilterSensitiveLog: (
  obj: GaugeChartFieldWells
) => any;
export declare const ComparisonFormatConfigurationFilterSensitiveLog: (
  obj: ComparisonFormatConfiguration
) => any;
export declare const ComparisonConfigurationFilterSensitiveLog: (
  obj: ComparisonConfiguration
) => any;
export declare const GaugeChartOptionsFilterSensitiveLog: (
  obj: GaugeChartOptions
) => any;
export declare const GaugeChartConfigurationFilterSensitiveLog: (
  obj: GaugeChartConfiguration
) => any;
export declare const GaugeChartArcConditionalFormattingFilterSensitiveLog: (
  obj: GaugeChartArcConditionalFormatting
) => any;
export declare const ConditionalFormattingCustomIconConditionFilterSensitiveLog: (
  obj: ConditionalFormattingCustomIconCondition
) => any;
export declare const ConditionalFormattingIconSetFilterSensitiveLog: (
  obj: ConditionalFormattingIconSet
) => any;
export declare const ConditionalFormattingIconFilterSensitiveLog: (
  obj: ConditionalFormattingIcon
) => any;
export declare const GaugeChartPrimaryValueConditionalFormattingFilterSensitiveLog: (
  obj: GaugeChartPrimaryValueConditionalFormatting
) => any;
export declare const GaugeChartConditionalFormattingOptionFilterSensitiveLog: (
  obj: GaugeChartConditionalFormattingOption
) => any;
export declare const GaugeChartConditionalFormattingFilterSensitiveLog: (
  obj: GaugeChartConditionalFormatting
) => any;
export declare const GaugeChartVisualFilterSensitiveLog: (
  obj: GaugeChartVisual
) => any;
export declare const GeospatialMapAggregatedFieldWellsFilterSensitiveLog: (
  obj: GeospatialMapAggregatedFieldWells
) => any;
export declare const GeospatialMapFieldWellsFilterSensitiveLog: (
  obj: GeospatialMapFieldWells
) => any;
export declare const GeospatialMapConfigurationFilterSensitiveLog: (
  obj: GeospatialMapConfiguration
) => any;
export declare const GeospatialMapVisualFilterSensitiveLog: (
  obj: GeospatialMapVisual
) => any;
export declare const HeatMapAggregatedFieldWellsFilterSensitiveLog: (
  obj: HeatMapAggregatedFieldWells
) => any;
export declare const HeatMapFieldWellsFilterSensitiveLog: (
  obj: HeatMapFieldWells
) => any;
export declare const HeatMapConfigurationFilterSensitiveLog: (
  obj: HeatMapConfiguration
) => any;
export declare const HeatMapVisualFilterSensitiveLog: (
  obj: HeatMapVisual
) => any;
export declare const HistogramAggregatedFieldWellsFilterSensitiveLog: (
  obj: HistogramAggregatedFieldWells
) => any;
export declare const HistogramFieldWellsFilterSensitiveLog: (
  obj: HistogramFieldWells
) => any;
export declare const HistogramConfigurationFilterSensitiveLog: (
  obj: HistogramConfiguration
) => any;
export declare const HistogramVisualFilterSensitiveLog: (
  obj: HistogramVisual
) => any;
export declare const ForecastComputationFilterSensitiveLog: (
  obj: ForecastComputation
) => any;
export declare const GrowthRateComputationFilterSensitiveLog: (
  obj: GrowthRateComputation
) => any;
export declare const MaximumMinimumComputationFilterSensitiveLog: (
  obj: MaximumMinimumComputation
) => any;
export declare const MetricComparisonComputationFilterSensitiveLog: (
  obj: MetricComparisonComputation
) => any;
export declare const PeriodOverPeriodComputationFilterSensitiveLog: (
  obj: PeriodOverPeriodComputation
) => any;
export declare const PeriodToDateComputationFilterSensitiveLog: (
  obj: PeriodToDateComputation
) => any;
export declare const TopBottomMoversComputationFilterSensitiveLog: (
  obj: TopBottomMoversComputation
) => any;
export declare const TopBottomRankedComputationFilterSensitiveLog: (
  obj: TopBottomRankedComputation
) => any;
export declare const TotalAggregationComputationFilterSensitiveLog: (
  obj: TotalAggregationComputation
) => any;
export declare const UniqueValuesComputationFilterSensitiveLog: (
  obj: UniqueValuesComputation
) => any;
export declare const ComputationFilterSensitiveLog: (obj: Computation) => any;
export declare const InsightConfigurationFilterSensitiveLog: (
  obj: InsightConfiguration
) => any;
export declare const InsightVisualFilterSensitiveLog: (
  obj: InsightVisual
) => any;
export declare const KPIFieldWellsFilterSensitiveLog: (
  obj: KPIFieldWells
) => any;
export declare const KPIOptionsFilterSensitiveLog: (obj: KPIOptions) => any;
export declare const KPIConfigurationFilterSensitiveLog: (
  obj: KPIConfiguration
) => any;
export declare const KPIActualValueConditionalFormattingFilterSensitiveLog: (
  obj: KPIActualValueConditionalFormatting
) => any;
export declare const KPIComparisonValueConditionalFormattingFilterSensitiveLog: (
  obj: KPIComparisonValueConditionalFormatting
) => any;
export declare const KPIPrimaryValueConditionalFormattingFilterSensitiveLog: (
  obj: KPIPrimaryValueConditionalFormatting
) => any;
export declare const KPIProgressBarConditionalFormattingFilterSensitiveLog: (
  obj: KPIProgressBarConditionalFormatting
) => any;
export declare const KPIConditionalFormattingOptionFilterSensitiveLog: (
  obj: KPIConditionalFormattingOption
) => any;
export declare const KPIConditionalFormattingFilterSensitiveLog: (
  obj: KPIConditionalFormatting
) => any;
export declare const KPIVisualFilterSensitiveLog: (obj: KPIVisual) => any;
export declare const LayerCustomActionOperationFilterSensitiveLog: (
  obj: LayerCustomActionOperation
) => any;
export declare const LayerCustomActionFilterSensitiveLog: (
  obj: LayerCustomAction
) => any;
export declare const GeospatialLayerColorFieldFilterSensitiveLog: (
  obj: GeospatialLayerColorField
) => any;
export declare const UnaggregatedFieldFilterSensitiveLog: (
  obj: UnaggregatedField
) => any;
export declare const GeospatialLayerJoinDefinitionFilterSensitiveLog: (
  obj: GeospatialLayerJoinDefinition
) => any;
export declare const GeospatialLayerItemFilterSensitiveLog: (
  obj: GeospatialLayerItem
) => any;
export declare const GeospatialLayerMapConfigurationFilterSensitiveLog: (
  obj: GeospatialLayerMapConfiguration
) => any;
export declare const LayerMapVisualFilterSensitiveLog: (
  obj: LayerMapVisual
) => any;
export declare const LineChartAggregatedFieldWellsFilterSensitiveLog: (
  obj: LineChartAggregatedFieldWells
) => any;
export declare const LineChartFieldWellsFilterSensitiveLog: (
  obj: LineChartFieldWells
) => any;
export declare const DataFieldSeriesItemFilterSensitiveLog: (
  obj: DataFieldSeriesItem
) => any;
export declare const SeriesItemFilterSensitiveLog: (obj: SeriesItem) => any;
export declare const LineChartConfigurationFilterSensitiveLog: (
  obj: LineChartConfiguration
) => any;
export declare const LineChartVisualFilterSensitiveLog: (
  obj: LineChartVisual
) => any;
export declare const PieChartAggregatedFieldWellsFilterSensitiveLog: (
  obj: PieChartAggregatedFieldWells
) => any;
export declare const PieChartFieldWellsFilterSensitiveLog: (
  obj: PieChartFieldWells
) => any;
export declare const PieChartConfigurationFilterSensitiveLog: (
  obj: PieChartConfiguration
) => any;
export declare const PieChartVisualFilterSensitiveLog: (
  obj: PieChartVisual
) => any;
export declare const PivotTableFieldCollapseStateTargetFilterSensitiveLog: (
  obj: PivotTableFieldCollapseStateTarget
) => any;
export declare const PivotTableFieldCollapseStateOptionFilterSensitiveLog: (
  obj: PivotTableFieldCollapseStateOption
) => any;
export declare const PivotTableDataPathOptionFilterSensitiveLog: (
  obj: PivotTableDataPathOption
) => any;
export declare const PivotTableFieldOptionsFilterSensitiveLog: (
  obj: PivotTableFieldOptions
) => any;
export declare const PivotTableAggregatedFieldWellsFilterSensitiveLog: (
  obj: PivotTableAggregatedFieldWells
) => any;
export declare const PivotTableFieldWellsFilterSensitiveLog: (
  obj: PivotTableFieldWells
) => any;
export declare const DataPathSortFilterSensitiveLog: (obj: DataPathSort) => any;
export declare const PivotTableSortByFilterSensitiveLog: (
  obj: PivotTableSortBy
) => any;
export declare const PivotFieldSortOptionsFilterSensitiveLog: (
  obj: PivotFieldSortOptions
) => any;
export declare const PivotTableSortConfigurationFilterSensitiveLog: (
  obj: PivotTableSortConfiguration
) => any;
export declare const PivotTableConfigurationFilterSensitiveLog: (
  obj: PivotTableConfiguration
) => any;
