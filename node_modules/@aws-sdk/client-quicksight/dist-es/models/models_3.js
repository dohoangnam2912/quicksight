import { SENSITIVE_STRING } from "@smithy/smithy-client";
import { CalculatedFieldFilterSensitiveLog, ColumnConfigurationFilterSensitiveLog, ParameterDeclarationFilterSensitiveLog, } from "./models_0";
import { QuickSightServiceException as __BaseException } from "./QuickSightServiceException";
export class ResourceExistsException extends __BaseException {
    name = "ResourceExistsException";
    $fault = "client";
    Message;
    ResourceType;
    RequestId;
    constructor(opts) {
        super({
            name: "ResourceExistsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceExistsException.prototype);
        this.Message = opts.Message;
        this.ResourceType = opts.ResourceType;
        this.RequestId = opts.RequestId;
    }
}
export const CapabilityState = {
    DENY: "DENY",
};
export const ColumnDataType = {
    DATETIME: "DATETIME",
    DECIMAL: "DECIMAL",
    INTEGER: "INTEGER",
    STRING: "STRING",
};
export const ColumnDataSubType = {
    FIXED: "FIXED",
    FLOAT: "FLOAT",
};
export const CategoryFilterFunction = {
    CONTAINS: "CONTAINS",
    EXACT: "EXACT",
};
export const CategoryFilterType = {
    CUSTOM_FILTER: "CUSTOM_FILTER",
    CUSTOM_FILTER_LIST: "CUSTOM_FILTER_LIST",
    FILTER_LIST: "FILTER_LIST",
};
export const ColumnDataRole = {
    DIMENSION: "DIMENSION",
    MEASURE: "MEASURE",
};
export const GeoSpatialCountryCode = {
    US: "US",
};
export const ColumnOrderingType = {
    GREATER_IS_BETTER: "GREATER_IS_BETTER",
    LESSER_IS_BETTER: "LESSER_IS_BETTER",
    SPECIFIED: "SPECIFIED",
};
export const GeoSpatialDataRole = {
    CITY: "CITY",
    COUNTRY: "COUNTRY",
    COUNTY: "COUNTY",
    LATITUDE: "LATITUDE",
    LONGITUDE: "LONGITUDE",
    POSTCODE: "POSTCODE",
    STATE: "STATE",
};
export const ColumnTagName = {
    COLUMN_DESCRIPTION: "COLUMN_DESCRIPTION",
    COLUMN_GEOGRAPHIC_ROLE: "COLUMN_GEOGRAPHIC_ROLE",
};
export const UndefinedSpecifiedValueType = {
    LEAST: "LEAST",
    MOST: "MOST",
};
export class ConcurrentUpdatingException extends __BaseException {
    name = "ConcurrentUpdatingException";
    $fault = "server";
    Message;
    RequestId;
    constructor(opts) {
        super({
            name: "ConcurrentUpdatingException",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, ConcurrentUpdatingException.prototype);
        this.Message = opts.Message;
        this.RequestId = opts.RequestId;
    }
}
export class ResourceUnavailableException extends __BaseException {
    name = "ResourceUnavailableException";
    $fault = "server";
    Message;
    ResourceType;
    RequestId;
    constructor(opts) {
        super({
            name: "ResourceUnavailableException",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceUnavailableException.prototype);
        this.Message = opts.Message;
        this.ResourceType = opts.ResourceType;
        this.RequestId = opts.RequestId;
    }
}
export class PreconditionNotMetException extends __BaseException {
    name = "PreconditionNotMetException";
    $fault = "client";
    Message;
    RequestId;
    constructor(opts) {
        super({
            name: "PreconditionNotMetException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, PreconditionNotMetException.prototype);
        this.Message = opts.Message;
        this.RequestId = opts.RequestId;
    }
}
export const ValidationStrategyMode = {
    LENIENT: "LENIENT",
    STRICT: "STRICT",
};
export class LimitExceededException extends __BaseException {
    name = "LimitExceededException";
    $fault = "client";
    Message;
    ResourceType;
    RequestId;
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, LimitExceededException.prototype);
        this.Message = opts.Message;
        this.ResourceType = opts.ResourceType;
        this.RequestId = opts.RequestId;
    }
}
export class UnsupportedUserEditionException extends __BaseException {
    name = "UnsupportedUserEditionException";
    $fault = "client";
    Message;
    RequestId;
    constructor(opts) {
        super({
            name: "UnsupportedUserEditionException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UnsupportedUserEditionException.prototype);
        this.Message = opts.Message;
        this.RequestId = opts.RequestId;
    }
}
export class InternalServerException extends __BaseException {
    name = "InternalServerException";
    $fault = "server";
    Message;
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, InternalServerException.prototype);
        this.Message = opts.Message;
    }
}
export class InvalidRequestException extends __BaseException {
    name = "InvalidRequestException";
    $fault = "client";
    Message;
    RequestId;
    constructor(opts) {
        super({
            name: "InvalidRequestException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidRequestException.prototype);
        this.Message = opts.Message;
        this.RequestId = opts.RequestId;
    }
}
export const DashboardUIState = {
    COLLAPSED: "COLLAPSED",
    EXPANDED: "EXPANDED",
};
export const DatasetParameterValueType = {
    MULTI_VALUED: "MULTI_VALUED",
    SINGLE_VALUED: "SINGLE_VALUED",
};
export const DataSetImportMode = {
    DIRECT_QUERY: "DIRECT_QUERY",
    SPICE: "SPICE",
};
export var TransformOperation;
(function (TransformOperation) {
    TransformOperation.visit = (value, visitor) => {
        if (value.ProjectOperation !== undefined)
            return visitor.ProjectOperation(value.ProjectOperation);
        if (value.FilterOperation !== undefined)
            return visitor.FilterOperation(value.FilterOperation);
        if (value.CreateColumnsOperation !== undefined)
            return visitor.CreateColumnsOperation(value.CreateColumnsOperation);
        if (value.RenameColumnOperation !== undefined)
            return visitor.RenameColumnOperation(value.RenameColumnOperation);
        if (value.CastColumnTypeOperation !== undefined)
            return visitor.CastColumnTypeOperation(value.CastColumnTypeOperation);
        if (value.TagColumnOperation !== undefined)
            return visitor.TagColumnOperation(value.TagColumnOperation);
        if (value.UntagColumnOperation !== undefined)
            return visitor.UntagColumnOperation(value.UntagColumnOperation);
        if (value.OverrideDatasetParameterOperation !== undefined)
            return visitor.OverrideDatasetParameterOperation(value.OverrideDatasetParameterOperation);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(TransformOperation || (TransformOperation = {}));
export const JoinType = {
    INNER: "INNER",
    LEFT: "LEFT",
    OUTER: "OUTER",
    RIGHT: "RIGHT",
};
export const InputColumnDataType = {
    BIT: "BIT",
    BOOLEAN: "BOOLEAN",
    DATETIME: "DATETIME",
    DECIMAL: "DECIMAL",
    INTEGER: "INTEGER",
    JSON: "JSON",
    STRING: "STRING",
};
export const FileFormat = {
    CLF: "CLF",
    CSV: "CSV",
    ELF: "ELF",
    JSON: "JSON",
    TSV: "TSV",
    XLSX: "XLSX",
};
export const TextQualifier = {
    DOUBLE_QUOTE: "DOUBLE_QUOTE",
    SINGLE_QUOTE: "SINGLE_QUOTE",
};
export var PhysicalTable;
(function (PhysicalTable) {
    PhysicalTable.visit = (value, visitor) => {
        if (value.RelationalTable !== undefined)
            return visitor.RelationalTable(value.RelationalTable);
        if (value.CustomSql !== undefined)
            return visitor.CustomSql(value.CustomSql);
        if (value.S3Source !== undefined)
            return visitor.S3Source(value.S3Source);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(PhysicalTable || (PhysicalTable = {}));
export const RowLevelPermissionFormatVersion = {
    VERSION_1: "VERSION_1",
    VERSION_2: "VERSION_2",
};
export const RowLevelPermissionPolicy = {
    DENY_ACCESS: "DENY_ACCESS",
    GRANT_ACCESS: "GRANT_ACCESS",
};
export const Status = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const DataSetUseAs = {
    RLS_RULES: "RLS_RULES",
};
export const DataSourceType = {
    ADOBE_ANALYTICS: "ADOBE_ANALYTICS",
    AMAZON_ELASTICSEARCH: "AMAZON_ELASTICSEARCH",
    AMAZON_OPENSEARCH: "AMAZON_OPENSEARCH",
    ATHENA: "ATHENA",
    AURORA: "AURORA",
    AURORA_POSTGRESQL: "AURORA_POSTGRESQL",
    AWS_IOT_ANALYTICS: "AWS_IOT_ANALYTICS",
    BIGQUERY: "BIGQUERY",
    DATABRICKS: "DATABRICKS",
    EXASOL: "EXASOL",
    GITHUB: "GITHUB",
    JIRA: "JIRA",
    MARIADB: "MARIADB",
    MYSQL: "MYSQL",
    ORACLE: "ORACLE",
    POSTGRESQL: "POSTGRESQL",
    PRESTO: "PRESTO",
    REDSHIFT: "REDSHIFT",
    S3: "S3",
    SALESFORCE: "SALESFORCE",
    SERVICENOW: "SERVICENOW",
    SNOWFLAKE: "SNOWFLAKE",
    SPARK: "SPARK",
    SQLSERVER: "SQLSERVER",
    STARBURST: "STARBURST",
    TERADATA: "TERADATA",
    TIMESTREAM: "TIMESTREAM",
    TRINO: "TRINO",
    TWITTER: "TWITTER",
};
export class CustomerManagedKeyUnavailableException extends __BaseException {
    name = "CustomerManagedKeyUnavailableException";
    $fault = "client";
    Message;
    RequestId;
    constructor(opts) {
        super({
            name: "CustomerManagedKeyUnavailableException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, CustomerManagedKeyUnavailableException.prototype);
        this.Message = opts.Message;
        this.RequestId = opts.RequestId;
    }
}
export const FolderType = {
    RESTRICTED: "RESTRICTED",
    SHARED: "SHARED",
};
export const SharingModel = {
    ACCOUNT: "ACCOUNT",
    NAMESPACE: "NAMESPACE",
};
export const MemberType = {
    ANALYSIS: "ANALYSIS",
    DASHBOARD: "DASHBOARD",
    DATASET: "DATASET",
    DATASOURCE: "DATASOURCE",
    TOPIC: "TOPIC",
};
export const IngestionType = {
    FULL_REFRESH: "FULL_REFRESH",
    INCREMENTAL_REFRESH: "INCREMENTAL_REFRESH",
};
export const IngestionStatus = {
    CANCELLED: "CANCELLED",
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    INITIALIZED: "INITIALIZED",
    QUEUED: "QUEUED",
    RUNNING: "RUNNING",
};
export const IdentityStore = {
    QUICKSIGHT: "QUICKSIGHT",
};
export const NamespaceStatus = {
    CREATED: "CREATED",
    CREATING: "CREATING",
    DELETING: "DELETING",
    NON_RETRYABLE_FAILURE: "NON_RETRYABLE_FAILURE",
    RETRYABLE_FAILURE: "RETRYABLE_FAILURE",
};
export const RefreshInterval = {
    DAILY: "DAILY",
    HOURLY: "HOURLY",
    MINUTE15: "MINUTE15",
    MINUTE30: "MINUTE30",
    MONTHLY: "MONTHLY",
    WEEKLY: "WEEKLY",
};
export const DayOfWeek = {
    FRIDAY: "FRIDAY",
    MONDAY: "MONDAY",
    SATURDAY: "SATURDAY",
    SUNDAY: "SUNDAY",
    THURSDAY: "THURSDAY",
    TUESDAY: "TUESDAY",
    WEDNESDAY: "WEDNESDAY",
};
export const Role = {
    ADMIN: "ADMIN",
    ADMIN_PRO: "ADMIN_PRO",
    AUTHOR: "AUTHOR",
    AUTHOR_PRO: "AUTHOR_PRO",
    READER: "READER",
    READER_PRO: "READER_PRO",
};
export const DefaultAggregation = {
    AVERAGE: "AVERAGE",
    COUNT: "COUNT",
    DISTINCT_COUNT: "DISTINCT_COUNT",
    MAX: "MAX",
    MEDIAN: "MEDIAN",
    MIN: "MIN",
    STDEV: "STDEV",
    STDEVP: "STDEVP",
    SUM: "SUM",
    VAR: "VAR",
    VARP: "VARP",
};
export const NamedFilterType = {
    CATEGORY_FILTER: "CATEGORY_FILTER",
    DATE_RANGE_FILTER: "DATE_RANGE_FILTER",
    NUMERIC_EQUALITY_FILTER: "NUMERIC_EQUALITY_FILTER",
    NUMERIC_RANGE_FILTER: "NUMERIC_RANGE_FILTER",
    RELATIVE_DATE_FILTER: "RELATIVE_DATE_FILTER",
};
export const NamedFilterAggType = {
    AVERAGE: "AVERAGE",
    COUNT: "COUNT",
    DISTINCT_COUNT: "DISTINCT_COUNT",
    MAX: "MAX",
    MEDIAN: "MEDIAN",
    MIN: "MIN",
    NO_AGGREGATION: "NO_AGGREGATION",
    STDEV: "STDEV",
    STDEVP: "STDEVP",
    SUM: "SUM",
    VAR: "VAR",
    VARP: "VARP",
};
export const TopicRelativeDateFilterFunction = {
    LAST: "LAST",
    NEXT: "NEXT",
    NOW: "NOW",
    PREVIOUS: "PREVIOUS",
    THIS: "THIS",
};
export const NamedEntityAggType = {
    AVERAGE: "AVERAGE",
    COUNT: "COUNT",
    CUSTOM: "CUSTOM",
    DISTINCT_COUNT: "DISTINCT_COUNT",
    MAX: "MAX",
    MEDIAN: "MEDIAN",
    MIN: "MIN",
    PERCENTILE: "PERCENTILE",
    STDEV: "STDEV",
    STDEVP: "STDEVP",
    SUM: "SUM",
    VAR: "VAR",
    VARP: "VARP",
};
export const PropertyRole = {
    ID: "ID",
    PRIMARY: "PRIMARY",
};
export const PropertyUsage = {
    DIMENSION: "DIMENSION",
    INHERIT: "INHERIT",
    MEASURE: "MEASURE",
};
export const TopicUserExperienceVersion = {
    LEGACY: "LEGACY",
    NEW_READER_EXPERIENCE: "NEW_READER_EXPERIENCE",
};
export const TopicScheduleType = {
    DAILY: "DAILY",
    HOURLY: "HOURLY",
    MONTHLY: "MONTHLY",
    WEEKLY: "WEEKLY",
};
export const VPCConnectionAvailabilityStatus = {
    AVAILABLE: "AVAILABLE",
    PARTIALLY_AVAILABLE: "PARTIALLY_AVAILABLE",
    UNAVAILABLE: "UNAVAILABLE",
};
export const VPCConnectionResourceStatus = {
    CREATION_FAILED: "CREATION_FAILED",
    CREATION_IN_PROGRESS: "CREATION_IN_PROGRESS",
    CREATION_SUCCESSFUL: "CREATION_SUCCESSFUL",
    DELETED: "DELETED",
    DELETION_FAILED: "DELETION_FAILED",
    DELETION_IN_PROGRESS: "DELETION_IN_PROGRESS",
    UPDATE_FAILED: "UPDATE_FAILED",
    UPDATE_IN_PROGRESS: "UPDATE_IN_PROGRESS",
    UPDATE_SUCCESSFUL: "UPDATE_SUCCESSFUL",
};
export const DashboardErrorType = {
    ACCESS_DENIED: "ACCESS_DENIED",
    COLUMN_GEOGRAPHIC_ROLE_MISMATCH: "COLUMN_GEOGRAPHIC_ROLE_MISMATCH",
    COLUMN_REPLACEMENT_MISSING: "COLUMN_REPLACEMENT_MISSING",
    COLUMN_TYPE_MISMATCH: "COLUMN_TYPE_MISMATCH",
    DATA_SET_NOT_FOUND: "DATA_SET_NOT_FOUND",
    INTERNAL_FAILURE: "INTERNAL_FAILURE",
    PARAMETER_NOT_FOUND: "PARAMETER_NOT_FOUND",
    PARAMETER_TYPE_INVALID: "PARAMETER_TYPE_INVALID",
    PARAMETER_VALUE_INCOMPATIBLE: "PARAMETER_VALUE_INCOMPATIBLE",
    SOURCE_NOT_FOUND: "SOURCE_NOT_FOUND",
};
export const DashboardFilterAttribute = {
    DASHBOARD_NAME: "DASHBOARD_NAME",
    DIRECT_QUICKSIGHT_OWNER: "DIRECT_QUICKSIGHT_OWNER",
    DIRECT_QUICKSIGHT_SOLE_OWNER: "DIRECT_QUICKSIGHT_SOLE_OWNER",
    DIRECT_QUICKSIGHT_VIEWER_OR_OWNER: "DIRECT_QUICKSIGHT_VIEWER_OR_OWNER",
    QUICKSIGHT_OWNER: "QUICKSIGHT_OWNER",
    QUICKSIGHT_USER: "QUICKSIGHT_USER",
    QUICKSIGHT_VIEWER_OR_OWNER: "QUICKSIGHT_VIEWER_OR_OWNER",
};
export const DashboardsQAStatus = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const DataSetFilterAttribute = {
    DATASET_NAME: "DATASET_NAME",
    DIRECT_QUICKSIGHT_OWNER: "DIRECT_QUICKSIGHT_OWNER",
    DIRECT_QUICKSIGHT_SOLE_OWNER: "DIRECT_QUICKSIGHT_SOLE_OWNER",
    DIRECT_QUICKSIGHT_VIEWER_OR_OWNER: "DIRECT_QUICKSIGHT_VIEWER_OR_OWNER",
    QUICKSIGHT_OWNER: "QUICKSIGHT_OWNER",
    QUICKSIGHT_VIEWER_OR_OWNER: "QUICKSIGHT_VIEWER_OR_OWNER",
};
export const DataSourceErrorInfoType = {
    ACCESS_DENIED: "ACCESS_DENIED",
    CONFLICT: "CONFLICT",
    COPY_SOURCE_NOT_FOUND: "COPY_SOURCE_NOT_FOUND",
    ENGINE_VERSION_NOT_SUPPORTED: "ENGINE_VERSION_NOT_SUPPORTED",
    GENERIC_SQL_FAILURE: "GENERIC_SQL_FAILURE",
    TIMEOUT: "TIMEOUT",
    UNKNOWN: "UNKNOWN",
    UNKNOWN_HOST: "UNKNOWN_HOST",
};
export const DataSourceFilterAttribute = {
    DATASOURCE_NAME: "DATASOURCE_NAME",
    DIRECT_QUICKSIGHT_OWNER: "DIRECT_QUICKSIGHT_OWNER",
    DIRECT_QUICKSIGHT_SOLE_OWNER: "DIRECT_QUICKSIGHT_SOLE_OWNER",
    DIRECT_QUICKSIGHT_VIEWER_OR_OWNER: "DIRECT_QUICKSIGHT_VIEWER_OR_OWNER",
};
export const CalculatedColumnFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Expression && { Expression: SENSITIVE_STRING }),
});
export const ColumnDescriptionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Text && { Text: SENSITIVE_STRING }),
});
export const ColumnTagFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ColumnDescription && { ColumnDescription: ColumnDescriptionFilterSensitiveLog(obj.ColumnDescription) }),
});
export const DateTimeParameterFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Values && { Values: SENSITIVE_STRING }),
});
export const DecimalParameterFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Values && { Values: SENSITIVE_STRING }),
});
export const IntegerParameterFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Values && { Values: SENSITIVE_STRING }),
});
export const StringParameterFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Values && { Values: SENSITIVE_STRING }),
});
export const _ParametersFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.StringParameters && {
        StringParameters: obj.StringParameters.map((item) => StringParameterFilterSensitiveLog(item)),
    }),
    ...(obj.IntegerParameters && {
        IntegerParameters: obj.IntegerParameters.map((item) => IntegerParameterFilterSensitiveLog(item)),
    }),
    ...(obj.DecimalParameters && {
        DecimalParameters: obj.DecimalParameters.map((item) => DecimalParameterFilterSensitiveLog(item)),
    }),
    ...(obj.DateTimeParameters && {
        DateTimeParameters: obj.DateTimeParameters.map((item) => DateTimeParameterFilterSensitiveLog(item)),
    }),
});
export const CreateAnalysisRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Parameters && { Parameters: _ParametersFilterSensitiveLog(obj.Parameters) }),
});
export const CreateColumnsOperationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Columns && { Columns: obj.Columns.map((item) => CalculatedColumnFilterSensitiveLog(item)) }),
});
export const DashboardVersionDefinitionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.CalculatedFields && {
        CalculatedFields: obj.CalculatedFields.map((item) => CalculatedFieldFilterSensitiveLog(item)),
    }),
    ...(obj.ParameterDeclarations && {
        ParameterDeclarations: obj.ParameterDeclarations.map((item) => ParameterDeclarationFilterSensitiveLog(item)),
    }),
    ...(obj.ColumnConfigurations && {
        ColumnConfigurations: obj.ColumnConfigurations.map((item) => ColumnConfigurationFilterSensitiveLog(item)),
    }),
});
export const CreateDashboardRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Parameters && { Parameters: _ParametersFilterSensitiveLog(obj.Parameters) }),
});
export const FilterOperationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ConditionExpression && { ConditionExpression: SENSITIVE_STRING }),
});
export const TagColumnOperationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Tags && { Tags: obj.Tags.map((item) => ColumnTagFilterSensitiveLog(item)) }),
});
export const TransformOperationFilterSensitiveLog = (obj) => {
    if (obj.ProjectOperation !== undefined)
        return { ProjectOperation: obj.ProjectOperation };
    if (obj.FilterOperation !== undefined)
        return { FilterOperation: FilterOperationFilterSensitiveLog(obj.FilterOperation) };
    if (obj.CreateColumnsOperation !== undefined)
        return { CreateColumnsOperation: CreateColumnsOperationFilterSensitiveLog(obj.CreateColumnsOperation) };
    if (obj.RenameColumnOperation !== undefined)
        return { RenameColumnOperation: obj.RenameColumnOperation };
    if (obj.CastColumnTypeOperation !== undefined)
        return { CastColumnTypeOperation: obj.CastColumnTypeOperation };
    if (obj.TagColumnOperation !== undefined)
        return { TagColumnOperation: TagColumnOperationFilterSensitiveLog(obj.TagColumnOperation) };
    if (obj.UntagColumnOperation !== undefined)
        return { UntagColumnOperation: obj.UntagColumnOperation };
    if (obj.OverrideDatasetParameterOperation !== undefined)
        return { OverrideDatasetParameterOperation: obj.OverrideDatasetParameterOperation };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
export const LogicalTableFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.DataTransforms && {
        DataTransforms: obj.DataTransforms.map((item) => TransformOperationFilterSensitiveLog(item)),
    }),
});
export const RowLevelPermissionTagRuleFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.MatchAllValue && { MatchAllValue: SENSITIVE_STRING }),
});
export const RowLevelPermissionTagConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.TagRules && { TagRules: obj.TagRules.map((item) => RowLevelPermissionTagRuleFilterSensitiveLog(item)) }),
});
export const CreateDataSetRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.PhysicalTableMap && {
        PhysicalTableMap: Object.entries(obj.PhysicalTableMap).reduce((acc, [key, value]) => ((acc[key] = value), acc), {}),
    }),
    ...(obj.LogicalTableMap && {
        LogicalTableMap: Object.entries(obj.LogicalTableMap).reduce((acc, [key, value]) => ((acc[key] = LogicalTableFilterSensitiveLog(value)), acc), {}),
    }),
    ...(obj.RowLevelPermissionTagConfiguration && {
        RowLevelPermissionTagConfiguration: RowLevelPermissionTagConfigurationFilterSensitiveLog(obj.RowLevelPermissionTagConfiguration),
    }),
});
export const DataSourceCredentialsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.CredentialPair && { CredentialPair: obj.CredentialPair }),
});
export const CreateDataSourceRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.DataSourceParameters && { DataSourceParameters: obj.DataSourceParameters }),
    ...(obj.Credentials && { Credentials: SENSITIVE_STRING }),
});
export const TemplateVersionDefinitionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.CalculatedFields && {
        CalculatedFields: obj.CalculatedFields.map((item) => CalculatedFieldFilterSensitiveLog(item)),
    }),
    ...(obj.ParameterDeclarations && {
        ParameterDeclarations: obj.ParameterDeclarations.map((item) => ParameterDeclarationFilterSensitiveLog(item)),
    }),
    ...(obj.ColumnConfigurations && {
        ColumnConfigurations: obj.ColumnConfigurations.map((item) => ColumnConfigurationFilterSensitiveLog(item)),
    }),
});
export const CreateTemplateRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const SemanticTypeFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.TruthyCellValue && { TruthyCellValue: SENSITIVE_STRING }),
    ...(obj.TruthyCellValueSynonyms && { TruthyCellValueSynonyms: SENSITIVE_STRING }),
    ...(obj.FalseyCellValue && { FalseyCellValue: SENSITIVE_STRING }),
    ...(obj.FalseyCellValueSynonyms && { FalseyCellValueSynonyms: SENSITIVE_STRING }),
});
export const TopicCalculatedFieldFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Expression && { Expression: SENSITIVE_STRING }),
    ...(obj.SemanticType && { SemanticType: SemanticTypeFilterSensitiveLog(obj.SemanticType) }),
});
export const TopicColumnFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SemanticType && { SemanticType: SemanticTypeFilterSensitiveLog(obj.SemanticType) }),
});
export const TopicCategoryFilterConstantFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const TopicCategoryFilterFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Constant && { Constant: SENSITIVE_STRING }),
});
export const TopicRangeFilterConstantFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const TopicDateRangeFilterFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Constant && { Constant: SENSITIVE_STRING }),
});
export const TopicSingularFilterConstantFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const TopicNumericEqualityFilterFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Constant && { Constant: SENSITIVE_STRING }),
});
export const TopicNumericRangeFilterFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Constant && { Constant: SENSITIVE_STRING }),
});
export const TopicRelativeDateFilterFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Constant && { Constant: SENSITIVE_STRING }),
});
export const TopicFilterFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.CategoryFilter && { CategoryFilter: TopicCategoryFilterFilterSensitiveLog(obj.CategoryFilter) }),
    ...(obj.NumericEqualityFilter && {
        NumericEqualityFilter: TopicNumericEqualityFilterFilterSensitiveLog(obj.NumericEqualityFilter),
    }),
    ...(obj.NumericRangeFilter && {
        NumericRangeFilter: TopicNumericRangeFilterFilterSensitiveLog(obj.NumericRangeFilter),
    }),
    ...(obj.DateRangeFilter && { DateRangeFilter: TopicDateRangeFilterFilterSensitiveLog(obj.DateRangeFilter) }),
    ...(obj.RelativeDateFilter && {
        RelativeDateFilter: TopicRelativeDateFilterFilterSensitiveLog(obj.RelativeDateFilter),
    }),
});
export const DatasetMetadataFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Filters && { Filters: obj.Filters.map((item) => TopicFilterFilterSensitiveLog(item)) }),
    ...(obj.Columns && { Columns: obj.Columns.map((item) => TopicColumnFilterSensitiveLog(item)) }),
    ...(obj.CalculatedFields && {
        CalculatedFields: obj.CalculatedFields.map((item) => TopicCalculatedFieldFilterSensitiveLog(item)),
    }),
});
export const TopicDetailsFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CreateTopicRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DashboardVersionFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DashboardFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const OutputColumnFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Description && { Description: SENSITIVE_STRING }),
});
export const DataSetFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.PhysicalTableMap && {
        PhysicalTableMap: Object.entries(obj.PhysicalTableMap).reduce((acc, [key, value]) => ((acc[key] = value), acc), {}),
    }),
    ...(obj.LogicalTableMap && {
        LogicalTableMap: Object.entries(obj.LogicalTableMap).reduce((acc, [key, value]) => ((acc[key] = LogicalTableFilterSensitiveLog(value)), acc), {}),
    }),
    ...(obj.OutputColumns && { OutputColumns: obj.OutputColumns.map((item) => OutputColumnFilterSensitiveLog(item)) }),
    ...(obj.RowLevelPermissionTagConfiguration && {
        RowLevelPermissionTagConfiguration: RowLevelPermissionTagConfigurationFilterSensitiveLog(obj.RowLevelPermissionTagConfiguration),
    }),
});
