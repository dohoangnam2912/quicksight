import { SENSITIVE_STRING } from "@smithy/smithy-client";
import { AssetBundleImportSourceDescriptionFilterSensitiveLog, } from "./models_2";
import { _ParametersFilterSensitiveLog, DataSetFilterSensitiveLog, } from "./models_3";
import { QuickSightServiceException as __BaseException } from "./QuickSightServiceException";
export const IncludeFolderMembers = {
    NONE: "NONE",
    ONE_LEVEL: "ONE_LEVEL",
    RECURSE: "RECURSE",
};
export const SnapshotJobStatus = {
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    QUEUED: "QUEUED",
    RUNNING: "RUNNING",
};
export class InvalidNextTokenException extends __BaseException {
    name = "InvalidNextTokenException";
    $fault = "client";
    Message;
    RequestId;
    constructor(opts) {
        super({
            name: "InvalidNextTokenException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidNextTokenException.prototype);
        this.Message = opts.Message;
        this.RequestId = opts.RequestId;
    }
}
export const IngestionErrorType = {
    ACCOUNT_CAPACITY_LIMIT_EXCEEDED: "ACCOUNT_CAPACITY_LIMIT_EXCEEDED",
    CONNECTION_FAILURE: "CONNECTION_FAILURE",
    CURSOR_NOT_ENABLED: "CURSOR_NOT_ENABLED",
    CUSTOMER_ERROR: "CUSTOMER_ERROR",
    DATA_SET_DELETED: "DATA_SET_DELETED",
    DATA_SET_NOT_SPICE: "DATA_SET_NOT_SPICE",
    DATA_SET_SIZE_LIMIT_EXCEEDED: "DATA_SET_SIZE_LIMIT_EXCEEDED",
    DATA_SOURCE_AUTH_FAILED: "DATA_SOURCE_AUTH_FAILED",
    DATA_SOURCE_CONNECTION_FAILED: "DATA_SOURCE_CONNECTION_FAILED",
    DATA_SOURCE_NOT_FOUND: "DATA_SOURCE_NOT_FOUND",
    DATA_TOLERANCE_EXCEPTION: "DATA_TOLERANCE_EXCEPTION",
    DUPLICATE_COLUMN_NAMES_FOUND: "DUPLICATE_COLUMN_NAMES_FOUND",
    ELASTICSEARCH_CURSOR_NOT_ENABLED: "ELASTICSEARCH_CURSOR_NOT_ENABLED",
    FAILURE_TO_ASSUME_ROLE: "FAILURE_TO_ASSUME_ROLE",
    FAILURE_TO_PROCESS_JSON_FILE: "FAILURE_TO_PROCESS_JSON_FILE",
    IAM_ROLE_NOT_AVAILABLE: "IAM_ROLE_NOT_AVAILABLE",
    INGESTION_CANCELED: "INGESTION_CANCELED",
    INGESTION_SUPERSEDED: "INGESTION_SUPERSEDED",
    INTERNAL_SERVICE_ERROR: "INTERNAL_SERVICE_ERROR",
    INVALID_DATAPREP_SYNTAX: "INVALID_DATAPREP_SYNTAX",
    INVALID_DATA_SOURCE_CONFIG: "INVALID_DATA_SOURCE_CONFIG",
    INVALID_DATE_FORMAT: "INVALID_DATE_FORMAT",
    IOT_DATA_SET_FILE_EMPTY: "IOT_DATA_SET_FILE_EMPTY",
    IOT_FILE_NOT_FOUND: "IOT_FILE_NOT_FOUND",
    OAUTH_TOKEN_FAILURE: "OAUTH_TOKEN_FAILURE",
    PASSWORD_AUTHENTICATION_FAILURE: "PASSWORD_AUTHENTICATION_FAILURE",
    PERMISSION_DENIED: "PERMISSION_DENIED",
    PERMISSION_NOT_FOUND: "PERMISSION_NOT_FOUND",
    QUERY_TIMEOUT: "QUERY_TIMEOUT",
    REFRESH_SUPPRESSED_BY_EDIT: "REFRESH_SUPPRESSED_BY_EDIT",
    ROW_SIZE_LIMIT_EXCEEDED: "ROW_SIZE_LIMIT_EXCEEDED",
    S3_FILE_INACCESSIBLE: "S3_FILE_INACCESSIBLE",
    S3_MANIFEST_ERROR: "S3_MANIFEST_ERROR",
    S3_UPLOADED_FILE_DELETED: "S3_UPLOADED_FILE_DELETED",
    SOURCE_API_LIMIT_EXCEEDED_FAILURE: "SOURCE_API_LIMIT_EXCEEDED_FAILURE",
    SOURCE_RESOURCE_LIMIT_EXCEEDED: "SOURCE_RESOURCE_LIMIT_EXCEEDED",
    SPICE_TABLE_NOT_FOUND: "SPICE_TABLE_NOT_FOUND",
    SQL_EXCEPTION: "SQL_EXCEPTION",
    SQL_INVALID_PARAMETER_VALUE: "SQL_INVALID_PARAMETER_VALUE",
    SQL_NUMERIC_OVERFLOW: "SQL_NUMERIC_OVERFLOW",
    SQL_SCHEMA_MISMATCH_ERROR: "SQL_SCHEMA_MISMATCH_ERROR",
    SQL_TABLE_NOT_FOUND: "SQL_TABLE_NOT_FOUND",
    SSL_CERTIFICATE_VALIDATION_FAILURE: "SSL_CERTIFICATE_VALIDATION_FAILURE",
    UNRESOLVABLE_HOST: "UNRESOLVABLE_HOST",
    UNROUTABLE_HOST: "UNROUTABLE_HOST",
};
export const IngestionRequestSource = {
    MANUAL: "MANUAL",
    SCHEDULED: "SCHEDULED",
};
export const IngestionRequestType = {
    EDIT: "EDIT",
    FULL_REFRESH: "FULL_REFRESH",
    INCREMENTAL_REFRESH: "INCREMENTAL_REFRESH",
    INITIAL_INGESTION: "INITIAL_INGESTION",
};
export const NamespaceErrorType = {
    INTERNAL_SERVICE_ERROR: "INTERNAL_SERVICE_ERROR",
    PERMISSION_DENIED: "PERMISSION_DENIED",
};
export const PersonalizationMode = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const QSearchStatus = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const TemplateErrorType = {
    ACCESS_DENIED: "ACCESS_DENIED",
    DATA_SET_NOT_FOUND: "DATA_SET_NOT_FOUND",
    INTERNAL_FAILURE: "INTERNAL_FAILURE",
    SOURCE_NOT_FOUND: "SOURCE_NOT_FOUND",
};
export const ThemeType = {
    ALL: "ALL",
    CUSTOM: "CUSTOM",
    QUICKSIGHT: "QUICKSIGHT",
};
export const ThemeErrorType = {
    INTERNAL_FAILURE: "INTERNAL_FAILURE",
};
export const TopicRefreshStatus = {
    CANCELLED: "CANCELLED",
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    INITIALIZED: "INITIALIZED",
    RUNNING: "RUNNING",
};
export const IdentityType = {
    IAM: "IAM",
    IAM_IDENTITY_CENTER: "IAM_IDENTITY_CENTER",
    QUICKSIGHT: "QUICKSIGHT",
};
export const UserRole = {
    ADMIN: "ADMIN",
    ADMIN_PRO: "ADMIN_PRO",
    AUTHOR: "AUTHOR",
    AUTHOR_PRO: "AUTHOR_PRO",
    READER: "READER",
    READER_PRO: "READER_PRO",
    RESTRICTED_AUTHOR: "RESTRICTED_AUTHOR",
    RESTRICTED_READER: "RESTRICTED_READER",
};
export const NetworkInterfaceStatus = {
    ATTACHMENT_FAILED_ROLLBACK_FAILED: "ATTACHMENT_FAILED_ROLLBACK_FAILED",
    AVAILABLE: "AVAILABLE",
    CREATING: "CREATING",
    CREATION_FAILED: "CREATION_FAILED",
    DELETED: "DELETED",
    DELETING: "DELETING",
    DELETION_FAILED: "DELETION_FAILED",
    DELETION_SCHEDULED: "DELETION_SCHEDULED",
    UPDATE_FAILED: "UPDATE_FAILED",
    UPDATING: "UPDATING",
};
export class DomainNotWhitelistedException extends __BaseException {
    name = "DomainNotWhitelistedException";
    $fault = "client";
    Message;
    RequestId;
    constructor(opts) {
        super({
            name: "DomainNotWhitelistedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, DomainNotWhitelistedException.prototype);
        this.Message = opts.Message;
        this.RequestId = opts.RequestId;
    }
}
export const EmbeddingIdentityType = {
    ANONYMOUS: "ANONYMOUS",
    IAM: "IAM",
    QUICKSIGHT: "QUICKSIGHT",
};
export const FolderFilterAttribute = {
    DIRECT_QUICKSIGHT_OWNER: "DIRECT_QUICKSIGHT_OWNER",
    DIRECT_QUICKSIGHT_SOLE_OWNER: "DIRECT_QUICKSIGHT_SOLE_OWNER",
    DIRECT_QUICKSIGHT_VIEWER_OR_OWNER: "DIRECT_QUICKSIGHT_VIEWER_OR_OWNER",
    FOLDER_NAME: "FOLDER_NAME",
    PARENT_FOLDER_ARN: "PARENT_FOLDER_ARN",
    QUICKSIGHT_OWNER: "QUICKSIGHT_OWNER",
    QUICKSIGHT_VIEWER_OR_OWNER: "QUICKSIGHT_VIEWER_OR_OWNER",
};
export const GeneratedAnswerStatus = {
    ANSWER_DOWNGRADE: "ANSWER_DOWNGRADE",
    ANSWER_GENERATED: "ANSWER_GENERATED",
    ANSWER_RETRIEVED: "ANSWER_RETRIEVED",
};
export class SessionLifetimeInMinutesInvalidException extends __BaseException {
    name = "SessionLifetimeInMinutesInvalidException";
    $fault = "client";
    Message;
    RequestId;
    constructor(opts) {
        super({
            name: "SessionLifetimeInMinutesInvalidException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, SessionLifetimeInMinutesInvalidException.prototype);
        this.Message = opts.Message;
        this.RequestId = opts.RequestId;
    }
}
export class UnsupportedPricingPlanException extends __BaseException {
    name = "UnsupportedPricingPlanException";
    $fault = "client";
    Message;
    RequestId;
    constructor(opts) {
        super({
            name: "UnsupportedPricingPlanException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UnsupportedPricingPlanException.prototype);
        this.Message = opts.Message;
        this.RequestId = opts.RequestId;
    }
}
export class QuickSightUserNotFoundException extends __BaseException {
    name = "QuickSightUserNotFoundException";
    $fault = "client";
    Message;
    RequestId;
    constructor(opts) {
        super({
            name: "QuickSightUserNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, QuickSightUserNotFoundException.prototype);
        this.Message = opts.Message;
        this.RequestId = opts.RequestId;
    }
}
export class IdentityTypeNotSupportedException extends __BaseException {
    name = "IdentityTypeNotSupportedException";
    $fault = "client";
    Message;
    RequestId;
    constructor(opts) {
        super({
            name: "IdentityTypeNotSupportedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, IdentityTypeNotSupportedException.prototype);
        this.Message = opts.Message;
        this.RequestId = opts.RequestId;
    }
}
export const GroupFilterAttribute = {
    GROUP_NAME: "GROUP_NAME",
};
export const GroupFilterOperator = {
    StartsWith: "StartsWith",
};
export const IncludeGeneratedAnswer = {
    EXCLUDE: "EXCLUDE",
    INCLUDE: "INCLUDE",
};
export const IncludeQuickSightQIndex = {
    EXCLUDE: "EXCLUDE",
    INCLUDE: "INCLUDE",
};
export const QAResultType = {
    DASHBOARD_VISUAL: "DASHBOARD_VISUAL",
    GENERATED_ANSWER: "GENERATED_ANSWER",
    NO_ANSWER: "NO_ANSWER",
};
export const PurchaseMode = {
    AUTO_PURCHASE: "AUTO_PURCHASE",
    MANUAL: "MANUAL",
};
export const TopicFilterAttribute = {
    DIRECT_QUICKSIGHT_OWNER: "DIRECT_QUICKSIGHT_OWNER",
    DIRECT_QUICKSIGHT_SOLE_OWNER: "DIRECT_QUICKSIGHT_SOLE_OWNER",
    DIRECT_QUICKSIGHT_VIEWER_OR_OWNER: "DIRECT_QUICKSIGHT_VIEWER_OR_OWNER",
    QUICKSIGHT_OWNER: "QUICKSIGHT_OWNER",
    QUICKSIGHT_USER: "QUICKSIGHT_USER",
    QUICKSIGHT_VIEWER_OR_OWNER: "QUICKSIGHT_VIEWER_OR_OWNER",
    TOPIC_NAME: "TOPIC_NAME",
};
export const TopicFilterOperator = {
    StringEquals: "StringEquals",
    StringLike: "StringLike",
};
export const DescribeAnalysisResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DescribeAnalysisDefinitionResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DescribeAssetBundleExportJobResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.DownloadUrl && { DownloadUrl: SENSITIVE_STRING }),
});
export const DescribeAssetBundleImportJobResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AssetBundleImportSource && {
        AssetBundleImportSource: AssetBundleImportSourceDescriptionFilterSensitiveLog(obj.AssetBundleImportSource),
    }),
});
export const DescribeDashboardResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DescribeDashboardDefinitionResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const SnapshotConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Parameters && { Parameters: _ParametersFilterSensitiveLog(obj.Parameters) }),
});
export const DescribeDashboardSnapshotJobResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const SnapshotJobResultFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DescribeDashboardSnapshotJobResultResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DescribeDataSetResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.DataSet && { DataSet: DataSetFilterSensitiveLog(obj.DataSet) }),
});
export const TemplateVersionFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const TemplateFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DescribeTemplateResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DescribeTemplateDefinitionResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DescribeTopicResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const GeneratedAnswerResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.QuestionText && { QuestionText: SENSITIVE_STRING }),
    ...(obj.Restatement && { Restatement: SENSITIVE_STRING }),
});
export const SessionTagFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Value && { Value: SENSITIVE_STRING }),
});
export const GenerateEmbedUrlForAnonymousUserRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SessionTags && { SessionTags: obj.SessionTags.map((item) => SessionTagFilterSensitiveLog(item)) }),
});
export const GenerateEmbedUrlForAnonymousUserResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.EmbedUrl && { EmbedUrl: SENSITIVE_STRING }),
});
export const GenerateEmbedUrlForRegisteredUserResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.EmbedUrl && { EmbedUrl: SENSITIVE_STRING }),
});
export const GenerateEmbedUrlForRegisteredUserWithIdentityResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.EmbedUrl && { EmbedUrl: SENSITIVE_STRING }),
});
export const GetDashboardEmbedUrlResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.EmbedUrl && { EmbedUrl: SENSITIVE_STRING }),
});
export const GetSessionEmbedUrlResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.EmbedUrl && { EmbedUrl: SENSITIVE_STRING }),
});
export const PredictQAResultsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.QueryText && { QueryText: SENSITIVE_STRING }),
});
export const QAResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.GeneratedAnswer && { GeneratedAnswer: GeneratedAnswerResultFilterSensitiveLog(obj.GeneratedAnswer) }),
});
export const PredictQAResultsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.PrimaryResult && { PrimaryResult: QAResultFilterSensitiveLog(obj.PrimaryResult) }),
    ...(obj.AdditionalResults && {
        AdditionalResults: obj.AdditionalResults.map((item) => QAResultFilterSensitiveLog(item)),
    }),
});
