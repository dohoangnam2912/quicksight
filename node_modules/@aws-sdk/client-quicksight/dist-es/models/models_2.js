import { SENSITIVE_STRING } from "@smithy/smithy-client";
import { CalculatedFieldFilterSensitiveLog, ColumnConfigurationFilterSensitiveLog, DataLabelOptionsFilterSensitiveLog, MeasureFieldFilterSensitiveLog, ParameterDeclarationFilterSensitiveLog, } from "./models_0";
import { ConditionalFormattingColorFilterSensitiveLog, ConditionalFormattingIconFilterSensitiveLog, GaugeChartVisualFilterSensitiveLog, HistogramVisualFilterSensitiveLog, InsightVisualFilterSensitiveLog, KPIVisualFilterSensitiveLog, LayerMapVisualFilterSensitiveLog, UnaggregatedFieldFilterSensitiveLog, VisualPaletteFilterSensitiveLog, } from "./models_1";
import { QuickSightServiceException as __BaseException } from "./QuickSightServiceException";
export const PivotTableConditionalFormattingScopeRole = {
    FIELD: "FIELD",
    FIELD_TOTAL: "FIELD_TOTAL",
    GRAND_TOTAL: "GRAND_TOTAL",
};
export const PluginVisualAxisName = {
    GROUP_BY: "GROUP_BY",
    VALUE: "VALUE",
};
export const RadarChartAxesRangeScale = {
    AUTO: "AUTO",
    INDEPENDENT: "INDEPENDENT",
    SHARED: "SHARED",
};
export const RadarChartShape = {
    CIRCLE: "CIRCLE",
    POLYGON: "POLYGON",
};
export const TableCellImageScalingConfiguration = {
    DO_NOT_SCALE: "DO_NOT_SCALE",
    FIT_TO_CELL_HEIGHT: "FIT_TO_CELL_HEIGHT",
    FIT_TO_CELL_WIDTH: "FIT_TO_CELL_WIDTH",
};
export const TableFieldIconSetType = {
    LINK: "LINK",
};
export const TransposedColumnType = {
    ROW_HEADER_COLUMN: "ROW_HEADER_COLUMN",
    VALUE_COLUMN: "VALUE_COLUMN",
};
export const TableOrientation = {
    HORIZONTAL: "HORIZONTAL",
    VERTICAL: "VERTICAL",
};
export const WordCloudCloudLayout = {
    FLUID: "FLUID",
    NORMAL: "NORMAL",
};
export const WordCloudWordCasing = {
    EXISTING_CASE: "EXISTING_CASE",
    LOWER_CASE: "LOWER_CASE",
};
export const WordCloudWordOrientation = {
    HORIZONTAL: "HORIZONTAL",
    HORIZONTAL_AND_VERTICAL: "HORIZONTAL_AND_VERTICAL",
};
export const WordCloudWordPadding = {
    LARGE: "LARGE",
    MEDIUM: "MEDIUM",
    NONE: "NONE",
    SMALL: "SMALL",
};
export const WordCloudWordScaling = {
    EMPHASIZE: "EMPHASIZE",
    NORMAL: "NORMAL",
};
export const AnalysisFilterAttribute = {
    ANALYSIS_NAME: "ANALYSIS_NAME",
    DIRECT_QUICKSIGHT_OWNER: "DIRECT_QUICKSIGHT_OWNER",
    DIRECT_QUICKSIGHT_SOLE_OWNER: "DIRECT_QUICKSIGHT_SOLE_OWNER",
    DIRECT_QUICKSIGHT_VIEWER_OR_OWNER: "DIRECT_QUICKSIGHT_VIEWER_OR_OWNER",
    QUICKSIGHT_OWNER: "QUICKSIGHT_OWNER",
    QUICKSIGHT_USER: "QUICKSIGHT_USER",
    QUICKSIGHT_VIEWER_OR_OWNER: "QUICKSIGHT_VIEWER_OR_OWNER",
};
export const FilterOperator = {
    StringEquals: "StringEquals",
    StringLike: "StringLike",
};
export const AnchorType = {
    TODAY: "TODAY",
};
export const AnonymousUserDashboardEmbeddingConfigurationDisabledFeature = {
    SHARED_VIEW: "SHARED_VIEW",
};
export const AnonymousUserDashboardEmbeddingConfigurationEnabledFeature = {
    SHARED_VIEW: "SHARED_VIEW",
};
export const SnapshotFileFormatType = {
    CSV: "CSV",
    EXCEL: "EXCEL",
    PDF: "PDF",
};
export const SnapshotFileSheetSelectionScope = {
    ALL_VISUALS: "ALL_VISUALS",
    SELECTED_VISUALS: "SELECTED_VISUALS",
};
export const AssetBundleExportJobAnalysisPropertyToOverride = {
    NAME: "Name",
};
export const AssetBundleExportJobDashboardPropertyToOverride = {
    NAME: "Name",
};
export const AssetBundleExportJobDataSetPropertyToOverride = {
    NAME: "Name",
    REFRESH_FAILURE_EMAIL_ALERT_STATUS: "RefreshFailureEmailAlertStatus",
};
export const AssetBundleExportJobDataSourcePropertyToOverride = {
    CATALOG: "Catalog",
    CLUSTER_ID: "ClusterId",
    DATABASE: "Database",
    DATA_SET_NAME: "DataSetName",
    DISABLE_SSL: "DisableSsl",
    DOMAIN: "Domain",
    HOST: "Host",
    INSTANCE_ID: "InstanceId",
    MANIFEST_FILE_LOCATION: "ManifestFileLocation",
    NAME: "Name",
    PASSWORD: "Password",
    PORT: "Port",
    PRODUCT_TYPE: "ProductType",
    ROLE_ARN: "RoleArn",
    SECRET_ARN: "SecretArn",
    USERNAME: "Username",
    WAREHOUSE: "Warehouse",
    WORK_GROUP: "WorkGroup",
};
export const AssetBundleExportJobFolderPropertyToOverride = {
    NAME: "Name",
    PARENT_FOLDER_ARN: "ParentFolderArn",
};
export const AssetBundleExportJobRefreshSchedulePropertyToOverride = {
    START_AFTER_DATE_TIME: "StartAfterDateTime",
};
export const AssetBundleExportJobThemePropertyToOverride = {
    NAME: "Name",
};
export const AssetBundleExportJobVPCConnectionPropertyToOverride = {
    DNS_RESOLVERS: "DnsResolvers",
    NAME: "Name",
    ROLE_ARN: "RoleArn",
};
export const AssetBundleExportFormat = {
    CLOUDFORMATION_JSON: "CLOUDFORMATION_JSON",
    QUICKSIGHT_JSON: "QUICKSIGHT_JSON",
};
export const AssetBundleExportJobStatus = {
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    QUEUED_FOR_IMMEDIATE_EXECUTION: "QUEUED_FOR_IMMEDIATE_EXECUTION",
    SUCCESSFUL: "SUCCESSFUL",
};
export const AssetBundleImportFailureAction = {
    DO_NOTHING: "DO_NOTHING",
    ROLLBACK: "ROLLBACK",
};
export const RefreshFailureAlertStatus = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const LookbackWindowSizeUnit = {
    DAY: "DAY",
    HOUR: "HOUR",
    WEEK: "WEEK",
};
export const AuthenticationType = {
    PASSWORD: "PASSWORD",
    TOKEN: "TOKEN",
    X509: "X509",
};
export const StarburstProductType = {
    ENTERPRISE: "ENTERPRISE",
    GALAXY: "GALAXY",
};
export var DataSourceParameters;
(function (DataSourceParameters) {
    DataSourceParameters.visit = (value, visitor) => {
        if (value.AmazonElasticsearchParameters !== undefined)
            return visitor.AmazonElasticsearchParameters(value.AmazonElasticsearchParameters);
        if (value.AthenaParameters !== undefined)
            return visitor.AthenaParameters(value.AthenaParameters);
        if (value.AuroraParameters !== undefined)
            return visitor.AuroraParameters(value.AuroraParameters);
        if (value.AuroraPostgreSqlParameters !== undefined)
            return visitor.AuroraPostgreSqlParameters(value.AuroraPostgreSqlParameters);
        if (value.AwsIotAnalyticsParameters !== undefined)
            return visitor.AwsIotAnalyticsParameters(value.AwsIotAnalyticsParameters);
        if (value.JiraParameters !== undefined)
            return visitor.JiraParameters(value.JiraParameters);
        if (value.MariaDbParameters !== undefined)
            return visitor.MariaDbParameters(value.MariaDbParameters);
        if (value.MySqlParameters !== undefined)
            return visitor.MySqlParameters(value.MySqlParameters);
        if (value.OracleParameters !== undefined)
            return visitor.OracleParameters(value.OracleParameters);
        if (value.PostgreSqlParameters !== undefined)
            return visitor.PostgreSqlParameters(value.PostgreSqlParameters);
        if (value.PrestoParameters !== undefined)
            return visitor.PrestoParameters(value.PrestoParameters);
        if (value.RdsParameters !== undefined)
            return visitor.RdsParameters(value.RdsParameters);
        if (value.RedshiftParameters !== undefined)
            return visitor.RedshiftParameters(value.RedshiftParameters);
        if (value.S3Parameters !== undefined)
            return visitor.S3Parameters(value.S3Parameters);
        if (value.ServiceNowParameters !== undefined)
            return visitor.ServiceNowParameters(value.ServiceNowParameters);
        if (value.SnowflakeParameters !== undefined)
            return visitor.SnowflakeParameters(value.SnowflakeParameters);
        if (value.SparkParameters !== undefined)
            return visitor.SparkParameters(value.SparkParameters);
        if (value.SqlServerParameters !== undefined)
            return visitor.SqlServerParameters(value.SqlServerParameters);
        if (value.TeradataParameters !== undefined)
            return visitor.TeradataParameters(value.TeradataParameters);
        if (value.TwitterParameters !== undefined)
            return visitor.TwitterParameters(value.TwitterParameters);
        if (value.AmazonOpenSearchParameters !== undefined)
            return visitor.AmazonOpenSearchParameters(value.AmazonOpenSearchParameters);
        if (value.ExasolParameters !== undefined)
            return visitor.ExasolParameters(value.ExasolParameters);
        if (value.DatabricksParameters !== undefined)
            return visitor.DatabricksParameters(value.DatabricksParameters);
        if (value.StarburstParameters !== undefined)
            return visitor.StarburstParameters(value.StarburstParameters);
        if (value.TrinoParameters !== undefined)
            return visitor.TrinoParameters(value.TrinoParameters);
        if (value.BigQueryParameters !== undefined)
            return visitor.BigQueryParameters(value.BigQueryParameters);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(DataSourceParameters || (DataSourceParameters = {}));
export const AssetBundleImportJobStatus = {
    FAILED: "FAILED",
    FAILED_ROLLBACK_COMPLETED: "FAILED_ROLLBACK_COMPLETED",
    FAILED_ROLLBACK_ERROR: "FAILED_ROLLBACK_ERROR",
    FAILED_ROLLBACK_IN_PROGRESS: "FAILED_ROLLBACK_IN_PROGRESS",
    IN_PROGRESS: "IN_PROGRESS",
    QUEUED_FOR_IMMEDIATE_EXECUTION: "QUEUED_FOR_IMMEDIATE_EXECUTION",
    SUCCESSFUL: "SUCCESSFUL",
};
export const AssignmentStatus = {
    DISABLED: "DISABLED",
    DRAFT: "DRAFT",
    ENABLED: "ENABLED",
};
export const AuthenticationMethodOption = {
    ACTIVE_DIRECTORY: "ACTIVE_DIRECTORY",
    IAM_AND_QUICKSIGHT: "IAM_AND_QUICKSIGHT",
    IAM_IDENTITY_CENTER: "IAM_IDENTITY_CENTER",
    IAM_ONLY: "IAM_ONLY",
};
export const ServiceType = {
    QBUSINESS: "QBUSINESS",
    REDSHIFT: "REDSHIFT",
};
export const AuthorSpecifiedAggregation = {
    AVERAGE: "AVERAGE",
    COUNT: "COUNT",
    DISTINCT_COUNT: "DISTINCT_COUNT",
    MAX: "MAX",
    MEDIAN: "MEDIAN",
    MIN: "MIN",
    PERCENTILE: "PERCENTILE",
    STDEV: "STDEV",
    STDEVP: "STDEVP",
    SUM: "SUM",
    VAR: "VAR",
    VARP: "VARP",
};
export const ContributionAnalysisDirection = {
    DECREASE: "DECREASE",
    INCREASE: "INCREASE",
    NEUTRAL: "NEUTRAL",
};
export const ContributionAnalysisSortType = {
    ABSOLUTE_DIFFERENCE: "ABSOLUTE_DIFFERENCE",
    CONTRIBUTION_PERCENTAGE: "CONTRIBUTION_PERCENTAGE",
    DEVIATION_FROM_EXPECTED: "DEVIATION_FROM_EXPECTED",
    PERCENTAGE_DIFFERENCE: "PERCENTAGE_DIFFERENCE",
};
export const TopicSortDirection = {
    ASCENDING: "ASCENDING",
    DESCENDING: "DESCENDING",
};
export const ConstantType = {
    COLLECTIVE: "COLLECTIVE",
    RANGE: "RANGE",
    SINGULAR: "SINGULAR",
};
export const FilterClass = {
    CONDITIONAL_VALUE_FILTER: "CONDITIONAL_VALUE_FILTER",
    ENFORCED_VALUE_FILTER: "ENFORCED_VALUE_FILTER",
    NAMED_VALUE_FILTER: "NAMED_VALUE_FILTER",
};
export const TopicIRFilterType = {
    ACCEPT_ALL_FILTER: "ACCEPT_ALL_FILTER",
    CATEGORY_FILTER: "CATEGORY_FILTER",
    DATE_RANGE_FILTER: "DATE_RANGE_FILTER",
    EQUALS: "EQUALS",
    NUMERIC_EQUALITY_FILTER: "NUMERIC_EQUALITY_FILTER",
    NUMERIC_RANGE_FILTER: "NUMERIC_RANGE_FILTER",
    RANK_LIMIT_FILTER: "RANK_LIMIT_FILTER",
    RELATIVE_DATE_FILTER: "RELATIVE_DATE_FILTER",
    TOP_BOTTOM_FILTER: "TOP_BOTTOM_FILTER",
};
export const TopicIRFilterFunction = {
    CONTAINS: "CONTAINS",
    CONTAINS_STRING: "CONTAINS_STRING",
    ENDS_WITH: "ENDS_WITH",
    EXACT: "EXACT",
    LAST: "LAST",
    NEXT: "NEXT",
    NOW: "NOW",
    PREVIOUS: "PREVIOUS",
    STARTS_WITH: "STARTS_WITH",
    THIS: "THIS",
};
export const NullFilterOption = {
    ALL_VALUES: "ALL_VALUES",
    NON_NULLS_ONLY: "NON_NULLS_ONLY",
    NULLS_ONLY: "NULLS_ONLY",
};
export const DisplayFormat = {
    AUTO: "AUTO",
    CURRENCY: "CURRENCY",
    DATE: "DATE",
    NUMBER: "NUMBER",
    PERCENT: "PERCENT",
    STRING: "STRING",
};
export const TopicNumericSeparatorSymbol = {
    COMMA: "COMMA",
    DOT: "DOT",
};
export const ComparisonMethodType = {
    DIFF: "DIFF",
    DIFF_AS_PERC: "DIFF_AS_PERC",
    MOVING_AVERAGE: "MOVING_AVERAGE",
    PERCENT_OF_TOTAL: "PERCENT_OF_TOTAL",
    PERC_DIFF: "PERC_DIFF",
    POP_CURRENT_DIFF: "POP_CURRENT_DIFF",
    POP_CURRENT_DIFF_AS_PERC: "POP_CURRENT_DIFF_AS_PERC",
    POP_OVERTIME_DIFF: "POP_OVERTIME_DIFF",
    POP_OVERTIME_DIFF_AS_PERC: "POP_OVERTIME_DIFF_AS_PERC",
    RUNNING_SUM: "RUNNING_SUM",
};
export const VisualRole = {
    COMPLIMENTARY: "COMPLIMENTARY",
    FALLBACK: "FALLBACK",
    FRAGMENT: "FRAGMENT",
    MULTI_INTENT: "MULTI_INTENT",
    PRIMARY: "PRIMARY",
};
export const ReviewedAnswerErrorCode = {
    DATASET_DOES_NOT_EXIST: "DATASET_DOES_NOT_EXIST",
    DUPLICATED_ANSWER: "DUPLICATED_ANSWER",
    INTERNAL_ERROR: "INTERNAL_ERROR",
    INVALID_DATA: "INVALID_DATA",
    INVALID_DATASET_ARN: "INVALID_DATASET_ARN",
    MISSING_ANSWER: "MISSING_ANSWER",
    MISSING_REQUIRED_FIELDS: "MISSING_REQUIRED_FIELDS",
};
export class InternalFailureException extends __BaseException {
    name = "InternalFailureException";
    $fault = "server";
    Message;
    RequestId;
    constructor(opts) {
        super({
            name: "InternalFailureException",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, InternalFailureException.prototype);
        this.Message = opts.Message;
        this.RequestId = opts.RequestId;
    }
}
export class InvalidParameterValueException extends __BaseException {
    name = "InvalidParameterValueException";
    $fault = "client";
    Message;
    RequestId;
    constructor(opts) {
        super({
            name: "InvalidParameterValueException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidParameterValueException.prototype);
        this.Message = opts.Message;
        this.RequestId = opts.RequestId;
    }
}
export const ExceptionResourceType = {
    ACCOUNT_SETTINGS: "ACCOUNT_SETTINGS",
    DATA_SET: "DATA_SET",
    DATA_SOURCE: "DATA_SOURCE",
    GROUP: "GROUP",
    IAMPOLICY_ASSIGNMENT: "IAMPOLICY_ASSIGNMENT",
    INGESTION: "INGESTION",
    NAMESPACE: "NAMESPACE",
    USER: "USER",
    VPC_CONNECTION: "VPC_CONNECTION",
};
export class ResourceNotFoundException extends __BaseException {
    name = "ResourceNotFoundException";
    $fault = "client";
    Message;
    ResourceType;
    RequestId;
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
        this.ResourceType = opts.ResourceType;
        this.RequestId = opts.RequestId;
    }
}
export class ThrottlingException extends __BaseException {
    name = "ThrottlingException";
    $fault = "client";
    Message;
    RequestId;
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ThrottlingException.prototype);
        this.Message = opts.Message;
        this.RequestId = opts.RequestId;
    }
}
export class ConflictException extends __BaseException {
    name = "ConflictException";
    $fault = "client";
    Message;
    RequestId;
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.Message = opts.Message;
        this.RequestId = opts.RequestId;
    }
}
export var ImageSource;
(function (ImageSource) {
    ImageSource.visit = (value, visitor) => {
        if (value.PublicUrl !== undefined)
            return visitor.PublicUrl(value.PublicUrl);
        if (value.S3Uri !== undefined)
            return visitor.S3Uri(value.S3Uri);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(ImageSource || (ImageSource = {}));
export const BrandStatus = {
    CREATE_FAILED: "CREATE_FAILED",
    CREATE_IN_PROGRESS: "CREATE_IN_PROGRESS",
    CREATE_SUCCEEDED: "CREATE_SUCCEEDED",
    DELETE_FAILED: "DELETE_FAILED",
    DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS",
};
export const BrandVersionStatus = {
    CREATE_FAILED: "CREATE_FAILED",
    CREATE_IN_PROGRESS: "CREATE_IN_PROGRESS",
    CREATE_SUCCEEDED: "CREATE_SUCCEEDED",
};
export const TextConditionalFormatFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.BackgroundColor && { BackgroundColor: ConditionalFormattingColorFilterSensitiveLog(obj.BackgroundColor) }),
    ...(obj.TextColor && { TextColor: ConditionalFormattingColorFilterSensitiveLog(obj.TextColor) }),
    ...(obj.Icon && { Icon: ConditionalFormattingIconFilterSensitiveLog(obj.Icon) }),
});
export const PivotTableCellConditionalFormattingFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.TextFormat && { TextFormat: TextConditionalFormatFilterSensitiveLog(obj.TextFormat) }),
});
export const PivotTableConditionalFormattingOptionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Cell && { Cell: PivotTableCellConditionalFormattingFilterSensitiveLog(obj.Cell) }),
});
export const PivotTableConditionalFormattingFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ConditionalFormattingOptions && {
        ConditionalFormattingOptions: obj.ConditionalFormattingOptions.map((item) => PivotTableConditionalFormattingOptionFilterSensitiveLog(item)),
    }),
});
export const PivotTableVisualFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ConditionalFormatting && {
        ConditionalFormatting: PivotTableConditionalFormattingFilterSensitiveLog(obj.ConditionalFormatting),
    }),
});
export const PluginVisualFieldWellFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Measures && { Measures: obj.Measures.map((item) => MeasureFieldFilterSensitiveLog(item)) }),
    ...(obj.Unaggregated && { Unaggregated: obj.Unaggregated.map((item) => UnaggregatedFieldFilterSensitiveLog(item)) }),
});
export const PluginVisualConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const PluginVisualFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const RadarChartAggregatedFieldWellsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Values && { Values: obj.Values.map((item) => MeasureFieldFilterSensitiveLog(item)) }),
});
export const RadarChartFieldWellsFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const RadarChartConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.VisualPalette && { VisualPalette: VisualPaletteFilterSensitiveLog(obj.VisualPalette) }),
});
export const RadarChartVisualFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const SankeyDiagramAggregatedFieldWellsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Weight && { Weight: obj.Weight.map((item) => MeasureFieldFilterSensitiveLog(item)) }),
});
export const SankeyDiagramFieldWellsFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const SankeyDiagramChartConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.DataLabels && { DataLabels: DataLabelOptionsFilterSensitiveLog(obj.DataLabels) }),
});
export const SankeyDiagramVisualFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const ScatterPlotCategoricallyAggregatedFieldWellsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.XAxis && { XAxis: obj.XAxis.map((item) => MeasureFieldFilterSensitiveLog(item)) }),
    ...(obj.YAxis && { YAxis: obj.YAxis.map((item) => MeasureFieldFilterSensitiveLog(item)) }),
    ...(obj.Size && { Size: obj.Size.map((item) => MeasureFieldFilterSensitiveLog(item)) }),
});
export const ScatterPlotUnaggregatedFieldWellsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Size && { Size: obj.Size.map((item) => MeasureFieldFilterSensitiveLog(item)) }),
});
export const ScatterPlotFieldWellsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ScatterPlotCategoricallyAggregatedFieldWells && {
        ScatterPlotCategoricallyAggregatedFieldWells: ScatterPlotCategoricallyAggregatedFieldWellsFilterSensitiveLog(obj.ScatterPlotCategoricallyAggregatedFieldWells),
    }),
});
export const ScatterPlotConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.FieldWells && { FieldWells: ScatterPlotFieldWellsFilterSensitiveLog(obj.FieldWells) }),
    ...(obj.DataLabels && { DataLabels: DataLabelOptionsFilterSensitiveLog(obj.DataLabels) }),
    ...(obj.VisualPalette && { VisualPalette: VisualPaletteFilterSensitiveLog(obj.VisualPalette) }),
});
export const ScatterPlotVisualFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ChartConfiguration && {
        ChartConfiguration: ScatterPlotConfigurationFilterSensitiveLog(obj.ChartConfiguration),
    }),
});
export const TableAggregatedFieldWellsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Values && { Values: obj.Values.map((item) => MeasureFieldFilterSensitiveLog(item)) }),
});
export const TableUnaggregatedFieldWellsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Values && { Values: obj.Values.map((item) => UnaggregatedFieldFilterSensitiveLog(item)) }),
});
export const TableFieldWellsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.TableUnaggregatedFieldWells && {
        TableUnaggregatedFieldWells: TableUnaggregatedFieldWellsFilterSensitiveLog(obj.TableUnaggregatedFieldWells),
    }),
});
export const TableConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const TableCellConditionalFormattingFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.TextFormat && { TextFormat: TextConditionalFormatFilterSensitiveLog(obj.TextFormat) }),
});
export const TableRowConditionalFormattingFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.BackgroundColor && { BackgroundColor: ConditionalFormattingColorFilterSensitiveLog(obj.BackgroundColor) }),
    ...(obj.TextColor && { TextColor: ConditionalFormattingColorFilterSensitiveLog(obj.TextColor) }),
});
export const TableConditionalFormattingOptionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Cell && { Cell: TableCellConditionalFormattingFilterSensitiveLog(obj.Cell) }),
    ...(obj.Row && { Row: TableRowConditionalFormattingFilterSensitiveLog(obj.Row) }),
});
export const TableConditionalFormattingFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ConditionalFormattingOptions && {
        ConditionalFormattingOptions: obj.ConditionalFormattingOptions.map((item) => TableConditionalFormattingOptionFilterSensitiveLog(item)),
    }),
});
export const TableVisualFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ConditionalFormatting && {
        ConditionalFormatting: TableConditionalFormattingFilterSensitiveLog(obj.ConditionalFormatting),
    }),
});
export const TreeMapAggregatedFieldWellsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Sizes && { Sizes: obj.Sizes.map((item) => MeasureFieldFilterSensitiveLog(item)) }),
    ...(obj.Colors && { Colors: obj.Colors.map((item) => MeasureFieldFilterSensitiveLog(item)) }),
});
export const TreeMapFieldWellsFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const TreeMapConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.DataLabels && { DataLabels: DataLabelOptionsFilterSensitiveLog(obj.DataLabels) }),
});
export const TreeMapVisualFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const WaterfallChartAggregatedFieldWellsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Values && { Values: obj.Values.map((item) => MeasureFieldFilterSensitiveLog(item)) }),
});
export const WaterfallChartFieldWellsFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const WaterfallChartConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.DataLabels && { DataLabels: DataLabelOptionsFilterSensitiveLog(obj.DataLabels) }),
    ...(obj.VisualPalette && { VisualPalette: VisualPaletteFilterSensitiveLog(obj.VisualPalette) }),
});
export const WaterfallVisualFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const WordCloudAggregatedFieldWellsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Size && { Size: obj.Size.map((item) => MeasureFieldFilterSensitiveLog(item)) }),
});
export const WordCloudFieldWellsFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const WordCloudChartConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const WordCloudVisualFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const VisualFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.KPIVisual && { KPIVisual: KPIVisualFilterSensitiveLog(obj.KPIVisual) }),
    ...(obj.GaugeChartVisual && { GaugeChartVisual: GaugeChartVisualFilterSensitiveLog(obj.GaugeChartVisual) }),
    ...(obj.LayerMapVisual && { LayerMapVisual: LayerMapVisualFilterSensitiveLog(obj.LayerMapVisual) }),
    ...(obj.ScatterPlotVisual && { ScatterPlotVisual: ScatterPlotVisualFilterSensitiveLog(obj.ScatterPlotVisual) }),
    ...(obj.HistogramVisual && { HistogramVisual: HistogramVisualFilterSensitiveLog(obj.HistogramVisual) }),
    ...(obj.InsightVisual && { InsightVisual: InsightVisualFilterSensitiveLog(obj.InsightVisual) }),
});
export const SheetDefinitionFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const AnalysisDefinitionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.CalculatedFields && {
        CalculatedFields: obj.CalculatedFields.map((item) => CalculatedFieldFilterSensitiveLog(item)),
    }),
    ...(obj.ParameterDeclarations && {
        ParameterDeclarations: obj.ParameterDeclarations.map((item) => ParameterDeclarationFilterSensitiveLog(item)),
    }),
    ...(obj.ColumnConfigurations && {
        ColumnConfigurations: obj.ColumnConfigurations.map((item) => ColumnConfigurationFilterSensitiveLog(item)),
    }),
});
export const SnapshotJobS3ResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.S3Uri && { S3Uri: SENSITIVE_STRING }),
});
export const SnapshotJobResultFileGroupFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.S3Results && { S3Results: obj.S3Results.map((item) => SnapshotJobS3ResultFilterSensitiveLog(item)) }),
});
export const AnonymousUserSnapshotJobResultFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const AssetBundleImportJobDataSourceCredentialPairFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const AssetBundleImportJobDataSourceCredentialsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.CredentialPair && { CredentialPair: SENSITIVE_STRING }),
});
export const AssetBundleImportJobDataSourceOverrideParametersFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.DataSourceParameters && { DataSourceParameters: obj.DataSourceParameters }),
    ...(obj.Credentials && { Credentials: AssetBundleImportJobDataSourceCredentialsFilterSensitiveLog(obj.Credentials) }),
});
export const AssetBundleImportJobOverrideParametersFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.DataSources && {
        DataSources: obj.DataSources.map((item) => AssetBundleImportJobDataSourceOverrideParametersFilterSensitiveLog(item)),
    }),
});
export const AssetBundleImportSourceFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Body && { Body: SENSITIVE_STRING }),
});
export const AssetBundleImportSourceDescriptionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Body && { Body: SENSITIVE_STRING }),
});
export const TopicIRMetricFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Expression && { Expression: SENSITIVE_STRING }),
});
export const TopicIRFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Metrics && { Metrics: obj.Metrics.map((item) => TopicIRMetricFilterSensitiveLog(item)) }),
});
